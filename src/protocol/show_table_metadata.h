/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_TABLE_METADATA_H__
#define __SHOW_TABLE_METADATA_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #showTableMetadata(const ShowTableMetadataRequest&) const}.
     * <p>
     * Retrieves the user provided metadata for the specified tables.
     */
    struct ShowTableMetadataRequest
    {

        /**
         * Constructs a ShowTableMetadataRequest object with default parameter
         * values.
         */
        ShowTableMetadataRequest() :
            tableNames(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowTableMetadataRequest object with the specified
         * parameters.
         * 
         * @param[in] tableNames  Tables whose metadata will be fetched. All
         *                        provided tables must exist in GPUdb, or GPUdb
         *                        returns an error.
         * @param[in] options  Optional parameters.  Default value is an empty
         *                     std::map.
         * 
         */
        ShowTableMetadataRequest(const std::vector<std::string>& tableNames, const std::map<std::string, std::string>& options):
            tableNames(tableNames),
            options(options)
        {
        }

        std::vector<std::string> tableNames;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowTableMetadataRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowTableMetadataRequest& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowTableMetadataRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #showTableMetadata(const ShowTableMetadataRequest&) const}.
     * <p>
     * Retrieves the user provided metadata for the specified tables.
     */
    struct ShowTableMetadataResponse
    {

        /**
         * Constructs a ShowTableMetadataResponse object with default parameter
         * values.
         */
        ShowTableMetadataResponse() :
            tableNames(std::vector<std::string>()),
            metadataMaps(std::vector<std::map<std::string, std::string> >())
        {
        }

        std::vector<std::string> tableNames;
        std::vector<std::map<std::string, std::string> > metadataMaps;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowTableMetadataResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowTableMetadataResponse& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.metadataMaps);
        }

        static void decode(Decoder& d, gpudb::ShowTableMetadataResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.metadataMaps);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.metadataMaps);
            }
        }
    };
}

#endif
