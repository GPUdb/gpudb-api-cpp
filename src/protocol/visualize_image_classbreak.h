/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __VISUALIZE_IMAGE_CLASSBREAK_H__
#define __VISUALIZE_IMAGE_CLASSBREAK_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #visualizeImageClassbreak(VisualizeImageClassbreakRequest&)}.
     * <p>
     * Generates 'class break' rasterized image tiles for an area of interest
     * using the given tables and the provided parameters.
     * <p>
     * A class break rendering is where data from one or more GPUdb tables is
     * rasterized with styling applied on a per-class basis. GPUdb supports
     * class breaks based on one or more data columns. Distinct values (for
     * strings) or ranges (for numeric attributes) must be provided in the
     * cb_column_name1/cb_vals1 and cb_column_name2/cb_vals2 parameters. The
     * styling parameters must be specified for each class.
     * <p>
     * All color values must be in the format RRGGBB or AARRGGBB (to specify
     * the alpha value).
     * <p>

     * The image is contained in the @a imageData field.
     */
    struct VisualizeImageClassbreakRequest
    {

        /**
         * Constructs a VisualizeImageClassbreakRequest object with default
         * parameter values.
         */
        VisualizeImageClassbreakRequest() :
            tableNames(std::vector<std::string>()),
            worldTableNames(std::vector<std::string>()),
            xColumnName(std::string()),
            yColumnName(std::string()),
            trackIds(std::vector<std::vector<std::string> >()),
            cbColumnName1(std::string()),
            cbVals1(std::vector<std::string>()),
            cbColumnName2(std::vector<std::string>()),
            cbVals2(std::vector<std::vector<std::string> >()),
            minX(double()),
            maxX(double()),
            minY(double()),
            maxY(double()),
            width(int32_t()),
            height(int32_t()),
            projection(std::string()),
            bgColor(int64_t()),
            doPoints(std::vector<bool>()),
            doShapes(std::vector<bool>()),
            doTracks(std::vector<bool>()),
            doSymbology(std::vector<bool>()),
            pointcolors(std::vector<int64_t>()),
            pointsizes(std::vector<int32_t>()),
            pointshapes(std::vector<std::string>()),
            shapelinewidths(std::vector<int32_t>()),
            shapelinecolors(std::vector<int64_t>()),
            shapefillcolors(std::vector<int64_t>()),
            tracklinewidths(std::vector<int32_t>()),
            tracklinecolors(std::vector<int64_t>()),
            trackmarkersizes(std::vector<int32_t>()),
            trackmarkercolors(std::vector<int64_t>()),
            trackmarkershapes(std::vector<std::string>()),
            trackheadcolors(std::vector<int64_t>()),
            trackheadsizes(std::vector<int32_t>()),
            trackheadshapes(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a VisualizeImageClassbreakRequest object with the
         * specified parameters.
         * 
         * @param[in] tableNames  Name of the table containing the data for the
         *                        various layers to be rendered.
         * @param[in] worldTableNames  Optional name of the tables containing
         *                             the data for the entire track when the
         *                             @a tableNames contains only part of the
         *                             track data, but the entire track has to
         *                             be rendered.
         * @param[in] xColumnName  Name of the column containing the x
         *                         coordinates.
         * @param[in] yColumnName  Name of the column containing the y
         *                         coordinates.
         * @param[in] trackIds  Tracks from the @a tableNames to be rendered.
         * @param[in] cbColumnName1  Name of the column for the first class
         *                           break.
         * @param[in] cbVals1  Comma separated list of values or ranges (e.g.
         *                     '0:5,5:10,15:30').
         * @param[in] cbColumnName2  Optional comma seperated list of valid
         *                           column names. An empty string implies not
         *                           using more than one column for the class
         *                           break. For a non-empty list, there needs
         *                           to be as many entries in the list as there
         *                           are classes for the first column (@a
         *                           cbColumnName1). However, the column names
         *                           can be empty to indicate that for the
         *                           corresponding class of the first
         *                           attribute, no secondary class break will
         *                           be applied. All the column names in this
         *                           list must be different from the first
         *                           column @a cbColumnName1. For example,
         *                           'col2,col3,col2'.
         * @param[in] cbVals2  Comma separated list of []-enclosed lists of
         *                     values or ranges; e.g.
         *                     '[0:5,5:10],[of,on,so],[-50:-20]'. Each square
         *                     bracket enclosed list describes the secondary
         *                     classes for the respective attribute in @a
         *                     cbColumnName2 and the respective class in @a
         *                     cbColumnName1 / @a cbVals1.
         * @param[in] minX  Lower bound for the x values.
         * @param[in] maxX  Upper bound for the x values.
         * @param[in] minY  Lower bound for the y values.
         * @param[in] maxY  Upper bound for the y values.
         * @param[in] width  Width of the generated image.
         * @param[in] height  Height of the generated image.
         * @param[in] projection  Spatial Reference System (i.e. EPSG Code).
         *                        Default value is 'PLATE_CARREE'. The allowed
         *                        values are:  ~!~ * EPSG:4326 * PLATE_CARREE *
         *                        _900913 * EPSG:900913 * _102100 * EPSG:102100
         *                        * _3857 * EPSG:3857 * WEB_MERCATOR~!~
         * @param[in] bgColor  Background color of the generated image.
         * @param[in] doPoints  Rasterize point data toggle.  Default value is
         *                      'true'. The allowed values are:  ~!~ * TRUE *
         *                      FALSE~!~
         * @param[in] doShapes  Rasterize shapes toggle.  Default value is
         *                      'true'. The allowed values are:  ~!~ * TRUE *
         *                      FALSE~!~
         * @param[in] doTracks  Rasterize tracks toggle.  Default value is
         *                      'true'. The allowed values are:  ~!~ * TRUE *
         *                      FALSE~!~
         * @param[in] doSymbology  Rasterize symbols toggle.  Default value is
         *                         'false'. The allowed values are:  ~!~ * TRUE
         *                         * FALSE~!~
         * @param[in] pointcolors  RGB color value in hex for the points.
         *                         Default value is 'FF0000'.
         * @param[in] pointsizes  Size of points.  Default value is '3'. The
         *                        minimum allowed value is 0. The maximum
         *                        allowed value is 20.
         * @param[in] pointshapes  Shape of the point.  The allowed values are:
         *                         ~!~ * NONE * CIRCLE * SQUARE * DIAMOND *
         *                         HOLLOWCIRCLE * HOLLOWSQUARE * HOLLOWDIAMOND
         *                         * SYMBOLCODE~!~
         * @param[in] shapelinewidths  Width of the lines.  Default value is
         *                             '3'. The minimum allowed value is 0. The
         *                             maximum allowed value is 20.
         * @param[in] shapelinecolors  RGB color values in hex for the line.
         *                             Default is yellow.  Default value is
         *                             'FFFF00 '.
         * @param[in] shapefillcolors  RGB color values in hex for the fill
         *                             color of the shapes. Use '-1' for no
         *                             fill.  Default value is '-1'.
         * @param[in] tracklinewidths  Width of the track lines. '0' implies do
         *                             not draw track lines.  Default value is
         *                             '3'. The minimum allowed value is 0. The
         *                             maximum allowed value is 20.
         * @param[in] tracklinecolors  RGB color values for the track lines.
         *                             Default value is 'green'.
         * @param[in] trackmarkersizes  Size of the track point markers.
         *                              Default value is '3'. The minimum
         *                              allowed value is 0. The maximum allowed
         *                              value is 20.
         * @param[in] trackmarkercolors  Color of the track point markers.
         *                               Default value is 'blue'.
         * @param[in] trackmarkershapes  Shape of track point markers.  Default
         *                               value is 'none'. The allowed values
         *                               are:  ~!~ * NONE * CIRCLE * SQUARE *
         *                               DIAMOND * HOLLOWCIRCLE * HOLLOWSQUARE
         *                               * HOLLOWDIAMOND * SYMBOLCODE~!~
         * @param[in] trackheadcolors  Color of track head markers.  Default
         *                             value is 'FFFFFF'.
         * @param[in] trackheadsizes  Size of track head markers.  Default
         *                            value is '10'. The minimum allowed value
         *                            is 0. The maximum allowed value is 20.
         * @param[in] trackheadshapes  Shape of track head markers.  Default
         *                             value is 'circle'. The allowed values
         *                             are:  ~!~ * NONE * CIRCLE * SQUARE *
         *                             DIAMOND * HOLLOWCIRCLE * HOLLOWSQUARE *
         *                             HOLLOWDIAMOND * SYMBOLCODE~!~
         * @param[in] options  Optional parameters.  Default value is an empty
         *                     {@link std::map}.
         * 
         */
        VisualizeImageClassbreakRequest(const std::vector<std::string>& tableNames, const std::vector<std::string>& worldTableNames, const std::string& xColumnName, const std::string& yColumnName, const std::vector<std::vector<std::string> >& trackIds, const std::string& cbColumnName1, const std::vector<std::string>& cbVals1, const std::vector<std::string>& cbColumnName2, const std::vector<std::vector<std::string> >& cbVals2, const double minX, const double maxX, const double minY, const double maxY, const int32_t width, const int32_t height, const std::string& projection, const int64_t bgColor, const std::vector<bool>& doPoints, const std::vector<bool>& doShapes, const std::vector<bool>& doTracks, const std::vector<bool>& doSymbology, const std::vector<int64_t>& pointcolors, const std::vector<int32_t>& pointsizes, const std::vector<std::string>& pointshapes, const std::vector<int32_t>& shapelinewidths, const std::vector<int64_t>& shapelinecolors, const std::vector<int64_t>& shapefillcolors, const std::vector<int32_t>& tracklinewidths, const std::vector<int64_t>& tracklinecolors, const std::vector<int32_t>& trackmarkersizes, const std::vector<int64_t>& trackmarkercolors, const std::vector<std::string>& trackmarkershapes, const std::vector<int64_t>& trackheadcolors, const std::vector<int32_t>& trackheadsizes, const std::vector<std::string>& trackheadshapes, const std::map<std::string, std::string>& options):
            tableNames(tableNames),
            worldTableNames(worldTableNames),
            xColumnName(xColumnName),
            yColumnName(yColumnName),
            trackIds(trackIds),
            cbColumnName1(cbColumnName1),
            cbVals1(cbVals1),
            cbColumnName2(cbColumnName2),
            cbVals2(cbVals2),
            minX(minX),
            maxX(maxX),
            minY(minY),
            maxY(maxY),
            width(width),
            height(height),
            projection(projection),
            bgColor(bgColor),
            doPoints(doPoints),
            doShapes(doShapes),
            doTracks(doTracks),
            doSymbology(doSymbology),
            pointcolors(pointcolors),
            pointsizes(pointsizes),
            pointshapes(pointshapes),
            shapelinewidths(shapelinewidths),
            shapelinecolors(shapelinecolors),
            shapefillcolors(shapefillcolors),
            tracklinewidths(tracklinewidths),
            tracklinecolors(tracklinecolors),
            trackmarkersizes(trackmarkersizes),
            trackmarkercolors(trackmarkercolors),
            trackmarkershapes(trackmarkershapes),
            trackheadcolors(trackheadcolors),
            trackheadsizes(trackheadsizes),
            trackheadshapes(trackheadshapes),
            options(options)
        {
        }

        std::vector<std::string> tableNames;
        std::vector<std::string> worldTableNames;
        std::string xColumnName;
        std::string yColumnName;
        std::vector<std::vector<std::string> > trackIds;
        std::string cbColumnName1;
        std::vector<std::string> cbVals1;
        std::vector<std::string> cbColumnName2;
        std::vector<std::vector<std::string> > cbVals2;
        double minX;
        double maxX;
        double minY;
        double maxY;
        int32_t width;
        int32_t height;
        std::string projection;
        int64_t bgColor;
        std::vector<bool> doPoints;
        std::vector<bool> doShapes;
        std::vector<bool> doTracks;
        std::vector<bool> doSymbology;
        std::vector<int64_t> pointcolors;
        std::vector<int32_t> pointsizes;
        std::vector<std::string> pointshapes;
        std::vector<int32_t> shapelinewidths;
        std::vector<int64_t> shapelinecolors;
        std::vector<int64_t> shapefillcolors;
        std::vector<int32_t> tracklinewidths;
        std::vector<int64_t> tracklinecolors;
        std::vector<int32_t> trackmarkersizes;
        std::vector<int64_t> trackmarkercolors;
        std::vector<std::string> trackmarkershapes;
        std::vector<int64_t> trackheadcolors;
        std::vector<int32_t> trackheadsizes;
        std::vector<std::string> trackheadshapes;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::VisualizeImageClassbreakRequest>
    {
        static void encode(Encoder& e, const gpudb::VisualizeImageClassbreakRequest& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.worldTableNames);
            ::avro::encode(e, v.xColumnName);
            ::avro::encode(e, v.yColumnName);
            ::avro::encode(e, v.trackIds);
            ::avro::encode(e, v.cbColumnName1);
            ::avro::encode(e, v.cbVals1);
            ::avro::encode(e, v.cbColumnName2);
            ::avro::encode(e, v.cbVals2);
            ::avro::encode(e, v.minX);
            ::avro::encode(e, v.maxX);
            ::avro::encode(e, v.minY);
            ::avro::encode(e, v.maxY);
            ::avro::encode(e, v.width);
            ::avro::encode(e, v.height);
            ::avro::encode(e, v.projection);
            ::avro::encode(e, v.bgColor);
            ::avro::encode(e, v.doPoints);
            ::avro::encode(e, v.doShapes);
            ::avro::encode(e, v.doTracks);
            ::avro::encode(e, v.doSymbology);
            ::avro::encode(e, v.pointcolors);
            ::avro::encode(e, v.pointsizes);
            ::avro::encode(e, v.pointshapes);
            ::avro::encode(e, v.shapelinewidths);
            ::avro::encode(e, v.shapelinecolors);
            ::avro::encode(e, v.shapefillcolors);
            ::avro::encode(e, v.tracklinewidths);
            ::avro::encode(e, v.tracklinecolors);
            ::avro::encode(e, v.trackmarkersizes);
            ::avro::encode(e, v.trackmarkercolors);
            ::avro::encode(e, v.trackmarkershapes);
            ::avro::encode(e, v.trackheadcolors);
            ::avro::encode(e, v.trackheadsizes);
            ::avro::encode(e, v.trackheadshapes);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::VisualizeImageClassbreakRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.worldTableNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.xColumnName);
                            break;

                        case 3:
                            ::avro::decode(d, v.yColumnName);
                            break;

                        case 4:
                            ::avro::decode(d, v.trackIds);
                            break;

                        case 5:
                            ::avro::decode(d, v.cbColumnName1);
                            break;

                        case 6:
                            ::avro::decode(d, v.cbVals1);
                            break;

                        case 7:
                            ::avro::decode(d, v.cbColumnName2);
                            break;

                        case 8:
                            ::avro::decode(d, v.cbVals2);
                            break;

                        case 9:
                            ::avro::decode(d, v.minX);
                            break;

                        case 10:
                            ::avro::decode(d, v.maxX);
                            break;

                        case 11:
                            ::avro::decode(d, v.minY);
                            break;

                        case 12:
                            ::avro::decode(d, v.maxY);
                            break;

                        case 13:
                            ::avro::decode(d, v.width);
                            break;

                        case 14:
                            ::avro::decode(d, v.height);
                            break;

                        case 15:
                            ::avro::decode(d, v.projection);
                            break;

                        case 16:
                            ::avro::decode(d, v.bgColor);
                            break;

                        case 17:
                            ::avro::decode(d, v.doPoints);
                            break;

                        case 18:
                            ::avro::decode(d, v.doShapes);
                            break;

                        case 19:
                            ::avro::decode(d, v.doTracks);
                            break;

                        case 20:
                            ::avro::decode(d, v.doSymbology);
                            break;

                        case 21:
                            ::avro::decode(d, v.pointcolors);
                            break;

                        case 22:
                            ::avro::decode(d, v.pointsizes);
                            break;

                        case 23:
                            ::avro::decode(d, v.pointshapes);
                            break;

                        case 24:
                            ::avro::decode(d, v.shapelinewidths);
                            break;

                        case 25:
                            ::avro::decode(d, v.shapelinecolors);
                            break;

                        case 26:
                            ::avro::decode(d, v.shapefillcolors);
                            break;

                        case 27:
                            ::avro::decode(d, v.tracklinewidths);
                            break;

                        case 28:
                            ::avro::decode(d, v.tracklinecolors);
                            break;

                        case 29:
                            ::avro::decode(d, v.trackmarkersizes);
                            break;

                        case 30:
                            ::avro::decode(d, v.trackmarkercolors);
                            break;

                        case 31:
                            ::avro::decode(d, v.trackmarkershapes);
                            break;

                        case 32:
                            ::avro::decode(d, v.trackheadcolors);
                            break;

                        case 33:
                            ::avro::decode(d, v.trackheadsizes);
                            break;

                        case 34:
                            ::avro::decode(d, v.trackheadshapes);
                            break;

                        case 35:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.worldTableNames);
                ::avro::decode(d, v.xColumnName);
                ::avro::decode(d, v.yColumnName);
                ::avro::decode(d, v.trackIds);
                ::avro::decode(d, v.cbColumnName1);
                ::avro::decode(d, v.cbVals1);
                ::avro::decode(d, v.cbColumnName2);
                ::avro::decode(d, v.cbVals2);
                ::avro::decode(d, v.minX);
                ::avro::decode(d, v.maxX);
                ::avro::decode(d, v.minY);
                ::avro::decode(d, v.maxY);
                ::avro::decode(d, v.width);
                ::avro::decode(d, v.height);
                ::avro::decode(d, v.projection);
                ::avro::decode(d, v.bgColor);
                ::avro::decode(d, v.doPoints);
                ::avro::decode(d, v.doShapes);
                ::avro::decode(d, v.doTracks);
                ::avro::decode(d, v.doSymbology);
                ::avro::decode(d, v.pointcolors);
                ::avro::decode(d, v.pointsizes);
                ::avro::decode(d, v.pointshapes);
                ::avro::decode(d, v.shapelinewidths);
                ::avro::decode(d, v.shapelinecolors);
                ::avro::decode(d, v.shapefillcolors);
                ::avro::decode(d, v.tracklinewidths);
                ::avro::decode(d, v.tracklinecolors);
                ::avro::decode(d, v.trackmarkersizes);
                ::avro::decode(d, v.trackmarkercolors);
                ::avro::decode(d, v.trackmarkershapes);
                ::avro::decode(d, v.trackheadcolors);
                ::avro::decode(d, v.trackheadsizes);
                ::avro::decode(d, v.trackheadshapes);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #visualizeImageClassbreak(VisualizeImageClassbreakRequest&)}.
     * <p>
     * Generates 'class break' rasterized image tiles for an area of interest
     * using the given tables and the provided parameters.
     * <p>
     * A class break rendering is where data from one or more GPUdb tables is
     * rasterized with styling applied on a per-class basis. GPUdb supports
     * class breaks based on one or more data columns. Distinct values (for
     * strings) or ranges (for numeric attributes) must be provided in the
     * cb_column_name1/cb_vals1 and cb_column_name2/cb_vals2 parameters. The
     * styling parameters must be specified for each class.
     * <p>
     * All color values must be in the format RRGGBB or AARRGGBB (to specify
     * the alpha value).
     * <p>

     * The image is contained in the @a imageData field.
     */
    struct VisualizeImageClassbreakResponse
    {

        /**
         * Constructs a VisualizeImageClassbreakResponse object with default
         * parameter values.
         */
        VisualizeImageClassbreakResponse() :
            width(double()),
            height(double()),
            bgColor(int64_t()),
            imageData(std::vector<uint8_t>())
        {
        }

        double width;
        double height;
        int64_t bgColor;
        std::vector<uint8_t> imageData;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::VisualizeImageClassbreakResponse>
    {
        static void encode(Encoder& e, const gpudb::VisualizeImageClassbreakResponse& v)
        {
            ::avro::encode(e, v.width);
            ::avro::encode(e, v.height);
            ::avro::encode(e, v.bgColor);
            ::avro::encode(e, v.imageData);
        }

        static void decode(Decoder& d, gpudb::VisualizeImageClassbreakResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.width);
                            break;

                        case 1:
                            ::avro::decode(d, v.height);
                            break;

                        case 2:
                            ::avro::decode(d, v.bgColor);
                            break;

                        case 3:
                            ::avro::decode(d, v.imageData);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.width);
                ::avro::decode(d, v.height);
                ::avro::decode(d, v.bgColor);
                ::avro::decode(d, v.imageData);
            }
        }
    };
}

#endif
