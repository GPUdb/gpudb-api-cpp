/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __AGGREGATE_GROUP_BY_H__
#define __AGGREGATE_GROUP_BY_H__

#include "../DynamicTableRecord.hpp"

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #aggregateGroupByRaw(AggregateGroupByRequest&)}.
     * <p>
     * Calculates unique combinations (i.e. groups) of values for the given
     * columns in a given table/view/collection and computes aggregates on each
     * unique combination. This is somewhat analogous to an SQL-style
     * SELECT...GROUP BY. Any column(s) can be grouped on, but only non-string
     * (i.e. numeric) columns may be used for computing aggregates.
     * <p>
     * The results can be paged via the @a offset and @a limit parameters. For
     * example, to get 10 groups with the largest counts the inputs would be:
     * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
     * <p>
     * @a options can be used to customize behavior of this call e.g. filtering
     * or sorting the results.
     * <p>
     * To group by 'x' and 'y' and compute the number of objects within each
     * group, use column_names=['x','y','count(*)'].  To also compute the sum
     * of 'z' over each group, use column_names=['x','y','count(*)','sum(z)'].
     * <p>
     * Available aggregation functions are: 'count(*)', 'sum', 'min', 'max',
     * 'avg', 'mean', 'stddev', 'stddev_pop', 'stddev_samp', 'var', 'var_pop'
     * and 'var_samp'.
     * <p>
     * The response is returned as a dynamic schema. For details see: {dynamic
     * schemas documentation}@{link ../../concepts/index.html#dynamic-schemas}.
     */
    struct AggregateGroupByRequest
    {

        /**
         * Constructs an AggregateGroupByRequest object with default parameter
         * values.
         */
        AggregateGroupByRequest() :
            tableName(std::string()),
            columnNames(std::vector<std::string>()),
            offset(int64_t()),
            limit(int64_t()),
            encoding(std::string("binary")),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AggregateGroupByRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName  Name of the table on which the operation will
         *                       be performed. Must be a valid
         *                       table/view/collection in GPUdb.
         * @param[in] columnNames  List of two or more column names,
         *                         expressions, and aggregate expressions. Must
         *                         include at least one 'grouping' column or
         *                         expression and at least one aggregate
         * @param[in] offset  An positive integer indicating the number of
         *                    initial results to skip (this can be useful for
         *                    paging through the results).  The minimum allowed
         *                    value is 0. The maximum allowed value is MAX_INT.
         * @param[in] limit  A positive integer indicating the maximum number
         *                   of results to be returned (default is 10000) Or
         *                   END_OF_SET (-9999) to indicate that the max number
         *                   of results should be returned.  Default value is
         *                   1000.
         * @param[in] options  Optional parameters.  Default value is an empty
         *                     {@link std::map}.
         * 
         */
        AggregateGroupByRequest(const std::string& tableName, const std::vector<std::string>& columnNames, const int64_t offset, const int64_t limit, const std::map<std::string, std::string>& options):
            tableName(tableName),
            columnNames(columnNames),
            offset(offset),
            limit(limit),
            encoding("binary"),
            options(options)
        {
        }

        /**
         * Constructs an AggregateGroupByRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName  Name of the table on which the operation will
         *                       be performed. Must be a valid
         *                       table/view/collection in GPUdb.
         * @param[in] columnNames  List of two or more column names,
         *                         expressions, and aggregate expressions. Must
         *                         include at least one 'grouping' column or
         *                         expression and at least one aggregate
         * @param[in] offset  An positive integer indicating the number of
         *                    initial results to skip (this can be useful for
         *                    paging through the results).  The minimum allowed
         *                    value is 0. The maximum allowed value is MAX_INT.
         * @param[in] limit  A positive integer indicating the maximum number
         *                   of results to be returned (default is 10000) Or
         *                   END_OF_SET (-9999) to indicate that the max number
         *                   of results should be returned.  Default value is
         *                   1000.
         * @param[in] encoding  Specifies the encoding for returned objects.
         *                      Default value is 'binary'. The allowed values
         *                      are:  ~!~ * BINARY * JSON~!~
         * @param[in] options  Optional parameters.  Default value is an empty
         *                     {@link std::map}.
         * 
         */
        AggregateGroupByRequest(const std::string& tableName, const std::vector<std::string>& columnNames, const int64_t offset, const int64_t limit, const std::string& encoding, const std::map<std::string, std::string>& options):
            tableName(tableName),
            columnNames(columnNames),
            offset(offset),
            limit(limit),
            encoding(encoding),
            options(options)
        {
        }

        std::string tableName;
        std::vector<std::string> columnNames;
        int64_t offset;
        int64_t limit;
        std::string encoding;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AggregateGroupByRequest>
    {
        static void encode(Encoder& e, const gpudb::AggregateGroupByRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.columnNames);
            ::avro::encode(e, v.offset);
            ::avro::encode(e, v.limit);
            ::avro::encode(e, v.encoding);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AggregateGroupByRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.columnNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.offset);
                            break;

                        case 3:
                            ::avro::decode(d, v.limit);
                            break;

                        case 4:
                            ::avro::decode(d, v.encoding);
                            break;

                        case 5:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.columnNames);
                ::avro::decode(d, v.offset);
                ::avro::decode(d, v.limit);
                ::avro::decode(d, v.encoding);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #aggregateGroupByRaw(AggregateGroupByRequest&)}.
     * <p>
     * Calculates unique combinations (i.e. groups) of values for the given
     * columns in a given table/view/collection and computes aggregates on each
     * unique combination. This is somewhat analogous to an SQL-style
     * SELECT...GROUP BY. Any column(s) can be grouped on, but only non-string
     * (i.e. numeric) columns may be used for computing aggregates.
     * <p>
     * The results can be paged via the @a offset and @a limit parameters. For
     * example, to get 10 groups with the largest counts the inputs would be:
     * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
     * <p>
     * @a options can be used to customize behavior of this call e.g. filtering
     * or sorting the results.
     * <p>
     * To group by 'x' and 'y' and compute the number of objects within each
     * group, use column_names=['x','y','count(*)'].  To also compute the sum
     * of 'z' over each group, use column_names=['x','y','count(*)','sum(z)'].
     * <p>
     * Available aggregation functions are: 'count(*)', 'sum', 'min', 'max',
     * 'avg', 'mean', 'stddev', 'stddev_pop', 'stddev_samp', 'var', 'var_pop'
     * and 'var_samp'.
     * <p>
     * The response is returned as a dynamic schema. For details see: {dynamic
     * schemas documentation}@{link ../../concepts/index.html#dynamic-schemas}.
     */
    struct RawAggregateGroupByResponse
    {

        /**
         * Constructs a RawAggregateGroupByResponse object with default
         * parameter values.
         */
        RawAggregateGroupByResponse() :
            responseSchemaStr(std::string()),
            binaryEncodedResponse(std::vector<uint8_t>()),
            jsonEncodedResponse(std::string())
        {
        }

        std::string responseSchemaStr;
        std::vector<uint8_t> binaryEncodedResponse;
        std::string jsonEncodedResponse;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::RawAggregateGroupByResponse>
    {
        static void encode(Encoder& e, const gpudb::RawAggregateGroupByResponse& v)
        {
            ::avro::encode(e, v.responseSchemaStr);
            ::avro::encode(e, v.binaryEncodedResponse);
            ::avro::encode(e, v.jsonEncodedResponse);
        }

        static void decode(Decoder& d, gpudb::RawAggregateGroupByResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.responseSchemaStr);
                            break;

                        case 1:
                            ::avro::decode(d, v.binaryEncodedResponse);
                            break;

                        case 2:
                            ::avro::decode(d, v.jsonEncodedResponse);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.responseSchemaStr);
                ::avro::decode(d, v.binaryEncodedResponse);
                ::avro::decode(d, v.jsonEncodedResponse);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #aggregateGroupBy(AggregateGroupByRequest&)}.
     * <p>
     * Calculates unique combinations (i.e. groups) of values for the given
     * columns in a given table/view/collection and computes aggregates on each
     * unique combination. This is somewhat analogous to an SQL-style
     * SELECT...GROUP BY. Any column(s) can be grouped on, but only non-string
     * (i.e. numeric) columns may be used for computing aggregates.
     * <p>
     * The results can be paged via the @a offset and @a limit parameters. For
     * example, to get 10 groups with the largest counts the inputs would be:
     * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
     * <p>
     * @a options can be used to customize behavior of this call e.g. filtering
     * or sorting the results.
     * <p>
     * To group by 'x' and 'y' and compute the number of objects within each
     * group, use column_names=['x','y','count(*)'].  To also compute the sum
     * of 'z' over each group, use column_names=['x','y','count(*)','sum(z)'].
     * <p>
     * Available aggregation functions are: 'count(*)', 'sum', 'min', 'max',
     * 'avg', 'mean', 'stddev', 'stddev_pop', 'stddev_samp', 'var', 'var_pop'
     * and 'var_samp'.
     * <p>
     * The response is returned as a dynamic schema. For details see: {dynamic
     * schemas documentation}@{link ../../concepts/index.html#dynamic-schemas}.
     */
    struct AggregateGroupByResponse
    {

        /**
         * Constructs an AggregateGroupByResponse object with default parameter
         * values.
         */
        AggregateGroupByResponse() :
            responseSchemaStr(std::string()),
            data(std::vector<gpudb::DynamicTableRecord>())
        {
        }

        std::string responseSchemaStr;
        std::vector<gpudb::DynamicTableRecord> data;
    };
}

#endif
