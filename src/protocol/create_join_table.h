/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_JOIN_TABLE_H__
#define __CREATE_JOIN_TABLE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #createJoinTable(CreateJoinTableRequest&)}.
     * <p>
     * Creates a joint_table which is a list of tables and aliases for those
     * tables.
     */
    struct CreateJoinTableRequest
    {

        /**
         * Constructs a CreateJoinTableRequest object with default parameter
         * values.
         */
        CreateJoinTableRequest() :
            joinTableName(std::string()),
            tableNames(std::vector<std::string>()),
            aliases(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateJoinTableRequest object with the specified
         * parameters.
         * 
         * @param[in] joinTableName  Name of the join_table to be created. Must
         *                           not be the name of a currently existing
         *                           GPUdb table or join_table. Cannot be an
         *                           empty string.
         * @param[in] tableNames  The list of table names making up the joined
         *                        set
         * @param[in] aliases  The list of aliases for each of the
         *                     corresponding tables.
         * @param[in] options  Optional parameters.  Default value is an empty
         *                     {@link std::map}.
         * 
         */
        CreateJoinTableRequest(const std::string& joinTableName, const std::vector<std::string>& tableNames, const std::vector<std::string>& aliases, const std::map<std::string, std::string>& options):
            joinTableName(joinTableName),
            tableNames(tableNames),
            aliases(aliases),
            options(options)
        {
        }

        std::string joinTableName;
        std::vector<std::string> tableNames;
        std::vector<std::string> aliases;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateJoinTableRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateJoinTableRequest& v)
        {
            ::avro::encode(e, v.joinTableName);
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.aliases);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateJoinTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.joinTableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.aliases);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.joinTableName);
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.aliases);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #createJoinTable(CreateJoinTableRequest&)}.
     * <p>
     * Creates a joint_table which is a list of tables and aliases for those
     * tables.
     */
    struct CreateJoinTableResponse
    {

        /**
         * Constructs a CreateJoinTableResponse object with default parameter
         * values.
         */
        CreateJoinTableResponse() :
            joinTableName(std::string())
        {
        }

        std::string joinTableName;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateJoinTableResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateJoinTableResponse& v)
        {
            ::avro::encode(e, v.joinTableName);
        }

        static void decode(Decoder& d, gpudb::CreateJoinTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.joinTableName);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.joinTableName);
            }
        }
    };
}

#endif
