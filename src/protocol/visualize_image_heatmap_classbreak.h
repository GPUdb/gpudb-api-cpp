/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __VISUALIZE_IMAGE_HEATMAP_CLASSBREAK_H__
#define __VISUALIZE_IMAGE_HEATMAP_CLASSBREAK_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link #visualizeImageHeatmapClassbreak(Vi
     * sualizeImageHeatmapClassbreakRequest&)}.
     * <p>
     * Generates 'class break' rasterized heatmap image tiles for an area of
     * interest using the given tables and the provided parameters.
     * <p>
     * A class break rendering is where data from one or more GPUdb tables is
     * rasterized with styling applied on a per-class basis. GPUdb supports
     * class breaks based on one or more data columns. Distinct values (for
     * strings) or ranges (for numeric attributes) must be provided in the
     * cb_column_name1/cb_vals1 and cb_column_name2/cb_vals2 parameters. The
     * styling parameters must be specified for each class.
     * <p>
     * All color values must be in the format RRGGBB or AARRGGBB (to specify
     * the alpha value).
     */
    struct VisualizeImageHeatmapClassbreakRequest
    {

        /**
         * Constructs a VisualizeImageHeatmapClassbreakRequest object with
         * default parameter values.
         */
        VisualizeImageHeatmapClassbreakRequest() :
            tableNames(std::vector<std::string>()),
            xColumnName(std::string()),
            yColumnName(std::string()),
            cbColumnName(std::string()),
            cbVals(std::vector<std::string>()),
            cbRanges(std::vector<std::string>()),
            minX(double()),
            maxX(double()),
            minY(double()),
            maxY(double()),
            width(int32_t()),
            height(int32_t()),
            projection(std::string()),
            colormaps(std::vector<std::string>()),
            blurRadii(std::vector<int32_t>()),
            bgColor(int64_t()),
            gradientStartColors(std::vector<int64_t>()),
            gradientEndColors(std::vector<int64_t>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a VisualizeImageHeatmapClassbreakRequest object with the
         * specified parameters.
         * 
         * @param[in] tableNames  Name of the table containing the data for the
         *                        various layers to be rendered.
         * @param[in] xColumnName  Name of the column containing the x
         *                         coordinates.
         * @param[in] yColumnName  Name of the column containing the y
         *                         coordinates.
         * @param[in] cbColumnName  Name of the column for the class break.
         * @param[in] cbVals  Comma separated list of values (e.g.
         *                    '0,5,10,15,30').
         * @param[in] cbRanges  Comma separated list of ranges (e.g.
         *                      '0:5,5:10,15:30').
         * @param[in] minX  Lower bound for the x values.
         * @param[in] maxX  Upper bound for the x values.
         * @param[in] minY  Lower bound for the y values.
         * @param[in] maxY  Upper bound for the y values.
         * @param[in] width  Width of the generated image.
         * @param[in] height  Height of the generated image.
         * @param[in] projection  Spatial Reference System (i.e. EPSG Code).
         *                        Default value is 'PLATE_CARREE'. The allowed
         *                        values are:  ~!~ * EPSG:4326 * PLATE_CARREE *
         *                        _900913 * EPSG:900913 * _102100 * EPSG:102100
         *                        * _3857 * EPSG:3857 * WEB_MERCATOR~!~
         * @param[in] colormaps  Colormap for the heat map.  Default value is
         *                       'none'.
         * @param[in] blurRadii  Blurring radius for the heat map.  Default
         *                       value is '5'. The minimum allowed value is 1.
         *                       The maximum allowed value is 32.
         * @param[in] bgColor  Background color of the generated image.
         * @param[in] gradientStartColors  User defined gradient start color
         *                                 for the heat map.  Default value is
         *                                 'FFFFFF'.
         * @param[in] gradientEndColors  User defined gradient end color for
         *                               the heat map.  Default value is
         *                               'FF0000'.
         * @param[in] options  Optional parameters.  Default value is an empty
         *                     {@link std::map}.
         * 
         */
        VisualizeImageHeatmapClassbreakRequest(const std::vector<std::string>& tableNames, const std::string& xColumnName, const std::string& yColumnName, const std::string& cbColumnName, const std::vector<std::string>& cbVals, const std::vector<std::string>& cbRanges, const double minX, const double maxX, const double minY, const double maxY, const int32_t width, const int32_t height, const std::string& projection, const std::vector<std::string>& colormaps, const std::vector<int32_t>& blurRadii, const int64_t bgColor, const std::vector<int64_t>& gradientStartColors, const std::vector<int64_t>& gradientEndColors, const std::map<std::string, std::string>& options):
            tableNames(tableNames),
            xColumnName(xColumnName),
            yColumnName(yColumnName),
            cbColumnName(cbColumnName),
            cbVals(cbVals),
            cbRanges(cbRanges),
            minX(minX),
            maxX(maxX),
            minY(minY),
            maxY(maxY),
            width(width),
            height(height),
            projection(projection),
            colormaps(colormaps),
            blurRadii(blurRadii),
            bgColor(bgColor),
            gradientStartColors(gradientStartColors),
            gradientEndColors(gradientEndColors),
            options(options)
        {
        }

        std::vector<std::string> tableNames;
        std::string xColumnName;
        std::string yColumnName;
        std::string cbColumnName;
        std::vector<std::string> cbVals;
        std::vector<std::string> cbRanges;
        double minX;
        double maxX;
        double minY;
        double maxY;
        int32_t width;
        int32_t height;
        std::string projection;
        std::vector<std::string> colormaps;
        std::vector<int32_t> blurRadii;
        int64_t bgColor;
        std::vector<int64_t> gradientStartColors;
        std::vector<int64_t> gradientEndColors;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::VisualizeImageHeatmapClassbreakRequest>
    {
        static void encode(Encoder& e, const gpudb::VisualizeImageHeatmapClassbreakRequest& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.xColumnName);
            ::avro::encode(e, v.yColumnName);
            ::avro::encode(e, v.cbColumnName);
            ::avro::encode(e, v.cbVals);
            ::avro::encode(e, v.cbRanges);
            ::avro::encode(e, v.minX);
            ::avro::encode(e, v.maxX);
            ::avro::encode(e, v.minY);
            ::avro::encode(e, v.maxY);
            ::avro::encode(e, v.width);
            ::avro::encode(e, v.height);
            ::avro::encode(e, v.projection);
            ::avro::encode(e, v.colormaps);
            ::avro::encode(e, v.blurRadii);
            ::avro::encode(e, v.bgColor);
            ::avro::encode(e, v.gradientStartColors);
            ::avro::encode(e, v.gradientEndColors);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::VisualizeImageHeatmapClassbreakRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.xColumnName);
                            break;

                        case 2:
                            ::avro::decode(d, v.yColumnName);
                            break;

                        case 3:
                            ::avro::decode(d, v.cbColumnName);
                            break;

                        case 4:
                            ::avro::decode(d, v.cbVals);
                            break;

                        case 5:
                            ::avro::decode(d, v.cbRanges);
                            break;

                        case 6:
                            ::avro::decode(d, v.minX);
                            break;

                        case 7:
                            ::avro::decode(d, v.maxX);
                            break;

                        case 8:
                            ::avro::decode(d, v.minY);
                            break;

                        case 9:
                            ::avro::decode(d, v.maxY);
                            break;

                        case 10:
                            ::avro::decode(d, v.width);
                            break;

                        case 11:
                            ::avro::decode(d, v.height);
                            break;

                        case 12:
                            ::avro::decode(d, v.projection);
                            break;

                        case 13:
                            ::avro::decode(d, v.colormaps);
                            break;

                        case 14:
                            ::avro::decode(d, v.blurRadii);
                            break;

                        case 15:
                            ::avro::decode(d, v.bgColor);
                            break;

                        case 16:
                            ::avro::decode(d, v.gradientStartColors);
                            break;

                        case 17:
                            ::avro::decode(d, v.gradientEndColors);
                            break;

                        case 18:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.xColumnName);
                ::avro::decode(d, v.yColumnName);
                ::avro::decode(d, v.cbColumnName);
                ::avro::decode(d, v.cbVals);
                ::avro::decode(d, v.cbRanges);
                ::avro::decode(d, v.minX);
                ::avro::decode(d, v.maxX);
                ::avro::decode(d, v.minY);
                ::avro::decode(d, v.maxY);
                ::avro::decode(d, v.width);
                ::avro::decode(d, v.height);
                ::avro::decode(d, v.projection);
                ::avro::decode(d, v.colormaps);
                ::avro::decode(d, v.blurRadii);
                ::avro::decode(d, v.bgColor);
                ::avro::decode(d, v.gradientStartColors);
                ::avro::decode(d, v.gradientEndColors);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link #visualizeImageHeatmapClassbreak(V
     * isualizeImageHeatmapClassbreakRequest&)}.
     * <p>
     * Generates 'class break' rasterized heatmap image tiles for an area of
     * interest using the given tables and the provided parameters.
     * <p>
     * A class break rendering is where data from one or more GPUdb tables is
     * rasterized with styling applied on a per-class basis. GPUdb supports
     * class breaks based on one or more data columns. Distinct values (for
     * strings) or ranges (for numeric attributes) must be provided in the
     * cb_column_name1/cb_vals1 and cb_column_name2/cb_vals2 parameters. The
     * styling parameters must be specified for each class.
     * <p>
     * All color values must be in the format RRGGBB or AARRGGBB (to specify
     * the alpha value).
     */
    struct VisualizeImageHeatmapClassbreakResponse
    {

        /**
         * Constructs a VisualizeImageHeatmapClassbreakResponse object with
         * default parameter values.
         */
        VisualizeImageHeatmapClassbreakResponse() :
            width(int32_t()),
            height(int32_t()),
            bgColor(int64_t()),
            imageData(std::vector<uint8_t>())
        {
        }

        int32_t width;
        int32_t height;
        int64_t bgColor;
        std::vector<uint8_t> imageData;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::VisualizeImageHeatmapClassbreakResponse>
    {
        static void encode(Encoder& e, const gpudb::VisualizeImageHeatmapClassbreakResponse& v)
        {
            ::avro::encode(e, v.width);
            ::avro::encode(e, v.height);
            ::avro::encode(e, v.bgColor);
            ::avro::encode(e, v.imageData);
        }

        static void decode(Decoder& d, gpudb::VisualizeImageHeatmapClassbreakResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.width);
                            break;

                        case 1:
                            ::avro::decode(d, v.height);
                            break;

                        case 2:
                            ::avro::decode(d, v.bgColor);
                            break;

                        case 3:
                            ::avro::decode(d, v.imageData);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.width);
                ::avro::decode(d, v.height);
                ::avro::decode(d, v.bgColor);
                ::avro::decode(d, v.imageData);
            }
        }
    };
}

#endif
