/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_SET_SHARD_ASSIGNMENTS_H__
#define __ADMIN_SET_SHARD_ASSIGNMENTS_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #adminSetShardAssignments(const AdminSetShardAssignmentsRequest&) const}.
     * <p>
     */
    struct AdminSetShardAssignmentsRequest
    {

        /**
         * Constructs an AdminSetShardAssignmentsRequest object with default
         * parameter values.
         */
        AdminSetShardAssignmentsRequest() :
            version(int64_t()),
            partialReassignment(bool()),
            shardAssignmentsRank(std::vector<int32_t>()),
            shardAssignmentsTom(std::vector<int32_t>()),
            assignmentIndex(std::vector<int32_t>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminSetShardAssignmentsRequest object with the
         * specified parameters.
         * 
         * @param[in] version
         * @param[in] partialReassignment
         * @param[in] shardAssignmentsRank
         * @param[in] shardAssignmentsTom
         * @param[in] assignmentIndex
         * @param[in] options  Optional parameters.  Default value is an empty
         *                     std::map.
         * 
         */
        AdminSetShardAssignmentsRequest(const int64_t version, const bool partialReassignment, const std::vector<int32_t>& shardAssignmentsRank, const std::vector<int32_t>& shardAssignmentsTom, const std::vector<int32_t>& assignmentIndex, const std::map<std::string, std::string>& options):
            version(version),
            partialReassignment(partialReassignment),
            shardAssignmentsRank(shardAssignmentsRank),
            shardAssignmentsTom(shardAssignmentsTom),
            assignmentIndex(assignmentIndex),
            options(options)
        {
        }

        int64_t version;
        bool partialReassignment;
        std::vector<int32_t> shardAssignmentsRank;
        std::vector<int32_t> shardAssignmentsTom;
        std::vector<int32_t> assignmentIndex;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminSetShardAssignmentsRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminSetShardAssignmentsRequest& v)
        {
            ::avro::encode(e, v.version);
            ::avro::encode(e, v.partialReassignment);
            ::avro::encode(e, v.shardAssignmentsRank);
            ::avro::encode(e, v.shardAssignmentsTom);
            ::avro::encode(e, v.assignmentIndex);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminSetShardAssignmentsRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.version);
                            break;

                        case 1:
                            ::avro::decode(d, v.partialReassignment);
                            break;

                        case 2:
                            ::avro::decode(d, v.shardAssignmentsRank);
                            break;

                        case 3:
                            ::avro::decode(d, v.shardAssignmentsTom);
                            break;

                        case 4:
                            ::avro::decode(d, v.assignmentIndex);
                            break;

                        case 5:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.version);
                ::avro::decode(d, v.partialReassignment);
                ::avro::decode(d, v.shardAssignmentsRank);
                ::avro::decode(d, v.shardAssignmentsTom);
                ::avro::decode(d, v.assignmentIndex);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #adminSetShardAssignments(const AdminSetShardAssignmentsRequest&) const}.
     * <p>
     */
    struct AdminSetShardAssignmentsResponse
    {

        /**
         * Constructs an AdminSetShardAssignmentsResponse object with default
         * parameter values.
         */
        AdminSetShardAssignmentsResponse() :
            version(int64_t())
        {
        }

        int64_t version;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminSetShardAssignmentsResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminSetShardAssignmentsResponse& v)
        {
            ::avro::encode(e, v.version);
        }

        static void decode(Decoder& d, gpudb::AdminSetShardAssignmentsResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.version);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.version);
            }
        }
    };
}

#endif
