/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __VISUALIZE_ISOCHRONE_H__
#define __VISUALIZE_ISOCHRONE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #visualizeIsochrone(const VisualizeIsochroneRequest&) const}.
     * <p>
     * @private
     */
    struct VisualizeIsochroneRequest
    {

        /**
         * @private
         * Constructs a VisualizeIsochroneRequest object with default parameter
         * values.
         */
        VisualizeIsochroneRequest() :
            graphName(std::string()),
            weightsOnEdges(std::vector<std::string>()),
            sourceNode(std::string()),
            restrictions(std::vector<std::string>()),
            maxSolutionRadius(double()),
            numLevels(int32_t()),
            generateImage(bool()),
            projection(std::string()),
            imageWidth(int32_t()),
            imageHeight(int32_t()),
            styleOptions(std::map<std::string, std::string>()),
            solveOptions(std::map<std::string, std::string>()),
            contourOptions(std::map<std::string, std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * @private
         * Constructs a VisualizeIsochroneRequest object with the specified
         * parameters.
         * 
         * @param[in] graphName_
         * @param[in] weightsOnEdges_
         * @param[in] sourceNode_
         * @param[in] restrictions_
         * @param[in] maxSolutionRadius_
         * @param[in] numLevels_
         * @param[in] generateImage_
         * @param[in] projection_
         *                         <ul>
         *                                 <li> gpudb::visualize_isochrone_3857
         *                                 <li>
         *                         gpudb::visualize_isochrone_102100
         *                                 <li>
         *                         gpudb::visualize_isochrone_900913
         *                                 <li>
         *                         gpudb::visualize_isochrone_EPSG_4326
         *                                 <li>
         *                         gpudb::visualize_isochrone_PLATE_CARREE
         *                                 <li>
         *                         gpudb::visualize_isochrone_EPSG_900913
         *                                 <li>
         *                         gpudb::visualize_isochrone_EPSG_102100
         *                                 <li>
         *                         gpudb::visualize_isochrone_EPSG_3857
         *                                 <li>
         *                         gpudb::visualize_isochrone_WEB_MERCATOR
         *                         </ul>
         *                         The default value is
         *                         gpudb::visualize_isochrone_PLATE_CARREE.
         * @param[in] imageWidth_
         * @param[in] imageHeight_
         * @param[in] styleOptions_
         *                           <ul>
         *                                   <li>
         *                           gpudb::visualize_isochrone_line_size:
         *                           The default value is '3'.
         *                                   <li>
         *                           gpudb::visualize_isochrone_color:   The
         *                           default value is 'FF696969'.
         *                                   <li>
         *                           gpudb::visualize_isochrone_bg_color:   The
         *                           default value is '00000000'.
         *                                   <li>
         *                           gpudb::visualize_isochrone_text_color:
         *                           The default value is 'FF000000'.
         *                                   <li>
         *                           gpudb::visualize_isochrone_colormap:
         *                           <ul>
         *                                   <li>
         *                           gpudb::visualize_isochrone_jet
         *                                   <li>
         *                           gpudb::visualize_isochrone_accent
         *                                   <li>
         *                           gpudb::visualize_isochrone_afmhot
         *                                   <li>
         *                           gpudb::visualize_isochrone_autumn
         *                                   <li>
         *                           gpudb::visualize_isochrone_binary
         *                                   <li>
         *                           gpudb::visualize_isochrone_blues
         *                                   <li>
         *                           gpudb::visualize_isochrone_bone
         *                                   <li>
         *                           gpudb::visualize_isochrone_brbg
         *                                   <li>
         *                           gpudb::visualize_isochrone_brg
         *                                   <li>
         *                           gpudb::visualize_isochrone_bugn
         *                                   <li>
         *                           gpudb::visualize_isochrone_bupu
         *                                   <li>
         *                           gpudb::visualize_isochrone_bwr
         *                                   <li>
         *                           gpudb::visualize_isochrone_cmrmap
         *                                   <li>
         *                           gpudb::visualize_isochrone_cool
         *                                   <li>
         *                           gpudb::visualize_isochrone_coolwarm
         *                                   <li>
         *                           gpudb::visualize_isochrone_copper
         *                                   <li>
         *                           gpudb::visualize_isochrone_cubehelix
         *                                   <li>
         *                           gpudb::visualize_isochrone_dark2
         *                                   <li>
         *                           gpudb::visualize_isochrone_flag
         *                                   <li>
         *                           gpudb::visualize_isochrone_gist_earth
         *                                   <li>
         *                           gpudb::visualize_isochrone_gist_gray
         *                                   <li>
         *                           gpudb::visualize_isochrone_gist_heat
         *                                   <li>
         *                           gpudb::visualize_isochrone_gist_ncar
         *                                   <li>
         *                           gpudb::visualize_isochrone_gist_rainbow
         *                                   <li>
         *                           gpudb::visualize_isochrone_gist_stern
         *                                   <li>
         *                           gpudb::visualize_isochrone_gist_yarg
         *                                   <li>
         *                           gpudb::visualize_isochrone_gnbu
         *                                   <li>
         *                           gpudb::visualize_isochrone_gnuplot2
         *                                   <li>
         *                           gpudb::visualize_isochrone_gnuplot
         *                                   <li>
         *                           gpudb::visualize_isochrone_gray
         *                                   <li>
         *                           gpudb::visualize_isochrone_greens
         *                                   <li>
         *                           gpudb::visualize_isochrone_greys
         *                                   <li>
         *                           gpudb::visualize_isochrone_hot
         *                                   <li>
         *                           gpudb::visualize_isochrone_hsv
         *                                   <li>
         *                           gpudb::visualize_isochrone_inferno
         *                                   <li>
         *                           gpudb::visualize_isochrone_magma
         *                                   <li>
         *                           gpudb::visualize_isochrone_nipy_spectral
         *                                   <li>
         *                           gpudb::visualize_isochrone_ocean
         *                                   <li>
         *                           gpudb::visualize_isochrone_oranges
         *                                   <li>
         *                           gpudb::visualize_isochrone_orrd
         *                                   <li>
         *                           gpudb::visualize_isochrone_paired
         *                                   <li>
         *                           gpudb::visualize_isochrone_pastel1
         *                                   <li>
         *                           gpudb::visualize_isochrone_pastel2
         *                                   <li>
         *                           gpudb::visualize_isochrone_pink
         *                                   <li>
         *                           gpudb::visualize_isochrone_piyg
         *                                   <li>
         *                           gpudb::visualize_isochrone_plasma
         *                                   <li>
         *                           gpudb::visualize_isochrone_prgn
         *                                   <li>
         *                           gpudb::visualize_isochrone_prism
         *                                   <li>
         *                           gpudb::visualize_isochrone_pubu
         *                                   <li>
         *                           gpudb::visualize_isochrone_pubugn
         *                                   <li>
         *                           gpudb::visualize_isochrone_puor
         *                                   <li>
         *                           gpudb::visualize_isochrone_purd
         *                                   <li>
         *                           gpudb::visualize_isochrone_purples
         *                                   <li>
         *                           gpudb::visualize_isochrone_rainbow
         *                                   <li>
         *                           gpudb::visualize_isochrone_rdbu
         *                                   <li>
         *                           gpudb::visualize_isochrone_rdgy
         *                                   <li>
         *                           gpudb::visualize_isochrone_rdpu
         *                                   <li>
         *                           gpudb::visualize_isochrone_rdylbu
         *                                   <li>
         *                           gpudb::visualize_isochrone_rdylgn
         *                                   <li>
         *                           gpudb::visualize_isochrone_reds
         *                                   <li>
         *                           gpudb::visualize_isochrone_seismic
         *                                   <li>
         *                           gpudb::visualize_isochrone_set1
         *                                   <li>
         *                           gpudb::visualize_isochrone_set2
         *                                   <li>
         *                           gpudb::visualize_isochrone_set3
         *                                   <li>
         *                           gpudb::visualize_isochrone_spectral
         *                                   <li>
         *                           gpudb::visualize_isochrone_spring
         *                                   <li>
         *                           gpudb::visualize_isochrone_summer
         *                                   <li>
         *                           gpudb::visualize_isochrone_terrain
         *                                   <li>
         *                           gpudb::visualize_isochrone_viridis
         *                                   <li>
         *                           gpudb::visualize_isochrone_winter
         *                                   <li>
         *                           gpudb::visualize_isochrone_wistia
         *                                   <li>
         *                           gpudb::visualize_isochrone_ylgn
         *                                   <li>
         *                           gpudb::visualize_isochrone_ylgnbu
         *                                   <li>
         *                           gpudb::visualize_isochrone_ylorbr
         *                                   <li>
         *                           gpudb::visualize_isochrone_ylorrd
         *                           </ul>
         *                           The default value is
         *                           gpudb::visualize_isochrone_jet.
         *                           </ul>
         * @param[in] solveOptions_
         *                           <ul>
         *                                   <li>
         *                           gpudb::visualize_isochrone_remove_previous_restrictions:
         *                           <ul>
         *                                   <li>
         *                           gpudb::visualize_isochrone_true
         *                                   <li>
         *                           gpudb::visualize_isochrone_false
         *                           </ul>
         *                           The default value is
         *                           gpudb::visualize_isochrone_false.
         *                                   <li>
         *                           gpudb::visualize_isochrone_restriction_threshold_value
         *                                   <li>
         *                           gpudb::visualize_isochrone_uniform_weights
         *                           </ul>
         * @param[in] contourOptions_
         *                             <ul>
         *                                     <li>
         *                             gpudb::visualize_isochrone_search_radius:
         *                             The default value is '20'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_grid_size:
         *                             The default value is '100'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_color_isolines:
         *                             The default value is 'true'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_add_labels:
         *                             The default value is 'false'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_labels_font_size:
         *                             The default value is '12'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_labels_font_family:
         *                             The default value is 'arial'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_labels_search_window:
         *                             The default value is '4'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_labels_intralevel_separation:
         *                             The default value is '4'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_labels_interlevel_separation:
         *                             The default value is '20'.
         *                                     <li>
         *                             gpudb::visualize_isochrone_labels_max_angle:
         *                             The default value is '60'.
         *                             </ul>
         * @param[in] options_
         *                      <ul>
         *                              <li>
         *                      gpudb::visualize_isochrone_levels_table:   The
         *                      default value is ''.
         *                              <li>
         *                      gpudb::visualize_isochrone_solve_table:   The
         *                      default value is ''.
         *                              <li>
         *                      gpudb::visualize_isochrone_is_replicated:   The
         *                      default value is 'true'.
         *                              <li>
         *                      gpudb::visualize_isochrone_data_min_x
         *                              <li>
         *                      gpudb::visualize_isochrone_data_max_x
         *                              <li>
         *                      gpudb::visualize_isochrone_data_min_y
         *                              <li>
         *                      gpudb::visualize_isochrone_data_max_y
         *                              <li>
         *                      gpudb::visualize_isochrone_concavity_level:
         *                      The default value is '0'.
         *                              <li>
         *                      gpudb::visualize_isochrone_solve_direction:
         *                      <ul>
         *                              <li>
         *                      gpudb::visualize_isochrone_from_source
         *                              <li>
         *                      gpudb::visualize_isochrone_to_source
         *                      </ul>
         *                      The default value is
         *                      gpudb::visualize_isochrone_from_source.
         *                      </ul>
         * 
         */
        VisualizeIsochroneRequest(const std::string& graphName_, const std::vector<std::string>& weightsOnEdges_, const std::string& sourceNode_, const std::vector<std::string>& restrictions_, const double maxSolutionRadius_, const int32_t numLevels_, const bool generateImage_, const std::string& projection_, const int32_t imageWidth_, const int32_t imageHeight_, const std::map<std::string, std::string>& styleOptions_, const std::map<std::string, std::string>& solveOptions_, const std::map<std::string, std::string>& contourOptions_, const std::map<std::string, std::string>& options_):
            graphName( graphName_ ),
            weightsOnEdges( weightsOnEdges_ ),
            sourceNode( sourceNode_ ),
            restrictions( restrictions_ ),
            maxSolutionRadius( maxSolutionRadius_ ),
            numLevels( numLevels_ ),
            generateImage( generateImage_ ),
            projection( projection_ ),
            imageWidth( imageWidth_ ),
            imageHeight( imageHeight_ ),
            styleOptions( styleOptions_ ),
            solveOptions( solveOptions_ ),
            contourOptions( contourOptions_ ),
            options( options_ )
        {
        }

        std::string graphName;
        std::vector<std::string> weightsOnEdges;
        std::string sourceNode;
        std::vector<std::string> restrictions;
        double maxSolutionRadius;
        int32_t numLevels;
        bool generateImage;
        std::string projection;
        int32_t imageWidth;
        int32_t imageHeight;
        std::map<std::string, std::string> styleOptions;
        std::map<std::string, std::string> solveOptions;
        std::map<std::string, std::string> contourOptions;
        std::map<std::string, std::string> options;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::VisualizeIsochroneRequest>
    {
        static void encode(Encoder& e, const gpudb::VisualizeIsochroneRequest& v)
        {
            ::avro::encode(e, v.graphName);
            ::avro::encode(e, v.weightsOnEdges);
            ::avro::encode(e, v.sourceNode);
            ::avro::encode(e, v.restrictions);
            ::avro::encode(e, v.maxSolutionRadius);
            ::avro::encode(e, v.numLevels);
            ::avro::encode(e, v.generateImage);
            ::avro::encode(e, v.projection);
            ::avro::encode(e, v.imageWidth);
            ::avro::encode(e, v.imageHeight);
            ::avro::encode(e, v.styleOptions);
            ::avro::encode(e, v.solveOptions);
            ::avro::encode(e, v.contourOptions);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::VisualizeIsochroneRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.graphName);
                            break;

                        case 1:
                            ::avro::decode(d, v.weightsOnEdges);
                            break;

                        case 2:
                            ::avro::decode(d, v.sourceNode);
                            break;

                        case 3:
                            ::avro::decode(d, v.restrictions);
                            break;

                        case 4:
                            ::avro::decode(d, v.maxSolutionRadius);
                            break;

                        case 5:
                            ::avro::decode(d, v.numLevels);
                            break;

                        case 6:
                            ::avro::decode(d, v.generateImage);
                            break;

                        case 7:
                            ::avro::decode(d, v.projection);
                            break;

                        case 8:
                            ::avro::decode(d, v.imageWidth);
                            break;

                        case 9:
                            ::avro::decode(d, v.imageHeight);
                            break;

                        case 10:
                            ::avro::decode(d, v.styleOptions);
                            break;

                        case 11:
                            ::avro::decode(d, v.solveOptions);
                            break;

                        case 12:
                            ::avro::decode(d, v.contourOptions);
                            break;

                        case 13:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.graphName);
                ::avro::decode(d, v.weightsOnEdges);
                ::avro::decode(d, v.sourceNode);
                ::avro::decode(d, v.restrictions);
                ::avro::decode(d, v.maxSolutionRadius);
                ::avro::decode(d, v.numLevels);
                ::avro::decode(d, v.generateImage);
                ::avro::decode(d, v.projection);
                ::avro::decode(d, v.imageWidth);
                ::avro::decode(d, v.imageHeight);
                ::avro::decode(d, v.styleOptions);
                ::avro::decode(d, v.solveOptions);
                ::avro::decode(d, v.contourOptions);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #visualizeIsochrone(const VisualizeIsochroneRequest&) const}.
     * <p>
     * @private
     */
    struct VisualizeIsochroneResponse
    {

        /**
         * @private
         * Constructs a VisualizeIsochroneResponse object with default
         * parameter values.
         */
        VisualizeIsochroneResponse() :
            width(int32_t()),
            height(int32_t()),
            bgColor(int64_t()),
            imageData(std::vector<uint8_t>()),
            info(std::map<std::string, std::string>()),
            solveInfo(std::map<std::string, std::string>()),
            contourInfo(std::map<std::string, std::string>())
        {
        }

        int32_t width;
        int32_t height;
        int64_t bgColor;
        std::vector<uint8_t> imageData;
        std::map<std::string, std::string> info;
        std::map<std::string, std::string> solveInfo;
        std::map<std::string, std::string> contourInfo;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::VisualizeIsochroneResponse>
    {
        static void encode(Encoder& e, const gpudb::VisualizeIsochroneResponse& v)
        {
            ::avro::encode(e, v.width);
            ::avro::encode(e, v.height);
            ::avro::encode(e, v.bgColor);
            ::avro::encode(e, v.imageData);
            ::avro::encode(e, v.info);
            ::avro::encode(e, v.solveInfo);
            ::avro::encode(e, v.contourInfo);
        }

        static void decode(Decoder& d, gpudb::VisualizeIsochroneResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.width);
                            break;

                        case 1:
                            ::avro::decode(d, v.height);
                            break;

                        case 2:
                            ::avro::decode(d, v.bgColor);
                            break;

                        case 3:
                            ::avro::decode(d, v.imageData);
                            break;

                        case 4:
                            ::avro::decode(d, v.info);
                            break;

                        case 5:
                            ::avro::decode(d, v.solveInfo);
                            break;

                        case 6:
                            ::avro::decode(d, v.contourInfo);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.width);
                ::avro::decode(d, v.height);
                ::avro::decode(d, v.bgColor);
                ::avro::decode(d, v.imageData);
                ::avro::decode(d, v.info);
                ::avro::decode(d, v.solveInfo);
                ::avro::decode(d, v.contourInfo);
            }
        }
    };
}

#endif
