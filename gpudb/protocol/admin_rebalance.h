/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_REBALANCE_H__
#define __ADMIN_REBALANCE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #adminRebalance(const AdminRebalanceRequest&) const}.
     * <p>
     * Rebalance the cluster so that all the nodes contain approximately equal
     * number of records.  The rebalance will also cause the shards to be (as
     * much as possible) equally distributed across all the ranks. Note that
     * the system may move any shards that were moved by system administrator
     * using {@link
     * #adminAlterShards(const AdminAlterShardsRequest&) const}
     */
    struct AdminRebalanceRequest
    {

        /**
         * Constructs an AdminRebalanceRequest object with default parameter
         * values.
         */
        AdminRebalanceRequest() :
            tableNames(std::vector<std::string>()),
            action(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminRebalanceRequest object with the specified
         * parameters.
         * 
         * @param[in] tableNames_  Specify the tables here if only specific
         *                         tables have to be rebalanced.  Leave this
         *                         empty to rebalance all the tables.  Note
         *                         that only the tables which have no primary
         *                         or shard key can be rebalanced.
         * @param[in] action_  Specify 'start' to start rebalancing the cluster
         *                     or 'stop' to prematurely stop a previsouly
         *                     issued rebalance request.
         *                     <ul>
         *                             <li> gpudb::admin_rebalance_start
         *                             <li> gpudb::admin_rebalance_stop
         *                     </ul>
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> gpudb::admin_rebalance_reshard: If
         *                      @a true, then all the nodes in the cluster will
         *                      be assigned approximately the same number of
         *                      shards. Note that for big clusters, this data
         *                      transfer could be time consuming and also
         *                      result in delay in responding to queries for
         *                      busy clusters.
         *                      <ul>
         *                              <li> gpudb::admin_rebalance_true
         *                              <li> gpudb::admin_rebalance_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::admin_rebalance_true.
         *                      </ul>
         * 
         */
        AdminRebalanceRequest(const std::vector<std::string>& tableNames_, const std::string& action_, const std::map<std::string, std::string>& options_):
            tableNames( tableNames_ ),
            action( action_ ),
            options( options_ )
        {
        }

        std::vector<std::string> tableNames;
        std::string action;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminRebalanceRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminRebalanceRequest& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminRebalanceRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #adminRebalance(const AdminRebalanceRequest&) const}.
     * <p>
     * Rebalance the cluster so that all the nodes contain approximately equal
     * number of records.  The rebalance will also cause the shards to be (as
     * much as possible) equally distributed across all the ranks. Note that
     * the system may move any shards that were moved by system administrator
     * using {@link
     * #adminAlterShards(const AdminAlterShardsRequest&) const}
     */
    struct AdminRebalanceResponse
    {

        /**
         * Constructs an AdminRebalanceResponse object with default parameter
         * values.
         */
        AdminRebalanceResponse() :
            tableNames(std::vector<std::string>()),
            message(std::vector<std::string>())
        {
        }

        std::vector<std::string> tableNames;
        std::vector<std::string> message;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminRebalanceResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminRebalanceResponse& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.message);
        }

        static void decode(Decoder& d, gpudb::AdminRebalanceResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.message);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.message);
            }
        }
    };
}

#endif
