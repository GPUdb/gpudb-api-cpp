/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_REBALANCE_H__
#define __ADMIN_REBALANCE_H__

    /**
     * @private
     */

namespace gpudb
{

    /**
     * @private
     * A set of input parameters for {@link
     * #adminRebalance(const AdminRebalanceRequest&) const}.
     * <p>
     */
    struct AdminRebalanceRequest
    {

        /**
         * @private
         * Constructs an AdminRebalanceRequest object with default parameter
         * values.
         */
        AdminRebalanceRequest() :
            tableNames(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * @private
         * Constructs an AdminRebalanceRequest object with the specified
         * parameters.
         * 
         * @param[in] tableNames
         * @param[in] options
         * 
         */
        AdminRebalanceRequest(const std::vector<std::string>& tableNames, const std::map<std::string, std::string>& options):
            tableNames(tableNames),
            options(options)
        {
        }

    /**
     * @private
     */

        std::vector<std::string> tableNames;
        std::map<std::string, std::string> options;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::AdminRebalanceRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminRebalanceRequest& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminRebalanceRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.options);
            }
        }
    };
}

    /**
     * @private
     */

namespace gpudb
{

    /**
     * @private
     * A set of output parameters for {@link
     * #adminRebalance(const AdminRebalanceRequest&) const}.
     * <p>
     */
    struct AdminRebalanceResponse
    {

        /**
         * @private
         * Constructs an AdminRebalanceResponse object with default parameter
         * values.
         */
        AdminRebalanceResponse() :
            tableNames(std::vector<std::string>()),
            message(std::vector<std::string>())
        {
        }

    /**
     * @private
     */

        std::vector<std::string> tableNames;
        std::vector<std::string> message;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::AdminRebalanceResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminRebalanceResponse& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.message);
        }

        static void decode(Decoder& d, gpudb::AdminRebalanceResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.message);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.message);
            }
        }
    };
}

#endif
