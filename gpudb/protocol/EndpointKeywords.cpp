/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */


#include "EndpointKeywords.h"

#include <string>


namespace gpudb
{
    // Keywords for /admin/alter/jobs request
    const std::string admin_alter_jobs_cancel( "cancel" );

    // Keywords for /admin/offline request
    const std::string admin_offline_false        ( "false"         );
    const std::string admin_offline_flush_to_disk( "flush_to_disk" );
    const std::string admin_offline_true         ( "true"          );

    // Keywords for /admin/show/jobs request
    const std::string admin_show_jobs_false       ( "false"        );
    const std::string admin_show_jobs_show_details( "show_details" );
    const std::string admin_show_jobs_true        ( "true"         );

    // Keywords for /admin/verifydb request
    const std::string admin_verify_db_false           ( "false"            );
    const std::string admin_verify_db_rebuild_on_error( "rebuild_on_error" );
    const std::string admin_verify_db_true            ( "true"             );
    const std::string admin_verify_db_verify_persist  ( "verify_persist"   );

    // Keywords for /aggregate/groupby request
    const std::string aggregate_group_by_ascending                    ( "ascending"                     );
    const std::string aggregate_group_by_binary                       ( "binary"                        );
    const std::string aggregate_group_by_chunk_size                   ( "chunk_size"                    );
    const std::string aggregate_group_by_collection_name              ( "collection_name"               );
    const std::string aggregate_group_by_create_indexes               ( "create_indexes"                );
    const std::string aggregate_group_by_cube                         ( "cube"                          );
    const std::string aggregate_group_by_descending                   ( "descending"                    );
    const std::string aggregate_group_by_expression                   ( "expression"                    );
    const std::string aggregate_group_by_false                        ( "false"                         );
    const std::string aggregate_group_by_grouping_sets                ( "grouping_sets"                 );
    const std::string aggregate_group_by_having                       ( "having"                        );
    const std::string aggregate_group_by_json                         ( "json"                          );
    const std::string aggregate_group_by_key                          ( "key"                           );
    const std::string aggregate_group_by_materialize_on_gpu           ( "materialize_on_gpu"            );
    const std::string aggregate_group_by_pivot                        ( "pivot"                         );
    const std::string aggregate_group_by_pivot_values                 ( "pivot_values"                  );
    const std::string aggregate_group_by_result_table                 ( "result_table"                  );
    const std::string aggregate_group_by_result_table_force_replicated( "result_table_force_replicated" );
    const std::string aggregate_group_by_result_table_generate_pk     ( "result_table_generate_pk"      );
    const std::string aggregate_group_by_result_table_persist         ( "result_table_persist"          );
    const std::string aggregate_group_by_rollup                       ( "rollup"                        );
    const std::string aggregate_group_by_sort_by                      ( "sort_by"                       );
    const std::string aggregate_group_by_sort_order                   ( "sort_order"                    );
    const std::string aggregate_group_by_true                         ( "true"                          );
    const std::string aggregate_group_by_ttl                          ( "ttl"                           );
    const std::string aggregate_group_by_value                        ( "value"                         );
    const std::string aggregate_group_by_view_id                      ( "view_id"                       );

    // Keywords for /aggregate/histogram request
    const std::string aggregate_histogram_value_column( "value_column" );

    // Keywords for /aggregate/kmeans request
    const std::string aggregate_k_means_max_iters( "max_iters" );
    const std::string aggregate_k_means_num_tries( "num_tries" );
    const std::string aggregate_k_means_whiten   ( "whiten"    );

    // Keywords for /aggregate/minmax request
    const std::string aggregate_min_max_default( "default" );
    const std::string aggregate_min_max_device ( "device"  );
    const std::string aggregate_min_max_host   ( "host"    );

    // Keywords for /aggregate/statistics request
    const std::string aggregate_statistics_additional_column_names( "additional_column_names" );
    const std::string aggregate_statistics_cardinality            ( "cardinality"             );
    const std::string aggregate_statistics_count                  ( "count"                   );
    const std::string aggregate_statistics_estimated_cardinality  ( "estimated_cardinality"   );
    const std::string aggregate_statistics_kurtosis               ( "kurtosis"                );
    const std::string aggregate_statistics_max                    ( "max"                     );
    const std::string aggregate_statistics_mean                   ( "mean"                    );
    const std::string aggregate_statistics_min                    ( "min"                     );
    const std::string aggregate_statistics_percentile             ( "percentile"              );
    const std::string aggregate_statistics_percentile_rank        ( "percentile_rank"         );
    const std::string aggregate_statistics_skew                   ( "skew"                    );
    const std::string aggregate_statistics_stdv                   ( "stdv"                    );
    const std::string aggregate_statistics_sum                    ( "sum"                     );
    const std::string aggregate_statistics_variance               ( "variance"                );
    const std::string aggregate_statistics_weight_column_name     ( "weight_column_name"      );
    const std::string aggregate_statistics_weighted_average       ( "weighted_average"        );

    // Keywords for /aggregate/statistics/byrange request
    const std::string aggregate_statistics_by_range_additional_column_names( "additional_column_names" );
    const std::string aggregate_statistics_by_range_bin_values             ( "bin_values"              );
    const std::string aggregate_statistics_by_range_order_column_name      ( "order_column_name"       );
    const std::string aggregate_statistics_by_range_weight_column_name     ( "weight_column_name"      );

    // Keywords for /aggregate/unique request
    const std::string aggregate_unique_ascending                    ( "ascending"                     );
    const std::string aggregate_unique_binary                       ( "binary"                        );
    const std::string aggregate_unique_chunk_size                   ( "chunk_size"                    );
    const std::string aggregate_unique_collection_name              ( "collection_name"               );
    const std::string aggregate_unique_descending                   ( "descending"                    );
    const std::string aggregate_unique_expression                   ( "expression"                    );
    const std::string aggregate_unique_false                        ( "false"                         );
    const std::string aggregate_unique_json                         ( "json"                          );
    const std::string aggregate_unique_result_table                 ( "result_table"                  );
    const std::string aggregate_unique_result_table_force_replicated( "result_table_force_replicated" );
    const std::string aggregate_unique_result_table_generate_pk     ( "result_table_generate_pk"      );
    const std::string aggregate_unique_result_table_persist         ( "result_table_persist"          );
    const std::string aggregate_unique_sort_order                   ( "sort_order"                    );
    const std::string aggregate_unique_true                         ( "true"                          );
    const std::string aggregate_unique_ttl                          ( "ttl"                           );
    const std::string aggregate_unique_view_id                      ( "view_id"                       );

    // Keywords for /aggregate/unpivot request
    const std::string aggregate_unpivot_binary                       ( "binary"                        );
    const std::string aggregate_unpivot_chunk_size                   ( "chunk_size"                    );
    const std::string aggregate_unpivot_collection_name              ( "collection_name"               );
    const std::string aggregate_unpivot_create_indexes               ( "create_indexes"                );
    const std::string aggregate_unpivot_expression                   ( "expression"                    );
    const std::string aggregate_unpivot_false                        ( "false"                         );
    const std::string aggregate_unpivot_json                         ( "json"                          );
    const std::string aggregate_unpivot_limit                        ( "limit"                         );
    const std::string aggregate_unpivot_materialize_on_gpu           ( "materialize_on_gpu"            );
    const std::string aggregate_unpivot_order_by                     ( "order_by"                      );
    const std::string aggregate_unpivot_result_table                 ( "result_table"                  );
    const std::string aggregate_unpivot_result_table_force_replicated( "result_table_force_replicated" );
    const std::string aggregate_unpivot_result_table_persist         ( "result_table_persist"          );
    const std::string aggregate_unpivot_true                         ( "true"                          );
    const std::string aggregate_unpivot_ttl                          ( "ttl"                           );
    const std::string aggregate_unpivot_view_id                      ( "view_id"                       );

    // Keywords for /alter/system/properties request
    const std::string alter_system_properties_audit_body                 ( "audit_body"                  );
    const std::string alter_system_properties_audit_data                 ( "audit_data"                  );
    const std::string alter_system_properties_audit_headers              ( "audit_headers"               );
    const std::string alter_system_properties_bulk_add_test              ( "bulk_add_test"               );
    const std::string alter_system_properties_chunk_cache_enabled        ( "chunk_cache_enabled"         );
    const std::string alter_system_properties_chunk_cache_size           ( "chunk_cache_size"            );
    const std::string alter_system_properties_chunk_size                 ( "chunk_size"                  );
    const std::string alter_system_properties_clear_cache                ( "clear_cache"                 );
    const std::string alter_system_properties_communicator_test          ( "communicator_test"           );
    const std::string alter_system_properties_concurrent_kernel_execution( "concurrent_kernel_execution" );
    const std::string alter_system_properties_enable_audit               ( "enable_audit"                );
    const std::string alter_system_properties_enable_job_manager         ( "enable_job_manager"          );
    const std::string alter_system_properties_execution_mode             ( "execution_mode"              );
    const std::string alter_system_properties_false                      ( "false"                       );
    const std::string alter_system_properties_flush_to_disk              ( "flush_to_disk"               );
    const std::string alter_system_properties_kernel_omp_threads         ( "kernel_omp_threads"          );
    const std::string alter_system_properties_max_get_records_size       ( "max_get_records_size"        );
    const std::string alter_system_properties_memory_allocation_limit_mb ( "memory_allocation_limit_mb"  );
    const std::string alter_system_properties_network_speed              ( "network_speed"               );
    const std::string alter_system_properties_request_timeout            ( "request_timeout"             );
    const std::string alter_system_properties_set_message_timers_enabled ( "set_message_timers_enabled"  );
    const std::string alter_system_properties_sm_omp_threads             ( "sm_omp_threads"              );
    const std::string alter_system_properties_true                       ( "true"                        );

    // Keywords for /alter/table request
    const std::string alter_table_add_column                   ( "add_column"                    );
    const std::string alter_table_add_column_expression        ( "add_column_expression"         );
    const std::string alter_table_allow_homogeneous_tables     ( "allow_homogeneous_tables"      );
    const std::string alter_table_change_column                ( "change_column"                 );
    const std::string alter_table_column_default_value         ( "column_default_value"          );
    const std::string alter_table_column_properties            ( "column_properties"             );
    const std::string alter_table_column_type                  ( "column_type"                   );
    const std::string alter_table_compression_type             ( "compression_type"              );
    const std::string alter_table_copy_values_from_column      ( "copy_values_from_column"       );
    const std::string alter_table_create_foreign_key           ( "create_foreign_key"            );
    const std::string alter_table_create_index                 ( "create_index"                  );
    const std::string alter_table_delete_column                ( "delete_column"                 );
    const std::string alter_table_delete_foreign_key           ( "delete_foreign_key"            );
    const std::string alter_table_delete_index                 ( "delete_index"                  );
    const std::string alter_table_false                        ( "false"                         );
    const std::string alter_table_lz4                          ( "lz4"                           );
    const std::string alter_table_lz4hc                        ( "lz4hc"                         );
    const std::string alter_table_memory_ttl                   ( "memory_ttl"                    );
    const std::string alter_table_move_to_collection           ( "move_to_collection"            );
    const std::string alter_table_none                         ( "none"                          );
    const std::string alter_table_protected                    ( "protected"                     );
    const std::string alter_table_refresh                      ( "refresh"                       );
    const std::string alter_table_remove_text_search_attributes( "remove_text_search_attributes" );
    const std::string alter_table_rename_column                ( "rename_column"                 );
    const std::string alter_table_rename_table                 ( "rename_table"                  );
    const std::string alter_table_set_column_compression       ( "set_column_compression"        );
    const std::string alter_table_set_global_access_mode       ( "set_global_access_mode"        );
    const std::string alter_table_set_refresh_method           ( "set_refresh_method"            );
    const std::string alter_table_set_refresh_period           ( "set_refresh_period"            );
    const std::string alter_table_set_refresh_start_time       ( "set_refresh_start_time"        );
    const std::string alter_table_snappy                       ( "snappy"                        );
    const std::string alter_table_true                         ( "true"                          );
    const std::string alter_table_ttl                          ( "ttl"                           );
    const std::string alter_table_update_last_access_time      ( "update_last_access_time"       );
    const std::string alter_table_validate_change_column       ( "validate_change_column"        );

    // Keywords for /alter/user request
    const std::string alter_user_set_password( "set_password" );

    // Keywords for /append/records request
    const std::string append_records_expression           ( "expression"            );
    const std::string append_records_false                ( "false"                 );
    const std::string append_records_limit                ( "limit"                 );
    const std::string append_records_offset               ( "offset"                );
    const std::string append_records_order_by             ( "order_by"              );
    const std::string append_records_true                 ( "true"                  );
    const std::string append_records_update_on_existing_pk( "update_on_existing_pk" );

    // Keywords for /clear/table request
    const std::string clear_table_false                 ( "false"                  );
    const std::string clear_table_no_error_if_not_exists( "no_error_if_not_exists" );
    const std::string clear_table_true                  ( "true"                   );

    // Keywords for /create/job request
    const std::string create_job_binary( "binary" );
    const std::string create_job_json  ( "json"   );
    const std::string create_job_snappy( "snappy" );

    // Keywords for /create/jointable request
    const std::string create_join_table_collection_name     ( "collection_name"      );
    const std::string create_join_table_false               ( "false"                );
    const std::string create_join_table_full_refresh        ( "full_refresh"         );
    const std::string create_join_table_manual              ( "manual"               );
    const std::string create_join_table_max_query_dimensions( "max_query_dimensions" );
    const std::string create_join_table_no_count            ( "no_count"             );
    const std::string create_join_table_no_refresh          ( "no_refresh"           );
    const std::string create_join_table_on_insert           ( "on_insert"            );
    const std::string create_join_table_on_query            ( "on_query"             );
    const std::string create_join_table_optimize_lookups    ( "optimize_lookups"     );
    const std::string create_join_table_refresh             ( "refresh"              );
    const std::string create_join_table_refresh_method      ( "refresh_method"       );
    const std::string create_join_table_true                ( "true"                 );
    const std::string create_join_table_ttl                 ( "ttl"                  );
    const std::string create_join_table_view_id             ( "view_id"              );

    // Keywords for /create/materializedview request
    const std::string create_materialized_view_collection_name   ( "collection_name"    );
    const std::string create_materialized_view_false             ( "false"              );
    const std::string create_materialized_view_manual            ( "manual"             );
    const std::string create_materialized_view_on_change         ( "on_change"          );
    const std::string create_materialized_view_on_query          ( "on_query"           );
    const std::string create_materialized_view_periodic          ( "periodic"           );
    const std::string create_materialized_view_persist           ( "persist"            );
    const std::string create_materialized_view_refresh_method    ( "refresh_method"     );
    const std::string create_materialized_view_refresh_period    ( "refresh_period"     );
    const std::string create_materialized_view_refresh_start_time( "refresh_start_time" );
    const std::string create_materialized_view_true              ( "true"               );
    const std::string create_materialized_view_ttl               ( "ttl"                );

    // Keywords for /create/proc request
    const std::string create_proc_distributed             ( "distributed"              );
    const std::string create_proc_max_concurrency_per_node( "max_concurrency_per_node" );
    const std::string create_proc_nondistributed          ( "nondistributed"           );

    // Keywords for /create/projection request
    const std::string create_projection_chunk_size            ( "chunk_size"             );
    const std::string create_projection_collection_name       ( "collection_name"        );
    const std::string create_projection_create_indexes        ( "create_indexes"         );
    const std::string create_projection_expression            ( "expression"             );
    const std::string create_projection_false                 ( "false"                  );
    const std::string create_projection_is_replicated         ( "is_replicated"          );
    const std::string create_projection_limit                 ( "limit"                  );
    const std::string create_projection_materialize_on_gpu    ( "materialize_on_gpu"     );
    const std::string create_projection_order_by              ( "order_by"               );
    const std::string create_projection_persist               ( "persist"                );
    const std::string create_projection_preserve_dict_encoding( "preserve_dict_encoding" );
    const std::string create_projection_shard_key             ( "shard_key"              );
    const std::string create_projection_true                  ( "true"                   );
    const std::string create_projection_ttl                   ( "ttl"                    );
    const std::string create_projection_view_id               ( "view_id"                );

    // Keywords for /create/table request
    const std::string create_table_chunk_size                 ( "chunk_size"                  );
    const std::string create_table_collection_name            ( "collection_name"             );
    const std::string create_table_disallow_homogeneous_tables( "disallow_homogeneous_tables" );
    const std::string create_table_false                      ( "false"                       );
    const std::string create_table_foreign_keys               ( "foreign_keys"                );
    const std::string create_table_foreign_shard_key          ( "foreign_shard_key"           );
    const std::string create_table_is_collection              ( "is_collection"               );
    const std::string create_table_is_filter_view             ( "is_filter_view"              );
    const std::string create_table_is_group_by                ( "is_group_by"                 );
    const std::string create_table_is_join                    ( "is_join"                     );
    const std::string create_table_is_merge                   ( "is_merge"                    );
    const std::string create_table_is_other_view              ( "is_other_view"               );
    const std::string create_table_is_projection              ( "is_projection"               );
    const std::string create_table_is_replicated              ( "is_replicated"               );
    const std::string create_table_is_result_table            ( "is_result_table"             );
    const std::string create_table_is_table                   ( "is_table"                    );
    const std::string create_table_is_union                   ( "is_union"                    );
    const std::string create_table_is_unique                  ( "is_unique"                   );
    const std::string create_table_is_unpivot                 ( "is_unpivot"                  );
    const std::string create_table_no_error_if_exists         ( "no_error_if_exists"          );
    const std::string create_table_true                       ( "true"                        );
    const std::string create_table_ttl                        ( "ttl"                         );

    // Keywords for /create/type request
    const std::string create_type_char1         ( "char1"          );
    const std::string create_type_char128       ( "char128"        );
    const std::string create_type_char16        ( "char16"         );
    const std::string create_type_char2         ( "char2"          );
    const std::string create_type_char256       ( "char256"        );
    const std::string create_type_char32        ( "char32"         );
    const std::string create_type_char4         ( "char4"          );
    const std::string create_type_char64        ( "char64"         );
    const std::string create_type_char8         ( "char8"          );
    const std::string create_type_data          ( "data"           );
    const std::string create_type_date          ( "date"           );
    const std::string create_type_datetime      ( "datetime"       );
    const std::string create_type_decimal       ( "decimal"        );
    const std::string create_type_dict          ( "dict"           );
    const std::string create_type_disk_optimized( "disk_optimized" );
    const std::string create_type_int16         ( "int16"          );
    const std::string create_type_int8          ( "int8"           );
    const std::string create_type_ipv4          ( "ipv4"           );
    const std::string create_type_nullable      ( "nullable"       );
    const std::string create_type_primary_key   ( "primary_key"    );
    const std::string create_type_shard_key     ( "shard_key"      );
    const std::string create_type_store_only    ( "store_only"     );
    const std::string create_type_text_search   ( "text_search"    );
    const std::string create_type_time          ( "time"           );
    const std::string create_type_timestamp     ( "timestamp"      );
    const std::string create_type_wkt           ( "wkt"            );

    // Keywords for /create/union request
    const std::string create_union_chunk_size        ( "chunk_size"         );
    const std::string create_union_collection_name   ( "collection_name"    );
    const std::string create_union_create_indexes    ( "create_indexes"     );
    const std::string create_union_except            ( "except"             );
    const std::string create_union_except_all        ( "except_all"         );
    const std::string create_union_false             ( "false"              );
    const std::string create_union_force_replicated  ( "force_replicated"   );
    const std::string create_union_intersect         ( "intersect"          );
    const std::string create_union_intersect_all     ( "intersect_all"      );
    const std::string create_union_materialize_on_gpu( "materialize_on_gpu" );
    const std::string create_union_merge_views       ( "merge_views"        );
    const std::string create_union_mode              ( "mode"               );
    const std::string create_union_persist           ( "persist"            );
    const std::string create_union_true              ( "true"               );
    const std::string create_union_ttl               ( "ttl"                );
    const std::string create_union_union             ( "union"              );
    const std::string create_union_union_all         ( "union_all"          );
    const std::string create_union_union_distinct    ( "union_distinct"     );
    const std::string create_union_view_id           ( "view_id"            );

    // Keywords for /delete/records request
    const std::string delete_records_delete_all_records( "delete_all_records" );
    const std::string delete_records_false             ( "false"              );
    const std::string delete_records_global_expression ( "global_expression"  );
    const std::string delete_records_record_id         ( "record_id"          );
    const std::string delete_records_true              ( "true"               );

    // Keywords for /execute/proc request
    const std::string execute_proc_cache_input     ( "cache_input"      );
    const std::string execute_proc_kifs_input_dirs ( "kifs_input_dirs"  );
    const std::string execute_proc_use_cached_input( "use_cached_input" );

    // Keywords for /filter request
    const std::string filter_collection_name( "collection_name" );
    const std::string filter_ttl            ( "ttl"             );
    const std::string filter_view_id        ( "view_id"         );

    // Keywords for /filter/byarea request
    const std::string filter_by_area_collection_name( "collection_name" );

    // Keywords for /filter/byarea/geometry request
    const std::string filter_by_area_geometry_collection_name( "collection_name" );

    // Keywords for /filter/bybox request
    const std::string filter_by_box_collection_name( "collection_name" );

    // Keywords for /filter/bybox/geometry request
    const std::string filter_by_box_geometry_collection_name( "collection_name" );

    // Keywords for /filter/bygeometry request
    const std::string filter_by_geometry_collection_name( "collection_name" );
    const std::string filter_by_geometry_contains       ( "contains"        );
    const std::string filter_by_geometry_crosses        ( "crosses"         );
    const std::string filter_by_geometry_disjoint       ( "disjoint"        );
    const std::string filter_by_geometry_equals         ( "equals"          );
    const std::string filter_by_geometry_intersects     ( "intersects"      );
    const std::string filter_by_geometry_overlaps       ( "overlaps"        );
    const std::string filter_by_geometry_touches        ( "touches"         );
    const std::string filter_by_geometry_within         ( "within"          );

    // Keywords for /filter/bylist request
    const std::string filter_by_list_collection_name( "collection_name" );
    const std::string filter_by_list_filter_mode    ( "filter_mode"     );
    const std::string filter_by_list_in_list        ( "in_list"         );
    const std::string filter_by_list_not_in_list    ( "not_in_list"     );

    // Keywords for /filter/byradius request
    const std::string filter_by_radius_collection_name( "collection_name" );

    // Keywords for /filter/byradius/geometry request
    const std::string filter_by_radius_geometry_collection_name( "collection_name" );

    // Keywords for /filter/byrange request
    const std::string filter_by_range_collection_name( "collection_name" );

    // Keywords for /filter/byseries request
    const std::string filter_by_series_collection_name        ( "collection_name"         );
    const std::string filter_by_series_euclidean              ( "euclidean"               );
    const std::string filter_by_series_great_circle           ( "great_circle"            );
    const std::string filter_by_series_spatial_distance_metric( "spatial_distance_metric" );
    const std::string filter_by_series_spatial_radius         ( "spatial_radius"          );
    const std::string filter_by_series_time_radius            ( "time_radius"             );

    // Keywords for /filter/bystring request
    const std::string filter_by_string_case_sensitive ( "case_sensitive"  );
    const std::string filter_by_string_collection_name( "collection_name" );
    const std::string filter_by_string_contains       ( "contains"        );
    const std::string filter_by_string_equals         ( "equals"          );
    const std::string filter_by_string_false          ( "false"           );
    const std::string filter_by_string_regex          ( "regex"           );
    const std::string filter_by_string_search         ( "search"          );
    const std::string filter_by_string_starts_with    ( "starts_with"     );
    const std::string filter_by_string_true           ( "true"            );

    // Keywords for /filter/bytable request
    const std::string filter_by_table_buffer             ( "buffer"              );
    const std::string filter_by_table_buffer_method      ( "buffer_method"       );
    const std::string filter_by_table_collection_name    ( "collection_name"     );
    const std::string filter_by_table_filter_mode        ( "filter_mode"         );
    const std::string filter_by_table_geos               ( "geos"                );
    const std::string filter_by_table_in_table           ( "in_table"            );
    const std::string filter_by_table_max_partition_score( "max_partition_score" );
    const std::string filter_by_table_max_partition_size ( "max_partition_size"  );
    const std::string filter_by_table_mode               ( "mode"                );
    const std::string filter_by_table_normal             ( "normal"              );
    const std::string filter_by_table_not_in_table       ( "not_in_table"        );
    const std::string filter_by_table_spatial            ( "spatial"             );
    const std::string filter_by_table_x_column_name      ( "x_column_name"       );
    const std::string filter_by_table_y_column_name      ( "y_column_name"       );

    // Keywords for /filter/byvalue request
    const std::string filter_by_value_collection_name( "collection_name" );

    // Keywords for /get/job response
    const std::string get_job_CANCELLED    ( "CANCELLED"     );
    const std::string get_job_DONE         ( "DONE"          );
    const std::string get_job_ERROR        ( "ERROR"         );
    const std::string get_job_RUNNING      ( "RUNNING"       );
    const std::string get_job_binary       ( "binary"        );
    const std::string get_job_error_message( "error_message" );
    const std::string get_job_json         ( "json"          );

    // Keywords for /get/records request
    const std::string get_records_ascending        ( "ascending"         );
    const std::string get_records_binary           ( "binary"            );
    const std::string get_records_descending       ( "descending"        );
    const std::string get_records_expression       ( "expression"        );
    const std::string get_records_false            ( "false"             );
    const std::string get_records_fast_index_lookup( "fast_index_lookup" );
    const std::string get_records_geojson          ( "geojson"           );
    const std::string get_records_json             ( "json"              );
    const std::string get_records_sort_by          ( "sort_by"           );
    const std::string get_records_sort_order       ( "sort_order"        );
    const std::string get_records_true             ( "true"              );

    // Keywords for /get/records/bycolumn request
    const std::string get_records_by_column_ascending           ( "ascending"            );
    const std::string get_records_by_column_binary              ( "binary"               );
    const std::string get_records_by_column_convert_wkts_to_wkbs( "convert_wkts_to_wkbs" );
    const std::string get_records_by_column_descending          ( "descending"           );
    const std::string get_records_by_column_expression          ( "expression"           );
    const std::string get_records_by_column_false               ( "false"                );
    const std::string get_records_by_column_json                ( "json"                 );
    const std::string get_records_by_column_order_by            ( "order_by"             );
    const std::string get_records_by_column_sort_by             ( "sort_by"              );
    const std::string get_records_by_column_sort_order          ( "sort_order"           );
    const std::string get_records_by_column_true                ( "true"                 );

    // Keywords for /get/records/byseries request
    const std::string get_records_by_series_binary( "binary" );
    const std::string get_records_by_series_json  ( "json"   );

    // Keywords for /get/records/fromcollection request
    const std::string get_records_from_collection_binary           ( "binary"            );
    const std::string get_records_from_collection_false            ( "false"             );
    const std::string get_records_from_collection_json             ( "json"              );
    const std::string get_records_from_collection_return_record_ids( "return_record_ids" );
    const std::string get_records_from_collection_true             ( "true"              );

    // Keywords for /grant/permission/system request
    const std::string grant_permission_system_system_admin( "system_admin" );
    const std::string grant_permission_system_system_read ( "system_read"  );
    const std::string grant_permission_system_system_write( "system_write" );

    // Keywords for /grant/permission/table request
    const std::string grant_permission_table_table_admin ( "table_admin"  );
    const std::string grant_permission_table_table_delete( "table_delete" );
    const std::string grant_permission_table_table_insert( "table_insert" );
    const std::string grant_permission_table_table_read  ( "table_read"   );
    const std::string grant_permission_table_table_update( "table_update" );

    // Keywords for /has/proc response
    const std::string has_proc_false( "false" );
    const std::string has_proc_true ( "true"  );

    // Keywords for /has/table response
    const std::string has_table_false( "false" );
    const std::string has_table_true ( "true"  );

    // Keywords for /has/type response
    const std::string has_type_false( "false" );
    const std::string has_type_true ( "true"  );

    // Keywords for /insert/records request
    const std::string insert_records_binary               ( "binary"                );
    const std::string insert_records_false                ( "false"                 );
    const std::string insert_records_json                 ( "json"                  );
    const std::string insert_records_return_record_ids    ( "return_record_ids"     );
    const std::string insert_records_true                 ( "true"                  );
    const std::string insert_records_update_on_existing_pk( "update_on_existing_pk" );

    // Keywords for /insert/records/random request
    const std::string insert_records_random_all            ( "all"             );
    const std::string insert_records_random_attr_name      ( "attr_name"       );
    const std::string insert_records_random_cardinality    ( "cardinality"     );
    const std::string insert_records_random_interval       ( "interval"        );
    const std::string insert_records_random_max            ( "max"             );
    const std::string insert_records_random_min            ( "min"             );
    const std::string insert_records_random_null_percentage( "null_percentage" );
    const std::string insert_records_random_seed           ( "seed"            );
    const std::string insert_records_random_track_length   ( "track_length"    );
    const std::string insert_records_random_value          ( "value"           );

    // Keywords for /insert/symbol request
    const std::string insert_symbol_color   ( "color"    );
    const std::string insert_symbol_svg     ( "svg"      );
    const std::string insert_symbol_svg_path( "svg_path" );

    // Keywords for /lock/table request
    const std::string lock_table_no_access ( "no_access"  );
    const std::string lock_table_read_only ( "read_only"  );
    const std::string lock_table_read_write( "read_write" );
    const std::string lock_table_status    ( "status"     );
    const std::string lock_table_write_only( "write_only" );

    // Keywords for /merge/records request
    const std::string merge_records_chunk_size     ( "chunk_size"      );
    const std::string merge_records_collection_name( "collection_name" );
    const std::string merge_records_false          ( "false"           );
    const std::string merge_records_is_replicated  ( "is_replicated"   );
    const std::string merge_records_persist        ( "persist"         );
    const std::string merge_records_true           ( "true"            );
    const std::string merge_records_ttl            ( "ttl"             );
    const std::string merge_records_view_id        ( "view_id"         );

    // Keywords for /revoke/permission/system request
    const std::string revoke_permission_system_system_admin( "system_admin" );
    const std::string revoke_permission_system_system_read ( "system_read"  );
    const std::string revoke_permission_system_system_write( "system_write" );

    // Keywords for /revoke/permission/table request
    const std::string revoke_permission_table_table_admin ( "table_admin"  );
    const std::string revoke_permission_table_table_delete( "table_delete" );
    const std::string revoke_permission_table_table_insert( "table_insert" );
    const std::string revoke_permission_table_table_read  ( "table_read"   );
    const std::string revoke_permission_table_table_update( "table_update" );

    // Keywords for /show/proc request
    const std::string show_proc_false        ( "false"         );
    const std::string show_proc_include_files( "include_files" );
    const std::string show_proc_true         ( "true"          );

    // Keywords for /show/proc response
    const std::string show_proc_distributed   ( "distributed"    );
    const std::string show_proc_nondistributed( "nondistributed" );

    // Keywords for /show/proc/status request
    const std::string show_proc_status_clear_complete( "clear_complete" );
    const std::string show_proc_status_false         ( "false"          );
    const std::string show_proc_status_true          ( "true"           );

    // Keywords for /show/proc/status response
    const std::string show_proc_status_complete( "complete" );
    const std::string show_proc_status_error   ( "error"    );
    const std::string show_proc_status_killed  ( "killed"   );
    const std::string show_proc_status_running ( "running"  );

    // Keywords for /show/security response
    const std::string show_security_external_user( "external_user" );
    const std::string show_security_internal_user( "internal_user" );
    const std::string show_security_role         ( "role"          );

    // Keywords for /show/system/properties request
    const std::string show_system_properties_properties( "properties" );

    // Keywords for /show/system/properties response
    const std::string show_system_properties_FALSE                          ( "FALSE"                           );
    const std::string show_system_properties_TRUE                           ( "TRUE"                            );
    const std::string show_system_properties_conf_enable_worker_http_servers( "conf.enable_worker_http_servers" );
    const std::string show_system_properties_conf_worker_http_server_ips    ( "conf.worker_http_server_ips"     );
    const std::string show_system_properties_conf_worker_http_server_ports  ( "conf.worker_http_server_ports"   );

    // Keywords for /show/table request
    const std::string show_table_force_synchronous     ( "force_synchronous"      );
    const std::string show_table_get_column_info       ( "get_column_info"        );
    const std::string show_table_get_sizes             ( "get_sizes"              );
    const std::string show_table_no_error_if_not_exists( "no_error_if_not_exists" );
    const std::string show_table_show_children         ( "show_children"          );

    // Keywords for /show/table response
    const std::string show_table_COLLECTION              ( "COLLECTION"               );
    const std::string show_table_JOIN                    ( "JOIN"                     );
    const std::string show_table_REPLICATED              ( "REPLICATED"               );
    const std::string show_table_RESULT_TABLE            ( "RESULT_TABLE"             );
    const std::string show_table_VIEW                    ( "VIEW"                     );
    const std::string show_table_allow_homogeneous_tables( "allow_homogeneous_tables" );
    const std::string show_table_attribute_indexes       ( "attribute_indexes"        );
    const std::string show_table_collection_names        ( "collection_names"         );
    const std::string show_table_column_info             ( "column_info"              );
    const std::string show_table_compressed_columns      ( "compressed_columns"       );
    const std::string show_table_create_projection       ( "create_projection"        );
    const std::string show_table_create_table            ( "create_table"             );
    const std::string show_table_create_union            ( "create_union"             );
    const std::string show_table_foreign_keys            ( "foreign_keys"             );
    const std::string show_table_foreign_shard_key       ( "foreign_shard_key"        );
    const std::string show_table_global_access_mode      ( "global_access_mode"       );
    const std::string show_table_is_dirty                ( "is_dirty"                 );
    const std::string show_table_is_view_persisted       ( "is_view_persisted"        );
    const std::string show_table_last_refresh_time       ( "last_refresh_time"        );
    const std::string show_table_memory_ttl              ( "memory_ttl"               );
    const std::string show_table_next_refresh_time       ( "next_refresh_time"        );
    const std::string show_table_no_access               ( "no_access"                );
    const std::string show_table_protected               ( "protected"                );
    const std::string show_table_read_only               ( "read_only"                );
    const std::string show_table_read_write              ( "read_write"               );
    const std::string show_table_record_bytes            ( "record_bytes"             );
    const std::string show_table_refresh_method          ( "refresh_method"           );
    const std::string show_table_refresh_period          ( "refresh_period"           );
    const std::string show_table_refresh_start_time      ( "refresh_start_time"       );
    const std::string show_table_remaining_table_ttl     ( "remaining_table_ttl"      );
    const std::string show_table_request_avro_json       ( "request_avro_json"        );
    const std::string show_table_request_avro_type       ( "request_avro_type"        );
    const std::string show_table_table_ttl               ( "table_ttl"                );
    const std::string show_table_view_table_name         ( "view_table_name"          );
    const std::string show_table_write_only              ( "write_only"               );

    // Keywords for /show/table request and response
    const std::string show_table_false( "false" );
    const std::string show_table_true ( "true"  );

    // Keywords for /show/types request
    const std::string show_types_false        ( "false"         );
    const std::string show_types_no_join_types( "no_join_types" );
    const std::string show_types_true         ( "true"          );

    // Keywords for /update/records request
    const std::string update_records_binary                            ( "binary"                             );
    const std::string update_records_bypass_safety_checks              ( "bypass_safety_checks"               );
    const std::string update_records_false                             ( "false"                              );
    const std::string update_records_global_expression                 ( "global_expression"                  );
    const std::string update_records_json                              ( "json"                               );
    const std::string update_records_record_id                         ( "record_id"                          );
    const std::string update_records_true                              ( "true"                               );
    const std::string update_records_update_on_existing_pk             ( "update_on_existing_pk"              );
    const std::string update_records_use_expressions_in_new_values_maps( "use_expressions_in_new_values_maps" );

    // Keywords for /visualize/image request
    const std::string visualize_image_102100             ( "102100"              );
    const std::string visualize_image_3857               ( "3857"                );
    const std::string visualize_image_900913             ( "900913"              );
    const std::string visualize_image_EPSG_102100        ( "EPSG:102100"         );
    const std::string visualize_image_EPSG_3857          ( "EPSG:3857"           );
    const std::string visualize_image_EPSG_4326          ( "EPSG:4326"           );
    const std::string visualize_image_EPSG_900913        ( "EPSG:900913"         );
    const std::string visualize_image_PLATE_CARREE       ( "PLATE_CARREE"        );
    const std::string visualize_image_SYMBOLCODE         ( "SYMBOLCODE"          );
    const std::string visualize_image_WEB_MERCATOR       ( "WEB_MERCATOR"        );
    const std::string visualize_image_circle             ( "circle"              );
    const std::string visualize_image_diamond            ( "diamond"             );
    const std::string visualize_image_do_points          ( "do_points"           );
    const std::string visualize_image_do_shapes          ( "do_shapes"           );
    const std::string visualize_image_do_symbology       ( "do_symbology"        );
    const std::string visualize_image_do_tracks          ( "do_tracks"           );
    const std::string visualize_image_false              ( "false"               );
    const std::string visualize_image_hashlineangles     ( "hashlineangles"      );
    const std::string visualize_image_hashlinecolors     ( "hashlinecolors"      );
    const std::string visualize_image_hashlineintervals  ( "hashlineintervals"   );
    const std::string visualize_image_hashlinelens       ( "hashlinelens"        );
    const std::string visualize_image_hashlinewidths     ( "hashlinewidths"      );
    const std::string visualize_image_hollowcircle       ( "hollowcircle"        );
    const std::string visualize_image_hollowdiamond      ( "hollowdiamond"       );
    const std::string visualize_image_hollowsquare       ( "hollowsquare"        );
    const std::string visualize_image_none               ( "none"                );
    const std::string visualize_image_oriented_arrow     ( "oriented_arrow"      );
    const std::string visualize_image_oriented_triangle  ( "oriented_triangle"   );
    const std::string visualize_image_pointcolors        ( "pointcolors"         );
    const std::string visualize_image_pointoffset_x      ( "pointoffset_x"       );
    const std::string visualize_image_pointoffset_y      ( "pointoffset_y"       );
    const std::string visualize_image_pointshapes        ( "pointshapes"         );
    const std::string visualize_image_pointsizes         ( "pointsizes"          );
    const std::string visualize_image_shapefillcolors    ( "shapefillcolors"     );
    const std::string visualize_image_shapelinecolors    ( "shapelinecolors"     );
    const std::string visualize_image_shapelinepatternlen( "shapelinepatternlen" );
    const std::string visualize_image_shapelinepatterns  ( "shapelinepatterns"   );
    const std::string visualize_image_shapelinewidths    ( "shapelinewidths"     );
    const std::string visualize_image_square             ( "square"              );
    const std::string visualize_image_symbolrotations    ( "symbolrotations"     );
    const std::string visualize_image_trackheadcolors    ( "trackheadcolors"     );
    const std::string visualize_image_trackheadshapes    ( "trackheadshapes"     );
    const std::string visualize_image_trackheadsizes     ( "trackheadsizes"      );
    const std::string visualize_image_tracklinecolors    ( "tracklinecolors"     );
    const std::string visualize_image_tracklinewidths    ( "tracklinewidths"     );
    const std::string visualize_image_trackmarkercolors  ( "trackmarkercolors"   );
    const std::string visualize_image_trackmarkershapes  ( "trackmarkershapes"   );
    const std::string visualize_image_trackmarkersizes   ( "trackmarkersizes"    );
    const std::string visualize_image_true               ( "true"                );

    // Keywords for /visualize/image/chart request
    const std::string visualize_image_chart_cb_delimiter  ( "cb_delimiter"   );
    const std::string visualize_image_chart_cb_pointcolors( "cb_pointcolors" );
    const std::string visualize_image_chart_cb_pointshapes( "cb_pointshapes" );
    const std::string visualize_image_chart_cb_pointsizes ( "cb_pointsizes"  );
    const std::string visualize_image_chart_circle        ( "circle"         );
    const std::string visualize_image_chart_diamond       ( "diamond"        );
    const std::string visualize_image_chart_hollowcircle  ( "hollowcircle"   );
    const std::string visualize_image_chart_hollowdiamond ( "hollowdiamond"  );
    const std::string visualize_image_chart_hollowsquare  ( "hollowsquare"   );
    const std::string visualize_image_chart_jitter_x      ( "jitter_x"       );
    const std::string visualize_image_chart_jitter_y      ( "jitter_y"       );
    const std::string visualize_image_chart_log           ( "log"            );
    const std::string visualize_image_chart_none          ( "none"           );
    const std::string visualize_image_chart_plot_all      ( "plot_all"       );
    const std::string visualize_image_chart_pointcolor    ( "pointcolor"     );
    const std::string visualize_image_chart_pointshape    ( "pointshape"     );
    const std::string visualize_image_chart_pointsize     ( "pointsize"      );
    const std::string visualize_image_chart_scale_type_x  ( "scale_type_x"   );
    const std::string visualize_image_chart_scale_type_y  ( "scale_type_y"   );
    const std::string visualize_image_chart_square        ( "square"         );
    const std::string visualize_image_chart_x_order_by    ( "x_order_by"     );
    const std::string visualize_image_chart_y_order_by    ( "y_order_by"     );

    // Keywords for /visualize/image/chart response
    const std::string visualize_image_chart_location_x     ( "location_x"      );
    const std::string visualize_image_chart_location_y     ( "location_y"      );
    const std::string visualize_image_chart_sorted_x_values( "sorted_x_values" );
    const std::string visualize_image_chart_sorted_y_values( "sorted_y_values" );

    // Keywords for /visualize/image/classbreak request
    const std::string visualize_image_classbreak_102100             ( "102100"              );
    const std::string visualize_image_classbreak_3857               ( "3857"                );
    const std::string visualize_image_classbreak_900913             ( "900913"              );
    const std::string visualize_image_classbreak_EPSG_102100        ( "EPSG:102100"         );
    const std::string visualize_image_classbreak_EPSG_3857          ( "EPSG:3857"           );
    const std::string visualize_image_classbreak_EPSG_4326          ( "EPSG:4326"           );
    const std::string visualize_image_classbreak_EPSG_900913        ( "EPSG:900913"         );
    const std::string visualize_image_classbreak_PLATE_CARREE       ( "PLATE_CARREE"        );
    const std::string visualize_image_classbreak_SYMBOLCODE         ( "SYMBOLCODE"          );
    const std::string visualize_image_classbreak_WEB_MERCATOR       ( "WEB_MERCATOR"        );
    const std::string visualize_image_classbreak_circle             ( "circle"              );
    const std::string visualize_image_classbreak_diamond            ( "diamond"             );
    const std::string visualize_image_classbreak_do_points          ( "do_points"           );
    const std::string visualize_image_classbreak_do_shapes          ( "do_shapes"           );
    const std::string visualize_image_classbreak_do_symbology       ( "do_symbology"        );
    const std::string visualize_image_classbreak_do_tracks          ( "do_tracks"           );
    const std::string visualize_image_classbreak_false              ( "false"               );
    const std::string visualize_image_classbreak_hashlineangles     ( "hashlineangles"      );
    const std::string visualize_image_classbreak_hashlinecolors     ( "hashlinecolors"      );
    const std::string visualize_image_classbreak_hashlineintervals  ( "hashlineintervals"   );
    const std::string visualize_image_classbreak_hashlinelens       ( "hashlinelens"        );
    const std::string visualize_image_classbreak_hashlinewidths     ( "hashlinewidths"      );
    const std::string visualize_image_classbreak_hollowcircle       ( "hollowcircle"        );
    const std::string visualize_image_classbreak_hollowdiamond      ( "hollowdiamond"       );
    const std::string visualize_image_classbreak_hollowsquare       ( "hollowsquare"        );
    const std::string visualize_image_classbreak_none               ( "none"                );
    const std::string visualize_image_classbreak_pointcolors        ( "pointcolors"         );
    const std::string visualize_image_classbreak_pointoffset_x      ( "pointoffset_x"       );
    const std::string visualize_image_classbreak_pointoffset_y      ( "pointoffset_y"       );
    const std::string visualize_image_classbreak_pointshapes        ( "pointshapes"         );
    const std::string visualize_image_classbreak_pointsizes         ( "pointsizes"          );
    const std::string visualize_image_classbreak_shapefillcolors    ( "shapefillcolors"     );
    const std::string visualize_image_classbreak_shapelinecolors    ( "shapelinecolors"     );
    const std::string visualize_image_classbreak_shapelinepatternlen( "shapelinepatternlen" );
    const std::string visualize_image_classbreak_shapelinepatterns  ( "shapelinepatterns"   );
    const std::string visualize_image_classbreak_shapelinewidths    ( "shapelinewidths"     );
    const std::string visualize_image_classbreak_square             ( "square"              );
    const std::string visualize_image_classbreak_trackheadcolors    ( "trackheadcolors"     );
    const std::string visualize_image_classbreak_trackheadshapes    ( "trackheadshapes"     );
    const std::string visualize_image_classbreak_trackheadsizes     ( "trackheadsizes"      );
    const std::string visualize_image_classbreak_tracklinecolors    ( "tracklinecolors"     );
    const std::string visualize_image_classbreak_tracklinewidths    ( "tracklinewidths"     );
    const std::string visualize_image_classbreak_trackmarkercolors  ( "trackmarkercolors"   );
    const std::string visualize_image_classbreak_trackmarkershapes  ( "trackmarkershapes"   );
    const std::string visualize_image_classbreak_trackmarkersizes   ( "trackmarkersizes"    );
    const std::string visualize_image_classbreak_true               ( "true"                );

    // Keywords for /visualize/image/contour request
    const std::string visualize_image_contour_102100            ( "102100"             );
    const std::string visualize_image_contour_3857              ( "3857"               );
    const std::string visualize_image_contour_900913            ( "900913"             );
    const std::string visualize_image_contour_EPSG_102100       ( "EPSG:102100"        );
    const std::string visualize_image_contour_EPSG_3857         ( "EPSG:3857"          );
    const std::string visualize_image_contour_EPSG_4326         ( "EPSG:4326"          );
    const std::string visualize_image_contour_EPSG_900913       ( "EPSG:900913"        );
    const std::string visualize_image_contour_FILL_RATIO        ( "FILL_RATIO"         );
    const std::string visualize_image_contour_INV_DST_POW       ( "INV_DST_POW"        );
    const std::string visualize_image_contour_KRIGING           ( "KRIGING"            );
    const std::string visualize_image_contour_MIN_CURV          ( "MIN_CURV"           );
    const std::string visualize_image_contour_PASS_THROUGH      ( "PASS_THROUGH"       );
    const std::string visualize_image_contour_PLATE_CARREE      ( "PLATE_CARREE"       );
    const std::string visualize_image_contour_WEB_MERCATOR      ( "WEB_MERCATOR"       );
    const std::string visualize_image_contour_adjust_grid       ( "adjust_grid"        );
    const std::string visualize_image_contour_adjust_grid_neigh ( "adjust_grid_neigh"  );
    const std::string visualize_image_contour_adjust_grid_size  ( "adjust_grid_size"   );
    const std::string visualize_image_contour_adjust_levels     ( "adjust_levels"      );
    const std::string visualize_image_contour_bg_color          ( "bg_color"           );
    const std::string visualize_image_contour_blues             ( "blues"              );
    const std::string visualize_image_contour_color             ( "color"              );
    const std::string visualize_image_contour_colormap          ( "colormap"           );
    const std::string visualize_image_contour_gray              ( "gray"               );
    const std::string visualize_image_contour_greens            ( "greens"             );
    const std::string visualize_image_contour_greys             ( "greys"              );
    const std::string visualize_image_contour_grid_size         ( "grid_size"          );
    const std::string visualize_image_contour_gridding_method   ( "gridding_method"    );
    const std::string visualize_image_contour_hot               ( "hot"                );
    const std::string visualize_image_contour_hsv               ( "hsv"                );
    const std::string visualize_image_contour_jet               ( "jet"                );
    const std::string visualize_image_contour_line_size         ( "line_size"          );
    const std::string visualize_image_contour_max_grid_size     ( "max_grid_size"      );
    const std::string visualize_image_contour_max_level         ( "max_level"          );
    const std::string visualize_image_contour_max_search_cells  ( "max_search_cells"   );
    const std::string visualize_image_contour_min_grid_size     ( "min_grid_size"      );
    const std::string visualize_image_contour_min_level         ( "min_level"          );
    const std::string visualize_image_contour_num_levels        ( "num_levels"         );
    const std::string visualize_image_contour_oranges           ( "oranges"            );
    const std::string visualize_image_contour_purples           ( "purples"            );
    const std::string visualize_image_contour_reds              ( "reds"               );
    const std::string visualize_image_contour_render_output_grid( "render_output_grid" );
    const std::string visualize_image_contour_search_radius     ( "search_radius"      );
    const std::string visualize_image_contour_smoothing_factor  ( "smoothing_factor"   );
    const std::string visualize_image_contour_viridis           ( "viridis"            );

    // Keywords for /visualize/image/heatmap request
    const std::string visualize_image_heatmap_102100              ( "102100"               );
    const std::string visualize_image_heatmap_3857                ( "3857"                 );
    const std::string visualize_image_heatmap_900913              ( "900913"               );
    const std::string visualize_image_heatmap_EPSG_102100         ( "EPSG:102100"          );
    const std::string visualize_image_heatmap_EPSG_3857           ( "EPSG:3857"            );
    const std::string visualize_image_heatmap_EPSG_4326           ( "EPSG:4326"            );
    const std::string visualize_image_heatmap_EPSG_900913         ( "EPSG:900913"          );
    const std::string visualize_image_heatmap_PLATE_CARREE        ( "PLATE_CARREE"         );
    const std::string visualize_image_heatmap_WEB_MERCATOR        ( "WEB_MERCATOR"         );
    const std::string visualize_image_heatmap_bg_color            ( "bg_color"             );
    const std::string visualize_image_heatmap_blues               ( "blues"                );
    const std::string visualize_image_heatmap_blur_radius         ( "blur_radius"          );
    const std::string visualize_image_heatmap_colormap            ( "colormap"             );
    const std::string visualize_image_heatmap_gradient_end_color  ( "gradient_end_color"   );
    const std::string visualize_image_heatmap_gradient_start_color( "gradient_start_color" );
    const std::string visualize_image_heatmap_gray                ( "gray"                 );
    const std::string visualize_image_heatmap_greens              ( "greens"               );
    const std::string visualize_image_heatmap_greys               ( "greys"                );
    const std::string visualize_image_heatmap_hot                 ( "hot"                  );
    const std::string visualize_image_heatmap_hsv                 ( "hsv"                  );
    const std::string visualize_image_heatmap_jet                 ( "jet"                  );
    const std::string visualize_image_heatmap_oranges             ( "oranges"              );
    const std::string visualize_image_heatmap_purples             ( "purples"              );
    const std::string visualize_image_heatmap_reds                ( "reds"                 );
    const std::string visualize_image_heatmap_viridis             ( "viridis"              );

    // Keywords for /visualize/image/labels request
    const std::string visualize_image_labels_102100      ( "102100"       );
    const std::string visualize_image_labels_3857        ( "3857"         );
    const std::string visualize_image_labels_900913      ( "900913"       );
    const std::string visualize_image_labels_EPSG_102100 ( "EPSG:102100"  );
    const std::string visualize_image_labels_EPSG_3857   ( "EPSG:3857"    );
    const std::string visualize_image_labels_EPSG_4326   ( "EPSG:4326"    );
    const std::string visualize_image_labels_EPSG_900913 ( "EPSG:900913"  );
    const std::string visualize_image_labels_PLATE_CARREE( "PLATE_CARREE" );
    const std::string visualize_image_labels_WEB_MERCATOR( "WEB_MERCATOR" );

    // Keywords for /visualize/video request
    const std::string visualize_video_102100           ( "102100"            );
    const std::string visualize_video_3857             ( "3857"              );
    const std::string visualize_video_900913           ( "900913"            );
    const std::string visualize_video_EPSG_102100      ( "EPSG:102100"       );
    const std::string visualize_video_EPSG_3857        ( "EPSG:3857"         );
    const std::string visualize_video_EPSG_4326        ( "EPSG:4326"         );
    const std::string visualize_video_EPSG_900913      ( "EPSG:900913"       );
    const std::string visualize_video_PLATE_CARREE     ( "PLATE_CARREE"      );
    const std::string visualize_video_SYMBOLCODE       ( "SYMBOLCODE"        );
    const std::string visualize_video_WEB_MERCATOR     ( "WEB_MERCATOR"      );
    const std::string visualize_video_circle           ( "circle"            );
    const std::string visualize_video_diamond          ( "diamond"           );
    const std::string visualize_video_do_points        ( "do_points"         );
    const std::string visualize_video_do_shapes        ( "do_shapes"         );
    const std::string visualize_video_do_tracks        ( "do_tracks"         );
    const std::string visualize_video_false            ( "false"             );
    const std::string visualize_video_hollowcircle     ( "hollowcircle"      );
    const std::string visualize_video_hollowdiamond    ( "hollowdiamond"     );
    const std::string visualize_video_hollowsquare     ( "hollowsquare"      );
    const std::string visualize_video_none             ( "none"              );
    const std::string visualize_video_pointcolors      ( "pointcolors"       );
    const std::string visualize_video_pointshapes      ( "pointshapes"       );
    const std::string visualize_video_pointsizes       ( "pointsizes"        );
    const std::string visualize_video_shapefillcolors  ( "shapefillcolors"   );
    const std::string visualize_video_shapelinecolors  ( "shapelinecolors"   );
    const std::string visualize_video_shapelinewidths  ( "shapelinewidths"   );
    const std::string visualize_video_square           ( "square"            );
    const std::string visualize_video_trackheadcolors  ( "trackheadcolors"   );
    const std::string visualize_video_trackheadshapes  ( "trackheadshapes"   );
    const std::string visualize_video_trackheadsizes   ( "trackheadsizes"    );
    const std::string visualize_video_tracklinecolors  ( "tracklinecolors"   );
    const std::string visualize_video_tracklinewidths  ( "tracklinewidths"   );
    const std::string visualize_video_trackmarkercolors( "trackmarkercolors" );
    const std::string visualize_video_trackmarkershapes( "trackmarkershapes" );
    const std::string visualize_video_trackmarkersizes ( "trackmarkersizes"  );
    const std::string visualize_video_true             ( "true"              );

    // Keywords for /visualize/video/heatmap request
    const std::string visualize_video_heatmap_102100              ( "102100"               );
    const std::string visualize_video_heatmap_3857                ( "3857"                 );
    const std::string visualize_video_heatmap_900913              ( "900913"               );
    const std::string visualize_video_heatmap_EPSG_102100         ( "EPSG:102100"          );
    const std::string visualize_video_heatmap_EPSG_3857           ( "EPSG:3857"            );
    const std::string visualize_video_heatmap_EPSG_4326           ( "EPSG:4326"            );
    const std::string visualize_video_heatmap_EPSG_900913         ( "EPSG:900913"          );
    const std::string visualize_video_heatmap_PLATE_CARREE        ( "PLATE_CARREE"         );
    const std::string visualize_video_heatmap_WEB_MERCATOR        ( "WEB_MERCATOR"         );
    const std::string visualize_video_heatmap_bg_color            ( "bg_color"             );
    const std::string visualize_video_heatmap_blues               ( "blues"                );
    const std::string visualize_video_heatmap_blur_radius         ( "blur_radius"          );
    const std::string visualize_video_heatmap_colormap            ( "colormap"             );
    const std::string visualize_video_heatmap_gradient_end_color  ( "gradient_end_color"   );
    const std::string visualize_video_heatmap_gradient_start_color( "gradient_start_color" );
    const std::string visualize_video_heatmap_gray                ( "gray"                 );
    const std::string visualize_video_heatmap_greens              ( "greens"               );
    const std::string visualize_video_heatmap_greys               ( "greys"                );
    const std::string visualize_video_heatmap_hot                 ( "hot"                  );
    const std::string visualize_video_heatmap_hsv                 ( "hsv"                  );
    const std::string visualize_video_heatmap_jet                 ( "jet"                  );
    const std::string visualize_video_heatmap_oranges             ( "oranges"              );
    const std::string visualize_video_heatmap_purples             ( "purples"              );
    const std::string visualize_video_heatmap_reds                ( "reds"                 );


}


