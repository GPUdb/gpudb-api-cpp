/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_EXTERNAL_TABLE_H__
#define __CREATE_EXTERNAL_TABLE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #createExternalTable(const CreateExternalTableRequest&) const}.
     * <p>
     * @private
     */
    struct CreateExternalTableRequest
    {

        /**
         * @private
         * Constructs a CreateExternalTableRequest object with default
         * parameter values.
         */
        CreateExternalTableRequest() :
            tableName(std::string()),
            filepaths(std::vector<std::string>()),
            createTableOptions(std::map<std::string, std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * @private
         * Constructs a CreateExternalTableRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_
         * @param[in] filepaths_
         * @param[in] createTableOptions_
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::create_external_table_type_id:
         *                                 The default value is ''.
         *                                 </ul>
         * @param[in] options_
         *                      <ul>
         *                              <li>
         *                      gpudb::create_external_table_table_type:
         *                      <ul>
         *                              <li>
         *                      gpudb::create_external_table_materialized
         *                              <li>
         *                      gpudb::create_external_table_logical
         *                              <li>
         *                      gpudb::create_external_table_logical_tmp
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_external_table_materialized.
         *                              <li>
         *                      gpudb::create_external_table_file_type:
         *                      <ul>
         *                              <li>
         *                      gpudb::create_external_table_delimited_text
         *                              <li>
         *                      gpudb::create_external_table_parquet
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_external_table_delimited_text.
         *                              <li>
         *                      gpudb::create_external_table_loading_mode:
         *                      <ul>
         *                              <li> gpudb::create_external_table_head
         *                              <li>
         *                      gpudb::create_external_table_distributed_shared
         *                              <li>
         *                      gpudb::create_external_table_distributed_local
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_external_table_head.
         *                              <li>
         *                      gpudb::create_external_table_error_handling:
         *                      <ul>
         *                              <li>
         *                      gpudb::create_external_table_permissive
         *                              <li>
         *                      gpudb::create_external_table_ignore_bad_records
         *                              <li> gpudb::create_external_table_abort
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_external_table_Permissive.
         *                              <li>
         *                      gpudb::create_external_table_batch_size
         *                              <li>
         *                      gpudb::create_external_table_refresh_method:
         *                      <ul>
         *                              <li>
         *                      gpudb::create_external_table_manual
         *                              <li>
         *                      gpudb::create_external_table_on_start
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_external_table_manual.
         *                              <li>
         *                      gpudb::create_external_table_column_formats
         *                              <li>
         *                      gpudb::create_external_table_default_column_formats
         *                              <li>
         *                      gpudb::create_external_table_dry_run:
         *                      <ul>
         *                              <li> gpudb::create_external_table_false
         *                              <li> gpudb::create_external_table_true
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_external_table_false.
         *                              <li>
         *                      gpudb::create_external_table_text_has_header:
         *                      <ul>
         *                              <li> gpudb::create_external_table_true
         *                              <li> gpudb::create_external_table_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_external_table_true.
         *                              <li>
         *                      gpudb::create_external_table_text_delimiter:
         *                      The default value is ','.
         *                              <li>
         *                      gpudb::create_external_table_text_header_property_delimiter:
         *                      The default value is '|'.
         *                              <li>
         *                      gpudb::create_external_table_columns_to_load
         *                              <li>
         *                      gpudb::create_external_table_text_comment_string:
         *                      The default value is '#'.
         *                              <li>
         *                      gpudb::create_external_table_text_null_string:
         *                      The default value is ''.
         *                              <li>
         *                      gpudb::create_external_table_text_quote_character:
         *                      The default value is '"'.
         *                              <li>
         *                      gpudb::create_external_table_text_escape_character
         *                      </ul>
         * 
         */
        CreateExternalTableRequest(const std::string& tableName_, const std::vector<std::string>& filepaths_, const std::map<std::string, std::string>& createTableOptions_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            filepaths( filepaths_ ),
            createTableOptions( createTableOptions_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::vector<std::string> filepaths;
        std::map<std::string, std::string> createTableOptions;
        std::map<std::string, std::string> options;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::CreateExternalTableRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateExternalTableRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.filepaths);
            ::avro::encode(e, v.createTableOptions);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateExternalTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.filepaths);
                            break;

                        case 2:
                            ::avro::decode(d, v.createTableOptions);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.filepaths);
                ::avro::decode(d, v.createTableOptions);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #createExternalTable(const CreateExternalTableRequest&) const}.
     * <p>
     * @private
     */
    struct CreateExternalTableResponse
    {

        /**
         * @private
         * Constructs a CreateExternalTableResponse object with default
         * parameter values.
         */
        CreateExternalTableResponse() :
            tableName(std::string()),
            typeId(std::string()),
            countInserted(int64_t()),
            countSkipped(int64_t()),
            countUpdated(int64_t()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string tableName;
        std::string typeId;
        int64_t countInserted;
        int64_t countSkipped;
        int64_t countUpdated;
        std::map<std::string, std::string> info;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::CreateExternalTableResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateExternalTableResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.typeId);
            ::avro::encode(e, v.countInserted);
            ::avro::encode(e, v.countSkipped);
            ::avro::encode(e, v.countUpdated);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateExternalTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.typeId);
                            break;

                        case 2:
                            ::avro::decode(d, v.countInserted);
                            break;

                        case 3:
                            ::avro::decode(d, v.countSkipped);
                            break;

                        case 4:
                            ::avro::decode(d, v.countUpdated);
                            break;

                        case 5:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.typeId);
                ::avro::decode(d, v.countInserted);
                ::avro::decode(d, v.countSkipped);
                ::avro::decode(d, v.countUpdated);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
