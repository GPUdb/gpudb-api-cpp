/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_SCHEMA_H__
#define __ALTER_SCHEMA_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #alterSchema(const AlterSchemaRequest&) const}.
     * <p>
     * Used to change the name of a SQL-style <a
     * href="../../concepts/schemas.html" target="_top">schema</a>, specified
     * in @a schemaName.
     */
    struct AlterSchemaRequest
    {

        /**
         * Constructs an AlterSchemaRequest object with default parameter
         * values.
         */
        AlterSchemaRequest() :
            schemaName(std::string()),
            action(std::string()),
            value(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterSchemaRequest object with the specified
         * parameters.
         * 
         * @param[in] schemaName_  Name of the schema to be altered.
         * @param[in] action_  Modification operation to be applied
         *                     <ul>
         *                             <li> gpudb::alter_schema_rename_schema:
         *                     Renames a schema to @a value. Has the same
         *                     naming restrictions as <a
         *                     href="../../concepts/tables.html"
         *                     target="_top">tables</a>.
         *                     </ul>
         * @param[in] value_  The value of the modification, depending on @a
         *                    action.  For now the only value of @a action is
         *                    @a rename_schema.  In this case the value is the
         *                    new name of the schema.
         * @param[in] options_  Optional parameters.
         * 
         */
        AlterSchemaRequest(const std::string& schemaName_, const std::string& action_, const std::string& value_, const std::map<std::string, std::string>& options_):
            schemaName( schemaName_ ),
            action( action_ ),
            value( value_ ),
            options( options_ )
        {
        }

        std::string schemaName;
        std::string action;
        std::string value;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterSchemaRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterSchemaRequest& v)
        {
            ::avro::encode(e, v.schemaName);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.value);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterSchemaRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.schemaName);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.value);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.schemaName);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.value);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #alterSchema(const AlterSchemaRequest&) const}.
     * <p>
     * Used to change the name of a SQL-style <a
     * href="../../concepts/schemas.html" target="_top">schema</a>, specified
     * in @a schemaName.
     */
    struct AlterSchemaResponse
    {

        /**
         * Constructs an AlterSchemaResponse object with default parameter
         * values.
         */
        AlterSchemaResponse() :
            schemaName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string schemaName;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterSchemaResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterSchemaResponse& v)
        {
            ::avro::encode(e, v.schemaName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AlterSchemaResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.schemaName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.schemaName);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
