/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __INSERT_RECORDS_FROM_FILES_H__
#define __INSERT_RECORDS_FROM_FILES_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #insertRecordsFromFiles(const InsertRecordsFromFilesRequest&) const}.
     * <p>
     */
    struct InsertRecordsFromFilesRequest
    {

        /**
         * Constructs an InsertRecordsFromFilesRequest object with default
         * parameter values.
         */
        InsertRecordsFromFilesRequest() :
            tableName(std::string()),
            filepaths(std::vector<std::string>()),
            createTableOptions(std::map<std::string, std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an InsertRecordsFromFilesRequest object with the
         * specified parameters.
         * 
         * @param[in] tableName_
         * @param[in] filepaths_  (can have wildcards) -- array of strings (can
         *                        be relative paths)
         * @param[in] createTableOptions_  see options in create_table_request
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_files_type_id:
         *                                 Optional: ID of a currently
         *                                 registered type.  The default value
         *                                 is ''.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_no_error_if_exists:
         *                                 If @a true, prevents an error from
         *                                 occurring if the table already
         *                                 exists and is of the given type.  If
         *                                 a table with the same ID but a
         *                                 different type exists, it is still
         *                                 an error.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_files_true
         *                                         <li>
         *                                 gpudb::insert_records_from_files_false
         *                                 </ul>
         *                                 The default value is
         *                                 gpudb::insert_records_from_files_false.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_collection_name:
         *                                 Name of a collection which is to
         *                                 contain the newly created table. If
         *                                 the collection provided is
         *                                 non-existent, the collection will be
         *                                 automatically created. If empty,
         *                                 then the newly created table will be
         *                                 a top-level table.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_is_collection:
         *                                 Indicates whether the new table to
         *                                 be created will be a collection.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_files_true
         *                                         <li>
         *                                 gpudb::insert_records_from_files_false
         *                                 </ul>
         *                                 The default value is
         *                                 gpudb::insert_records_from_files_false.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_disallow_homogeneous_tables:
         *                                 No longer supported; value will be
         *                                 ignored.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_files_true
         *                                         <li>
         *                                 gpudb::insert_records_from_files_false
         *                                 </ul>
         *                                 The default value is
         *                                 gpudb::insert_records_from_files_false.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_is_replicated:
         *                                 For a table, affects the <a
         *                                 href="../../concepts/tables.html#distribution"
         *                                 target="_top">distribution
         *                                 scheme</a> for the table's data.  If
         *                                 true and the given type has no
         *                                 explicit <a
         *                                 href="../../concepts/tables.html#shard-key"
         *                                 target="_top">shard key</a> defined,
         *                                 the table will be <a
         *                                 href="../../concepts/tables.html#replication"
         *                                 target="_top">replicated</a>.  If
         *                                 false, the table will be <a
         *                                 href="../../concepts/tables.html#sharding"
         *                                 target="_top">sharded</a> according
         *                                 to the shard key specified in the
         *                                 given
         *                                 @{create_table_options.type_id}, or
         *                                 <a
         *                                 href="../../concepts/tables.html#random-sharding"
         *                                 target="_top">randomly sharded</a>,
         *                                 if no shard key is specified.  Note
         *                                 that a type containing a shard key
         *                                 cannot be used to create a
         *                                 replicated table.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_files_true
         *                                         <li>
         *                                 gpudb::insert_records_from_files_false
         *                                 </ul>
         *                                 The default value is
         *                                 gpudb::insert_records_from_files_false.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_foreign_keys:
         *                                 Semicolon-separated list of <a
         *                                 href="../../concepts/tables.html#foreign-keys"
         *                                 target="_top">foreign keys</a>, of
         *                                 the format '(source_column_name [,
         *                                 ...]) references
         *                                 target_table_name(primary_key_column_name
         *                                 [, ...]) [as foreign_key_name]'.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_foreign_shard_key:
         *                                 Foreign shard key of the format
         *                                 'source_column references
         *                                 shard_by_column from
         *                                 target_table(primary_key_column)'.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_partition_type:
         *                                 <a
         *                                 href="../../concepts/tables.html#partitioning"
         *                                 target="_top">Partitioning</a>
         *                                 scheme to use.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_files_RANGE:
         *                                 Use <a
         *                                 href="../../concepts/tables.html#partitioning-by-range"
         *                                 target="_top">range
         *                                 partitioning</a>.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_INTERVAL:
         *                                 Use <a
         *                                 href="../../concepts/tables.html#partitioning-by-interval"
         *                                 target="_top">interval
         *                                 partitioning</a>.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_LIST:
         *                                 Use <a
         *                                 href="../../concepts/tables.html#partitioning-by-list"
         *                                 target="_top">list partitioning</a>.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_HASH:
         *                                 Use <a
         *                                 href="../../concepts/tables.html#partitioning-by-hash"
         *                                 target="_top">hash partitioning</a>.
         *                                 </ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_files_partition_keys:
         *                                 Comma-separated list of partition
         *                                 keys, which are the columns or
         *                                 column expressions by which records
         *                                 will be assigned to partitions
         *                                 defined by @a partition_definitions.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_partition_definitions:
         *                                 Comma-separated list of partition
         *                                 definitions, whose format depends on
         *                                 the choice of @a partition_type.
         *                                 See <a
         *                                 href="../../concepts/tables.html#partitioning-by-range"
         *                                 target="_top">range
         *                                 partitioning</a>, <a
         *                                 href="../../concepts/tables.html#partitioning-by-interval"
         *                                 target="_top">interval
         *                                 partitioning</a>, <a
         *                                 href="../../concepts/tables.html#partitioning-by-list"
         *                                 target="_top">list partitioning</a>,
         *                                 or <a
         *                                 href="../../concepts/tables.html#partitioning-by-hash"
         *                                 target="_top">hash partitioning</a>
         *                                 for example formats.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_is_automatic_partition:
         *                                 If true, a new partition will be
         *                                 created for values which don't fall
         *                                 into an existing partition.
         *                                 Currently only supported for <a
         *                                 href="../../concepts/tables.html#partitioning-by-list"
         *                                 target="_top">list partitions</a>.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_files_true
         *                                         <li>
         *                                 gpudb::insert_records_from_files_false
         *                                 </ul>
         *                                 The default value is
         *                                 gpudb::insert_records_from_files_false.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_ttl:
         *                                 For a table, sets the <a
         *                                 href="../../concepts/ttl.html"
         *                                 target="_top">TTL</a> of the table
         *                                 specified in @a tableName.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_chunk_size:
         *                                 Indicates the number of records per
         *                                 chunk to be used for this table.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_is_result_table:
         *                                 For a table, indicates whether the
         *                                 table is an in-memory table. A
         *                                 result table cannot contain
         *                                 store_only, text_search, or string
         *                                 columns (charN columns are
         *                                 acceptable), and it will not be
         *                                 retained if the server is restarted.
         *                                 <ul>
         *                                         <li>
         *                                 gpudb::insert_records_from_files_true
         *                                         <li>
         *                                 gpudb::insert_records_from_files_false
         *                                 </ul>
         *                                 The default value is
         *                                 gpudb::insert_records_from_files_false.
         *                                         <li>
         *                                 gpudb::insert_records_from_files_strategy_definition:
         *                                 The <a
         *                                 href="../../rm/concepts.html#tier-strategies"
         *                                 target="_top">tier strategy</a> for
         *                                 the table and its columns. See <a
         *                                 href="../../rm/concepts.html#tier-strategies"
         *                                 target="_top">tier strategy
         *                                 usage</a> for format and <a
         *                                 href="../../rm/usage.html#tier-strategies"
         *                                 target="_top">tier strategy
         *                                 examples</a> for examples.
         *                                 </ul>
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_file_type:
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_delimited_text
         *                              <li>
         *                      gpudb::insert_records_from_files_parquet
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_delimited_text.
         *                              <li>
         *                      gpudb::insert_records_from_files_loading_mode:
         *                      specifies how to divide up data loading among
         *                      nodes
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_head: head
         *                      node loads all data
         *                              <li>
         *                      gpudb::insert_records_from_files_distributed_shared:
         *                      worker nodes load all data, all nodes can see
         *                      all files and loading is divided up internally
         *                              <li>
         *                      gpudb::insert_records_from_files_distributed_local:
         *                      each worker node loads the files that it sees
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_head.
         *                              <li>
         *                      gpudb::insert_records_from_files_error_handling:
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_permissive:
         *                      tries to parse all lines: nulls are inserted
         *                      for missing tokens and extra tokens are
         *                      ignored.
         *                              <li>
         *                      gpudb::insert_records_from_files_ignore_bad_records:
         *                      Drops malformed lines/rows entirely.
         *                              <li>
         *                      gpudb::insert_records_from_files_abort: Aborts
         *                      ingest when it encounters an error.
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_Permissive.
         *                              <li>
         *                      gpudb::insert_records_from_files_truncate_table:
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_true
         *                              <li>
         *                      gpudb::insert_records_from_files_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_false.
         *                              <li>
         *                      gpudb::insert_records_from_files_batch_size:
         *                      number of records per batch when loading from
         *                      file
         *                              <li>
         *                      gpudb::insert_records_from_files_column_formats:
         *                      json map of colname to map of format to value
         *                              <li>
         *                      gpudb::insert_records_from_files_default_column_formats:
         *                      json map of format to value
         *                              <li>
         *                      gpudb::insert_records_from_files_dry_run: Walk
         *                      through the files and determine number of valid
         *                      records.  Does not load data. Applies the error
         *                      handling mode to determine valid behavior
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_false: no dry
         *                      run
         *                              <li>
         *                      gpudb::insert_records_from_files_true: do a dry
         *                      run
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_false.
         *                              <li>
         *                      gpudb::insert_records_from_files_text_has_header:
         *                      <ul>
         *                              <li>
         *                      gpudb::insert_records_from_files_true
         *                              <li>
         *                      gpudb::insert_records_from_files_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::insert_records_from_files_true.
         *                              <li>
         *                      gpudb::insert_records_from_files_text_delimiter:
         *                      Delimiter for csv fields and header row. Must
         *                      be a single character.  The default value is
         *                      ','.
         *                              <li>
         *                      gpudb::insert_records_from_files_text_header_property_delimiter:
         *                      Delimiter for column properties in csv header
         *                      row.  The default value is '|'.
         *                              <li>
         *                      gpudb::insert_records_from_files_columns_to_load:
         *                      Optionally used to specify a subset of columns
         *                      to load, instead of loading all columns in the
         *                      file.
         *                      The columns to use are delimited by a comma.
         *                      Column numbers can be specified discretely or
         *                      as a range e.g. '1 .. 4' refers to the first
         *                      through fourth columns.
         *                      For example, a value of '5,3,1..2' will create
         *                      a table with the first column in the table
         *                      being the fifth column in the file, followed by
         *                      third column in the file, then the first
         *                      column, and lastly the second column.
         *                      Additionally, if the file(s) have a header,
         *                      names matching the file header names may be
         *                      provided instead of numbers. Ranges are not
         *                      supported.
         *                      For example, a value of 'C, B, A' will create a
         *                      three column table with column C, followed by
         *                      column B, followed by column A.
         *                              <li>
         *                      gpudb::insert_records_from_files_text_comment_string:
         *                      ignore all lines starting with the comment
         *                      value.  The default value is '#'.
         *                              <li>
         *                      gpudb::insert_records_from_files_text_null_string:
         *                      value to treat as null.  The default value is
         *                      ''.
         *                              <li>
         *                      gpudb::insert_records_from_files_text_quote_character:
         *                      quote character, defaults to a double-quote
         *                      i.e. ".Set an empty string to not have a quote
         *                      character. Must be a single character.  The
         *                      default value is '"'.
         *                              <li>
         *                      gpudb::insert_records_from_files_text_escape_character:
         *                      escape character, defaults to no escaping. Must
         *                      be a single character
         *                      </ul>
         * 
         */
        InsertRecordsFromFilesRequest(const std::string& tableName_, const std::vector<std::string>& filepaths_, const std::map<std::string, std::string>& createTableOptions_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            filepaths( filepaths_ ),
            createTableOptions( createTableOptions_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::vector<std::string> filepaths;
        std::map<std::string, std::string> createTableOptions;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::InsertRecordsFromFilesRequest>
    {
        static void encode(Encoder& e, const gpudb::InsertRecordsFromFilesRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.filepaths);
            ::avro::encode(e, v.createTableOptions);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::InsertRecordsFromFilesRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.filepaths);
                            break;

                        case 2:
                            ::avro::decode(d, v.createTableOptions);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.filepaths);
                ::avro::decode(d, v.createTableOptions);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #insertRecordsFromFiles(const InsertRecordsFromFilesRequest&) const}.
     * <p>
     */
    struct InsertRecordsFromFilesResponse
    {

        /**
         * Constructs an InsertRecordsFromFilesResponse object with default
         * parameter values.
         */
        InsertRecordsFromFilesResponse() :
            tableName(std::string()),
            typeId(std::string()),
            countInserted(int64_t()),
            countSkipped(int64_t()),
            countUpdated(int64_t()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string tableName;
        std::string typeId;
        int64_t countInserted;
        int64_t countSkipped;
        int64_t countUpdated;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::InsertRecordsFromFilesResponse>
    {
        static void encode(Encoder& e, const gpudb::InsertRecordsFromFilesResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.typeId);
            ::avro::encode(e, v.countInserted);
            ::avro::encode(e, v.countSkipped);
            ::avro::encode(e, v.countUpdated);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::InsertRecordsFromFilesResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.typeId);
                            break;

                        case 2:
                            ::avro::decode(d, v.countInserted);
                            break;

                        case 3:
                            ::avro::decode(d, v.countSkipped);
                            break;

                        case 4:
                            ::avro::decode(d, v.countUpdated);
                            break;

                        case 5:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.typeId);
                ::avro::decode(d, v.countInserted);
                ::avro::decode(d, v.countSkipped);
                ::avro::decode(d, v.countUpdated);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
