/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __AGGREGATE_GROUP_BY_H__
#define __AGGREGATE_GROUP_BY_H__

#include "../GenericRecord.hpp"

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #aggregateGroupByRaw(const AggregateGroupByRequest&) const}.
     * <p>
     * Calculates unique combinations (groups) of values for the given columns
     * in a given table/view/collection and computes aggregates on each unique
     * combination. This is somewhat analogous to an SQL-style SELECT...GROUP
     * BY. Any column(s) can be grouped on, but only non-string (i.e. numeric)
     * columns may be used for computing aggregates. The results can be paged
     * via the @a offset and @a limit parameters. For example, to get 10 groups
     * with the largest counts the inputs would be: limit=10,
     * options={"sort_order":"descending", "sort_by":"value"}. @a options can
     * be used to customize behavior of this call e.g. filtering or sorting the
     * results. To group by 'x' and 'y' and compute the number of objects
     * within each group, use column_names=['x','y','count(*)'].  To also
     * compute the sum of 'z' over each group, use
     * column_names=['x','y','count(*)','sum(z)']. Available aggregation
     * functions are: 'count(*)', 'sum', 'min', 'max', 'avg', 'mean', 'stddev',
     * 'stddev_pop', 'stddev_samp', 'var', 'var_pop', 'var_samp', 'arg_min',
     * 'arg_max' and 'count_distinct'. The response is returned as a dynamic
     * schema. For details see: <a href="../../concepts/dynamic_schemas.html"
     * target="_top">dynamic schemas documentation</a>. If the 'result_table'
     * option is provided then the results are stored in a table with the name
     * given in the option and the results are not returned in the response.
     */
    struct AggregateGroupByRequest
    {

        /**
         * Constructs an AggregateGroupByRequest object with default parameter
         * values.
         */
        AggregateGroupByRequest() :
            tableName(std::string()),
            columnNames(std::vector<std::string>()),
            offset(int64_t()),
            limit(int64_t()),
            encoding(std::string("binary")),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AggregateGroupByRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Name of the table on which the operation will
         *                        be performed. Must be an existing
         *                        table/view/collection.
         * @param[in] columnNames_  List of one or more column names,
         *                          expressions, and aggregate expressions.
         *                          Must include at least one 'grouping' column
         *                          or expression.  If no aggregate is
         *                          included, count(*) will be computed as a
         *                          default.
         * @param[in] offset_  A positive integer indicating the number of
         *                     initial results to skip (this can be useful for
         *                     paging through the results).  The minimum
         *                     allowed value is 0. The maximum allowed value is
         *                     MAX_INT.
         * @param[in] limit_  A positive integer indicating the maximum number
         *                    of results to be returned Or END_OF_SET (-9999)
         *                    to indicate that the max number of results should
         *                    be returned.  Default value is 1000.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> expression: Filter expression to
         *                      apply to the table prior to computing the
         *                      aggregate group by.
         *                              <li> having: Filter expression to apply
         *                      to the aggregated results.
         *                              <li> sort_order: String indicating how
         *                      the returned values should be sorted -
         *                      ascending or descending. Values: 'ascending',
         *                      'descending'.
         *                              <li> sort_by: String determining how
         *                      the results are sorted. Values: 'key', 'value'.
         *                              <li> result_table: The name of the
         *                      table used to store the results. Column names
         *                      (group-by and aggregate fields) need to be
         *                      given aliases e.g. ["FChar256 as fchar256",
         *                      "sum(FDouble) as sfd"].  If present, no results
         *                      are returned in the response.  This option is
         *                      not available if one of the grouping attributes
         *                      is an unrestricted string (i.e.; not charN)
         *                      type.
         *                      </ul>
         *                        Default value is an empty std::map.
         * 
         */
        AggregateGroupByRequest(const std::string& tableName_, const std::vector<std::string>& columnNames_, const int64_t offset_, const int64_t limit_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            columnNames( columnNames_ ),
            offset( offset_ ),
            limit( limit_ ),
            encoding( "binary" ),
            options( options_ )
        {
        }

        /**
         * Constructs an AggregateGroupByRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Name of the table on which the operation will
         *                        be performed. Must be an existing
         *                        table/view/collection.
         * @param[in] columnNames_  List of one or more column names,
         *                          expressions, and aggregate expressions.
         *                          Must include at least one 'grouping' column
         *                          or expression.  If no aggregate is
         *                          included, count(*) will be computed as a
         *                          default.
         * @param[in] offset_  A positive integer indicating the number of
         *                     initial results to skip (this can be useful for
         *                     paging through the results).  The minimum
         *                     allowed value is 0. The maximum allowed value is
         *                     MAX_INT.
         * @param[in] limit_  A positive integer indicating the maximum number
         *                    of results to be returned Or END_OF_SET (-9999)
         *                    to indicate that the max number of results should
         *                    be returned.  Default value is 1000.
         * @param[in] encoding_  Specifies the encoding for returned records.
         *                       Values: 'binary', 'json'.
         *                         Default value is 'binary'.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> expression: Filter expression to
         *                      apply to the table prior to computing the
         *                      aggregate group by.
         *                              <li> having: Filter expression to apply
         *                      to the aggregated results.
         *                              <li> sort_order: String indicating how
         *                      the returned values should be sorted -
         *                      ascending or descending. Values: 'ascending',
         *                      'descending'.
         *                              <li> sort_by: String determining how
         *                      the results are sorted. Values: 'key', 'value'.
         *                              <li> result_table: The name of the
         *                      table used to store the results. Column names
         *                      (group-by and aggregate fields) need to be
         *                      given aliases e.g. ["FChar256 as fchar256",
         *                      "sum(FDouble) as sfd"].  If present, no results
         *                      are returned in the response.  This option is
         *                      not available if one of the grouping attributes
         *                      is an unrestricted string (i.e.; not charN)
         *                      type.
         *                      </ul>
         *                        Default value is an empty std::map.
         * 
         */
        AggregateGroupByRequest(const std::string& tableName_, const std::vector<std::string>& columnNames_, const int64_t offset_, const int64_t limit_, const std::string& encoding_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            columnNames( columnNames_ ),
            offset( offset_ ),
            limit( limit_ ),
            encoding( encoding_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::vector<std::string> columnNames;
        int64_t offset;
        int64_t limit;
        std::string encoding;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AggregateGroupByRequest>
    {
        static void encode(Encoder& e, const gpudb::AggregateGroupByRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.columnNames);
            ::avro::encode(e, v.offset);
            ::avro::encode(e, v.limit);
            ::avro::encode(e, v.encoding);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AggregateGroupByRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.columnNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.offset);
                            break;

                        case 3:
                            ::avro::decode(d, v.limit);
                            break;

                        case 4:
                            ::avro::decode(d, v.encoding);
                            break;

                        case 5:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.columnNames);
                ::avro::decode(d, v.offset);
                ::avro::decode(d, v.limit);
                ::avro::decode(d, v.encoding);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #aggregateGroupByRaw(const AggregateGroupByRequest&) const}.
     * <p>
     * Calculates unique combinations (groups) of values for the given columns
     * in a given table/view/collection and computes aggregates on each unique
     * combination. This is somewhat analogous to an SQL-style SELECT...GROUP
     * BY. Any column(s) can be grouped on, but only non-string (i.e. numeric)
     * columns may be used for computing aggregates. The results can be paged
     * via the @a offset and @a limit parameters. For example, to get 10 groups
     * with the largest counts the inputs would be: limit=10,
     * options={"sort_order":"descending", "sort_by":"value"}. @a options can
     * be used to customize behavior of this call e.g. filtering or sorting the
     * results. To group by 'x' and 'y' and compute the number of objects
     * within each group, use column_names=['x','y','count(*)'].  To also
     * compute the sum of 'z' over each group, use
     * column_names=['x','y','count(*)','sum(z)']. Available aggregation
     * functions are: 'count(*)', 'sum', 'min', 'max', 'avg', 'mean', 'stddev',
     * 'stddev_pop', 'stddev_samp', 'var', 'var_pop', 'var_samp', 'arg_min',
     * 'arg_max' and 'count_distinct'. The response is returned as a dynamic
     * schema. For details see: <a href="../../concepts/dynamic_schemas.html"
     * target="_top">dynamic schemas documentation</a>. If the 'result_table'
     * option is provided then the results are stored in a table with the name
     * given in the option and the results are not returned in the response.
     */
    struct RawAggregateGroupByResponse
    {

        /**
         * Constructs a RawAggregateGroupByResponse object with default
         * parameter values.
         */
        RawAggregateGroupByResponse() :
            responseSchemaStr(std::string()),
            binaryEncodedResponse(std::vector<uint8_t>()),
            jsonEncodedResponse(std::string()),
            totalNumberOfRecords(int64_t()),
            hasMoreRecords(bool())
        {
        }

        std::string responseSchemaStr;
        std::vector<uint8_t> binaryEncodedResponse;
        std::string jsonEncodedResponse;
        int64_t totalNumberOfRecords;
        bool hasMoreRecords;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::RawAggregateGroupByResponse>
    {
        static void encode(Encoder& e, const gpudb::RawAggregateGroupByResponse& v)
        {
            ::avro::encode(e, v.responseSchemaStr);
            ::avro::encode(e, v.binaryEncodedResponse);
            ::avro::encode(e, v.jsonEncodedResponse);
            ::avro::encode(e, v.totalNumberOfRecords);
            ::avro::encode(e, v.hasMoreRecords);
        }

        static void decode(Decoder& d, gpudb::RawAggregateGroupByResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.responseSchemaStr);
                            break;

                        case 1:
                            ::avro::decode(d, v.binaryEncodedResponse);
                            break;

                        case 2:
                            ::avro::decode(d, v.jsonEncodedResponse);
                            break;

                        case 3:
                            ::avro::decode(d, v.totalNumberOfRecords);
                            break;

                        case 4:
                            ::avro::decode(d, v.hasMoreRecords);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.responseSchemaStr);
                ::avro::decode(d, v.binaryEncodedResponse);
                ::avro::decode(d, v.jsonEncodedResponse);
                ::avro::decode(d, v.totalNumberOfRecords);
                ::avro::decode(d, v.hasMoreRecords);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #aggregateGroupBy(const AggregateGroupByRequest&) const}.
     * <p>
     * Calculates unique combinations (groups) of values for the given columns
     * in a given table/view/collection and computes aggregates on each unique
     * combination. This is somewhat analogous to an SQL-style SELECT...GROUP
     * BY. Any column(s) can be grouped on, but only non-string (i.e. numeric)
     * columns may be used for computing aggregates. The results can be paged
     * via the @a offset and @a limit parameters. For example, to get 10 groups
     * with the largest counts the inputs would be: limit=10,
     * options={"sort_order":"descending", "sort_by":"value"}. @a options can
     * be used to customize behavior of this call e.g. filtering or sorting the
     * results. To group by 'x' and 'y' and compute the number of objects
     * within each group, use column_names=['x','y','count(*)'].  To also
     * compute the sum of 'z' over each group, use
     * column_names=['x','y','count(*)','sum(z)']. Available aggregation
     * functions are: 'count(*)', 'sum', 'min', 'max', 'avg', 'mean', 'stddev',
     * 'stddev_pop', 'stddev_samp', 'var', 'var_pop', 'var_samp', 'arg_min',
     * 'arg_max' and 'count_distinct'. The response is returned as a dynamic
     * schema. For details see: <a href="../../concepts/dynamic_schemas.html"
     * target="_top">dynamic schemas documentation</a>. If the 'result_table'
     * option is provided then the results are stored in a table with the name
     * given in the option and the results are not returned in the response.
     */
    struct AggregateGroupByResponse
    {

        /**
         * Constructs an AggregateGroupByResponse object with default parameter
         * values.
         */
        AggregateGroupByResponse() :
            responseSchemaStr(std::string()),
            data(std::vector<gpudb::GenericRecord>()),
            totalNumberOfRecords(int64_t()),
            hasMoreRecords(bool())
        {
        }

        std::string responseSchemaStr;
        std::vector<gpudb::GenericRecord> data;
        int64_t totalNumberOfRecords;
        bool hasMoreRecords;
    };
}

#endif
