/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __AGGREGATE_GROUP_BY_H__
#define __AGGREGATE_GROUP_BY_H__

#include "../GenericRecord.hpp"

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #aggregateGroupByRaw(const AggregateGroupByRequest&) const}.
     * <p>
     * Calculates unique combinations (groups) of values for the given columns
     * in a given table/view/collection and computes aggregates on each unique
     * combination. This is somewhat analogous to an SQL-style SELECT...GROUP
     * BY.
     * <p>
     * Any column(s) can be grouped on, and all column types except
     * unrestricted-length strings may be used for computing applicable
     * aggregates; columns marked as <a
     * href="../../concepts/types.html#data-handling"
     * target="_top">store-only</a> are unable to be used in grouping or
     * aggregation.
     * <p>
     * The results can be paged via the @a offset and @a limit parameters. For
     * example, to get 10 groups with the largest counts the inputs would be:
     * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
     * <p>
     * @a options can be used to customize behavior of this call e.g. filtering
     * or sorting the results.
     * <p>
     * To group by columns 'x' and 'y' and compute the number of objects within
     * each group, use:  column_names=['x','y','count(*)'].
     * <p>
     * To also compute the sum of 'z' over each group, use:
     * column_names=['x','y','count(*)','sum(z)'].
     * <p>
     * Available <a
     * href="../../concepts/expressions.html#aggregate-expressions"
     * target="_top">aggregation functions</a> are: count(*), sum, min, max,
     * avg, mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp,
     * arg_min, arg_max and count_distinct.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
     * documentation</a>.
     * <p>
     * If a @a result_table name is specified in the @a options, the results
     * are stored in a new table with that name--no results are returned in the
     * response.  Both the table name and resulting column names must adhere to
     * <a href="../../concepts/tables.html#table" target="_top">standard naming
     * conventions</a>; column/aggregation expressions will need to be aliased.
     * If the source table's <a href="../../concepts/tables.html#shard-keys"
     * target="_top">shard key</a> is used as the grouping column(s), the
     * result table will be sharded, in all other cases it will be replicated.
     * Sorting will properly function only if the result table is replicated or
     * if there is only one processing node and should not be relied upon in
     * other cases.  Not available when any of the values of @a columnNames is
     * an unrestricted-length string.
     */
    struct AggregateGroupByRequest
    {

        /**
         * Constructs an AggregateGroupByRequest object with default parameter
         * values.
         */
        AggregateGroupByRequest() :
            tableName(std::string()),
            columnNames(std::vector<std::string>()),
            offset(int64_t()),
            limit(int64_t()),
            encoding(std::string("binary")),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AggregateGroupByRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Name of the table on which the operation will
         *                        be performed. Must be an existing
         *                        table/view/collection.
         * @param[in] columnNames_  List of one or more column names,
         *                          expressions, and aggregate expressions.
         * @param[in] offset_  A positive integer indicating the number of
         *                     initial results to skip (this can be useful for
         *                     paging through the results).  The minimum
         *                     allowed value is 0. The maximum allowed value is
         *                     MAX_INT.
         * @param[in] limit_  A positive integer indicating the maximum number
         *                    of results to be returned Or END_OF_SET (-9999)
         *                    to indicate that the max number of results should
         *                    be returned.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::aggregate_group_by_collection_name: Name
         *                      of a collection which is to contain the table
         *                      specified in @a result_table. If the collection
         *                      provided is non-existent, the collection will
         *                      be automatically created. If empty, then the
         *                      table will be a top-level table.  Additionally
         *                      this option is invalid if @a tableName is a
         *                      collection.
         *                              <li>
         *                      gpudb::aggregate_group_by_expression: Filter
         *                      expression to apply to the table prior to
         *                      computing the aggregate group by.
         *                              <li> gpudb::aggregate_group_by_having:
         *                      Filter expression to apply to the aggregated
         *                      results.
         *                              <li>
         *                      gpudb::aggregate_group_by_sort_order: String
         *                      indicating how the returned values should be
         *                      sorted - ascending or descending.
         *                      <ul>
         *                              <li>
         *                      gpudb::aggregate_group_by_ascending: Indicates
         *                      that the returned values should be sorted in
         *                      ascending order.
         *                              <li>
         *                      gpudb::aggregate_group_by_descending: Indicates
         *                      that the returned values should be sorted in
         *                      descending order.
         *                      </ul>
         *                      The default value is
         *                      gpudb::aggregate_group_by_ascending.
         *                              <li> gpudb::aggregate_group_by_sort_by:
         *                      String determining how the results are sorted.
         *                      <ul>
         *                              <li> gpudb::aggregate_group_by_key:
         *                      Indicates that the returned values should be
         *                      sorted by key, which corresponds to the
         *                      grouping columns. If you have multiple grouping
         *                      columns (and are sorting by key), it will first
         *                      sort the first grouping column, then the second
         *                      grouping column, etc.
         *                              <li> gpudb::aggregate_group_by_value:
         *                      Indicates that the returned values should be
         *                      sorted by value, which corresponds to the
         *                      aggregates. If you have multiple aggregates
         *                      (and are sorting by value), it will first sort
         *                      by the first aggregate, then the second
         *                      aggregate, etc.
         *                      </ul>
         *                      The default value is
         *                      gpudb::aggregate_group_by_key.
         *                              <li>
         *                      gpudb::aggregate_group_by_result_table: The
         *                      name of the table used to store the results.
         *                      Has the same naming restrictions as <a
         *                      href="../../concepts/tables.html"
         *                      target="_top">tables</a>. Column names
         *                      (group-by and aggregate fields) need to be
         *                      given aliases e.g. ["FChar256 as fchar256",
         *                      "sum(FDouble) as sfd"].  If present, no results
         *                      are returned in the response.  This option is
         *                      not available if one of the grouping attributes
         *                      is an unrestricted string (i.e.; not charN)
         *                      type.
         *                              <li>
         *                      gpudb::aggregate_group_by_result_table_persist:
         *                      If @a true, then the result table specified in
         *                      @a result_table will be persisted and will not
         *                      expire unless a @a ttl is specified.   If @a
         *                      false, then the result table will be an
         *                      in-memory table and will expire unless a @a ttl
         *                      is specified otherwise.
         *                      <ul>
         *                              <li> gpudb::aggregate_group_by_true
         *                              <li> gpudb::aggregate_group_by_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::aggregate_group_by_false.
         *                              <li>
         *                      gpudb::aggregate_group_by_result_table_force_replicated:
         *                      Force the result table to be replicated
         *                      (ignores any sharding). Must be used in
         *                      combination with the @a result_table option.
         *                              <li>
         *                      gpudb::aggregate_group_by_result_table_generate_pk:
         *                      If 'true' then set a primary key for the result
         *                      table. Must be used in combination with the @a
         *                      result_table option.
         *                              <li> gpudb::aggregate_group_by_ttl:
         *                      Sets the <a href="../../concepts/ttl.html"
         *                      target="_top">TTL</a> of the table specified in
         *                      @a result_table.
         *                              <li>
         *                      gpudb::aggregate_group_by_chunk_size: Indicates
         *                      the chunk size to be used for the result table.
         *                      Must be used in combination with the @a
         *                      result_table option.
         *                              <li>
         *                      gpudb::aggregate_group_by_materialize_on_gpu:
         *                      If @a true then the columns of the groupby
         *                      result table will be cached on the GPU. Must be
         *                      used in combination with the @a result_table
         *                      option.
         *                      <ul>
         *                              <li> gpudb::aggregate_group_by_true
         *                              <li> gpudb::aggregate_group_by_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::aggregate_group_by_false.
         *                      </ul>
         * 
         */
        AggregateGroupByRequest(const std::string& tableName_, const std::vector<std::string>& columnNames_, const int64_t offset_, const int64_t limit_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            columnNames( columnNames_ ),
            offset( offset_ ),
            limit( limit_ ),
            encoding( "binary" ),
            options( options_ )
        {
        }

        /**
         * Constructs an AggregateGroupByRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Name of the table on which the operation will
         *                        be performed. Must be an existing
         *                        table/view/collection.
         * @param[in] columnNames_  List of one or more column names,
         *                          expressions, and aggregate expressions.
         * @param[in] offset_  A positive integer indicating the number of
         *                     initial results to skip (this can be useful for
         *                     paging through the results).  The minimum
         *                     allowed value is 0. The maximum allowed value is
         *                     MAX_INT.
         * @param[in] limit_  A positive integer indicating the maximum number
         *                    of results to be returned Or END_OF_SET (-9999)
         *                    to indicate that the max number of results should
         *                    be returned.
         * @param[in] encoding_  Specifies the encoding for returned records.
         *                       <ul>
         *                               <li> gpudb::aggregate_group_by_binary:
         *                       Indicates that the returned records should be
         *                       binary encoded.
         *                               <li> gpudb::aggregate_group_by_json:
         *                       Indicates that the returned records should be
         *                       json encoded.
         *                       </ul>
         *                       The default value is
         *                       gpudb::aggregate_group_by_binary.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::aggregate_group_by_collection_name: Name
         *                      of a collection which is to contain the table
         *                      specified in @a result_table. If the collection
         *                      provided is non-existent, the collection will
         *                      be automatically created. If empty, then the
         *                      table will be a top-level table.  Additionally
         *                      this option is invalid if @a tableName is a
         *                      collection.
         *                              <li>
         *                      gpudb::aggregate_group_by_expression: Filter
         *                      expression to apply to the table prior to
         *                      computing the aggregate group by.
         *                              <li> gpudb::aggregate_group_by_having:
         *                      Filter expression to apply to the aggregated
         *                      results.
         *                              <li>
         *                      gpudb::aggregate_group_by_sort_order: String
         *                      indicating how the returned values should be
         *                      sorted - ascending or descending.
         *                      <ul>
         *                              <li>
         *                      gpudb::aggregate_group_by_ascending: Indicates
         *                      that the returned values should be sorted in
         *                      ascending order.
         *                              <li>
         *                      gpudb::aggregate_group_by_descending: Indicates
         *                      that the returned values should be sorted in
         *                      descending order.
         *                      </ul>
         *                      The default value is
         *                      gpudb::aggregate_group_by_ascending.
         *                              <li> gpudb::aggregate_group_by_sort_by:
         *                      String determining how the results are sorted.
         *                      <ul>
         *                              <li> gpudb::aggregate_group_by_key:
         *                      Indicates that the returned values should be
         *                      sorted by key, which corresponds to the
         *                      grouping columns. If you have multiple grouping
         *                      columns (and are sorting by key), it will first
         *                      sort the first grouping column, then the second
         *                      grouping column, etc.
         *                              <li> gpudb::aggregate_group_by_value:
         *                      Indicates that the returned values should be
         *                      sorted by value, which corresponds to the
         *                      aggregates. If you have multiple aggregates
         *                      (and are sorting by value), it will first sort
         *                      by the first aggregate, then the second
         *                      aggregate, etc.
         *                      </ul>
         *                      The default value is
         *                      gpudb::aggregate_group_by_key.
         *                              <li>
         *                      gpudb::aggregate_group_by_result_table: The
         *                      name of the table used to store the results.
         *                      Has the same naming restrictions as <a
         *                      href="../../concepts/tables.html"
         *                      target="_top">tables</a>. Column names
         *                      (group-by and aggregate fields) need to be
         *                      given aliases e.g. ["FChar256 as fchar256",
         *                      "sum(FDouble) as sfd"].  If present, no results
         *                      are returned in the response.  This option is
         *                      not available if one of the grouping attributes
         *                      is an unrestricted string (i.e.; not charN)
         *                      type.
         *                              <li>
         *                      gpudb::aggregate_group_by_result_table_persist:
         *                      If @a true, then the result table specified in
         *                      @a result_table will be persisted and will not
         *                      expire unless a @a ttl is specified.   If @a
         *                      false, then the result table will be an
         *                      in-memory table and will expire unless a @a ttl
         *                      is specified otherwise.
         *                      <ul>
         *                              <li> gpudb::aggregate_group_by_true
         *                              <li> gpudb::aggregate_group_by_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::aggregate_group_by_false.
         *                              <li>
         *                      gpudb::aggregate_group_by_result_table_force_replicated:
         *                      Force the result table to be replicated
         *                      (ignores any sharding). Must be used in
         *                      combination with the @a result_table option.
         *                              <li>
         *                      gpudb::aggregate_group_by_result_table_generate_pk:
         *                      If 'true' then set a primary key for the result
         *                      table. Must be used in combination with the @a
         *                      result_table option.
         *                              <li> gpudb::aggregate_group_by_ttl:
         *                      Sets the <a href="../../concepts/ttl.html"
         *                      target="_top">TTL</a> of the table specified in
         *                      @a result_table.
         *                              <li>
         *                      gpudb::aggregate_group_by_chunk_size: Indicates
         *                      the chunk size to be used for the result table.
         *                      Must be used in combination with the @a
         *                      result_table option.
         *                              <li>
         *                      gpudb::aggregate_group_by_materialize_on_gpu:
         *                      If @a true then the columns of the groupby
         *                      result table will be cached on the GPU. Must be
         *                      used in combination with the @a result_table
         *                      option.
         *                      <ul>
         *                              <li> gpudb::aggregate_group_by_true
         *                              <li> gpudb::aggregate_group_by_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::aggregate_group_by_false.
         *                      </ul>
         * 
         */
        AggregateGroupByRequest(const std::string& tableName_, const std::vector<std::string>& columnNames_, const int64_t offset_, const int64_t limit_, const std::string& encoding_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            columnNames( columnNames_ ),
            offset( offset_ ),
            limit( limit_ ),
            encoding( encoding_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::vector<std::string> columnNames;
        int64_t offset;
        int64_t limit;
        std::string encoding;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AggregateGroupByRequest>
    {
        static void encode(Encoder& e, const gpudb::AggregateGroupByRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.columnNames);
            ::avro::encode(e, v.offset);
            ::avro::encode(e, v.limit);
            ::avro::encode(e, v.encoding);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AggregateGroupByRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.columnNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.offset);
                            break;

                        case 3:
                            ::avro::decode(d, v.limit);
                            break;

                        case 4:
                            ::avro::decode(d, v.encoding);
                            break;

                        case 5:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.columnNames);
                ::avro::decode(d, v.offset);
                ::avro::decode(d, v.limit);
                ::avro::decode(d, v.encoding);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #aggregateGroupByRaw(const AggregateGroupByRequest&) const}.
     * <p>
     * Calculates unique combinations (groups) of values for the given columns
     * in a given table/view/collection and computes aggregates on each unique
     * combination. This is somewhat analogous to an SQL-style SELECT...GROUP
     * BY.
     * <p>
     * Any column(s) can be grouped on, and all column types except
     * unrestricted-length strings may be used for computing applicable
     * aggregates; columns marked as <a
     * href="../../concepts/types.html#data-handling"
     * target="_top">store-only</a> are unable to be used in grouping or
     * aggregation.
     * <p>
     * The results can be paged via the @a offset and @a limit parameters. For
     * example, to get 10 groups with the largest counts the inputs would be:
     * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
     * <p>
     * @a options can be used to customize behavior of this call e.g. filtering
     * or sorting the results.
     * <p>
     * To group by columns 'x' and 'y' and compute the number of objects within
     * each group, use:  column_names=['x','y','count(*)'].
     * <p>
     * To also compute the sum of 'z' over each group, use:
     * column_names=['x','y','count(*)','sum(z)'].
     * <p>
     * Available <a
     * href="../../concepts/expressions.html#aggregate-expressions"
     * target="_top">aggregation functions</a> are: count(*), sum, min, max,
     * avg, mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp,
     * arg_min, arg_max and count_distinct.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
     * documentation</a>.
     * <p>
     * If a @a result_table name is specified in the @a options, the results
     * are stored in a new table with that name--no results are returned in the
     * response.  Both the table name and resulting column names must adhere to
     * <a href="../../concepts/tables.html#table" target="_top">standard naming
     * conventions</a>; column/aggregation expressions will need to be aliased.
     * If the source table's <a href="../../concepts/tables.html#shard-keys"
     * target="_top">shard key</a> is used as the grouping column(s), the
     * result table will be sharded, in all other cases it will be replicated.
     * Sorting will properly function only if the result table is replicated or
     * if there is only one processing node and should not be relied upon in
     * other cases.  Not available when any of the values of @a columnNames is
     * an unrestricted-length string.
     */
    struct RawAggregateGroupByResponse
    {

        /**
         * Constructs a RawAggregateGroupByResponse object with default
         * parameter values.
         */
        RawAggregateGroupByResponse() :
            responseSchemaStr(std::string()),
            binaryEncodedResponse(std::vector<uint8_t>()),
            jsonEncodedResponse(std::string()),
            totalNumberOfRecords(int64_t()),
            hasMoreRecords(bool())
        {
        }

        std::string responseSchemaStr;
        std::vector<uint8_t> binaryEncodedResponse;
        std::string jsonEncodedResponse;
        int64_t totalNumberOfRecords;
        bool hasMoreRecords;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::RawAggregateGroupByResponse>
    {
        static void encode(Encoder& e, const gpudb::RawAggregateGroupByResponse& v)
        {
            ::avro::encode(e, v.responseSchemaStr);
            ::avro::encode(e, v.binaryEncodedResponse);
            ::avro::encode(e, v.jsonEncodedResponse);
            ::avro::encode(e, v.totalNumberOfRecords);
            ::avro::encode(e, v.hasMoreRecords);
        }

        static void decode(Decoder& d, gpudb::RawAggregateGroupByResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.responseSchemaStr);
                            break;

                        case 1:
                            ::avro::decode(d, v.binaryEncodedResponse);
                            break;

                        case 2:
                            ::avro::decode(d, v.jsonEncodedResponse);
                            break;

                        case 3:
                            ::avro::decode(d, v.totalNumberOfRecords);
                            break;

                        case 4:
                            ::avro::decode(d, v.hasMoreRecords);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.responseSchemaStr);
                ::avro::decode(d, v.binaryEncodedResponse);
                ::avro::decode(d, v.jsonEncodedResponse);
                ::avro::decode(d, v.totalNumberOfRecords);
                ::avro::decode(d, v.hasMoreRecords);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #aggregateGroupBy(const AggregateGroupByRequest&) const}.
     * <p>
     * Calculates unique combinations (groups) of values for the given columns
     * in a given table/view/collection and computes aggregates on each unique
     * combination. This is somewhat analogous to an SQL-style SELECT...GROUP
     * BY.
     * <p>
     * Any column(s) can be grouped on, and all column types except
     * unrestricted-length strings may be used for computing applicable
     * aggregates; columns marked as <a
     * href="../../concepts/types.html#data-handling"
     * target="_top">store-only</a> are unable to be used in grouping or
     * aggregation.
     * <p>
     * The results can be paged via the @a offset and @a limit parameters. For
     * example, to get 10 groups with the largest counts the inputs would be:
     * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
     * <p>
     * @a options can be used to customize behavior of this call e.g. filtering
     * or sorting the results.
     * <p>
     * To group by columns 'x' and 'y' and compute the number of objects within
     * each group, use:  column_names=['x','y','count(*)'].
     * <p>
     * To also compute the sum of 'z' over each group, use:
     * column_names=['x','y','count(*)','sum(z)'].
     * <p>
     * Available <a
     * href="../../concepts/expressions.html#aggregate-expressions"
     * target="_top">aggregation functions</a> are: count(*), sum, min, max,
     * avg, mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp,
     * arg_min, arg_max and count_distinct.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
     * documentation</a>.
     * <p>
     * If a @a result_table name is specified in the @a options, the results
     * are stored in a new table with that name--no results are returned in the
     * response.  Both the table name and resulting column names must adhere to
     * <a href="../../concepts/tables.html#table" target="_top">standard naming
     * conventions</a>; column/aggregation expressions will need to be aliased.
     * If the source table's <a href="../../concepts/tables.html#shard-keys"
     * target="_top">shard key</a> is used as the grouping column(s), the
     * result table will be sharded, in all other cases it will be replicated.
     * Sorting will properly function only if the result table is replicated or
     * if there is only one processing node and should not be relied upon in
     * other cases.  Not available when any of the values of @a columnNames is
     * an unrestricted-length string.
     */
    struct AggregateGroupByResponse
    {

        /**
         * Constructs an AggregateGroupByResponse object with default parameter
         * values.
         */
        AggregateGroupByResponse() :
            responseSchemaStr(std::string()),
            data(std::vector<gpudb::GenericRecord>()),
            totalNumberOfRecords(int64_t()),
            hasMoreRecords(bool())
        {
        }

        std::string responseSchemaStr;
        std::vector<gpudb::GenericRecord> data;
        int64_t totalNumberOfRecords;
        bool hasMoreRecords;
    };
}

#endif
