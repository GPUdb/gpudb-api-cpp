/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __DROP_SCHEMA_H__
#define __DROP_SCHEMA_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #dropSchema(const DropSchemaRequest&) const}.
     * <p>
     * Drops an existing SQL-style <a href="../../../concepts/schemas/"
     * target="_top">schema</a>, specified in @a schemaName.
     */
    struct DropSchemaRequest
    {

        /**
         * Constructs a DropSchemaRequest object with default parameter values.
         */
        DropSchemaRequest() :
            schemaName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a DropSchemaRequest object with the specified parameters.
         * 
         * @param[in] schemaName_  Name of the schema to be dropped. Must be an
         *                         existing schema.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::drop_schema_no_error_if_not_exists: If
         *                      @a true and if the schema specified in @a
         *                      schemaName does not exist, no error is
         *                      returned. If @a false and if the schema
         *                      specified in @a schemaName does not exist, then
         *                      an error is returned.
         *                      <ul>
         *                              <li> gpudb::drop_schema_true
         *                              <li> gpudb::drop_schema_false
         *                      </ul>
         *                      The default value is gpudb::drop_schema_false.
         *                              <li> gpudb::drop_schema_cascade: If @a
         *                      true, all tables within the schema will be
         *                      dropped. If @a false, the schema will be
         *                      dropped only if empty.
         *                      <ul>
         *                              <li> gpudb::drop_schema_true
         *                              <li> gpudb::drop_schema_false
         *                      </ul>
         *                      The default value is gpudb::drop_schema_false.
         *                      </ul>
         * 
         */
        DropSchemaRequest(const std::string& schemaName_, const std::map<std::string, std::string>& options_):
            schemaName( schemaName_ ),
            options( options_ )
        {
        }

        std::string schemaName;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::DropSchemaRequest>
    {
        static void encode(Encoder& e, const gpudb::DropSchemaRequest& v)
        {
            ::avro::encode(e, v.schemaName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::DropSchemaRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.schemaName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.schemaName);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #dropSchema(const DropSchemaRequest&) const}.
     * <p>
     * Drops an existing SQL-style <a href="../../../concepts/schemas/"
     * target="_top">schema</a>, specified in @a schemaName.
     */
    struct DropSchemaResponse
    {

        /**
         * Constructs a DropSchemaResponse object with default parameter
         * values.
         */
        DropSchemaResponse() :
            schemaName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string schemaName;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::DropSchemaResponse>
    {
        static void encode(Encoder& e, const gpudb::DropSchemaResponse& v)
        {
            ::avro::encode(e, v.schemaName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::DropSchemaResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.schemaName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.schemaName);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
