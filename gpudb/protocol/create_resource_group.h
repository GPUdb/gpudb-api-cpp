/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_RESOURCE_GROUP_H__
#define __CREATE_RESOURCE_GROUP_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #createResourceGroup(const CreateResourceGroupRequest&) const}.
     * <p>
     * Creates a new resource group to facilitate resource management.
     */
    struct CreateResourceGroupRequest
    {

        /**
         * Constructs a CreateResourceGroupRequest object with default
         * parameter values.
         */
        CreateResourceGroupRequest() :
            name(std::string()),
            tierAttributes(std::map<std::string, std::map<std::string, std::string> >()),
            tierStrategy(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateResourceGroupRequest object with the specified
         * parameters.
         * 
         * @param[in] name_  Name of the group to be created. Must contain only
         *                   letters, digits, and underscores, and cannot begin
         *                   with a digit. Must not match existing resource
         *                   group name.
         * @param[in] tierAttributes_  Optional map containing group limits for
         *                             tier-specific attributes such as memory.
         *                             <ul>
         *                                     <li>
         *                             gpudb::create_resource_group_max_memory:
         *                             Maximum amount of memory usable in the
         *                             given tier at one time for this group.
         *                             </ul>
         * @param[in] tierStrategy_  Optional array that defines the default
         *                           tiering strategy for this group. Each
         *                           element pair defines an existing tier and
         *                           its preferred priority. e.g. ['RAM
         *                           50',VRAM 30']
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::create_resource_group_max_cpu_concurrency:
         *                      Maximum number of simultaneous threads that
         *                      will be used to execute a request for this
         *                      group.
         *                              <li>
         *                      gpudb::create_resource_group_max_scheduling_priority:
         *                      Maximum priority of a scheduled task for this
         *                      group.
         *                              <li>
         *                      gpudb::create_resource_group_max_tier_priority:
         *                      Maximum priority of a tiered object for this
         *                      group.
         *                      </ul>
         * 
         */
        CreateResourceGroupRequest(const std::string& name_, const std::map<std::string, std::map<std::string, std::string> >& tierAttributes_, const std::vector<std::string>& tierStrategy_, const std::map<std::string, std::string>& options_):
            name( name_ ),
            tierAttributes( tierAttributes_ ),
            tierStrategy( tierStrategy_ ),
            options( options_ )
        {
        }

        std::string name;
        std::map<std::string, std::map<std::string, std::string> > tierAttributes;
        std::vector<std::string> tierStrategy;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateResourceGroupRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateResourceGroupRequest& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.tierAttributes);
            ::avro::encode(e, v.tierStrategy);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateResourceGroupRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.tierAttributes);
                            break;

                        case 2:
                            ::avro::decode(d, v.tierStrategy);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.tierAttributes);
                ::avro::decode(d, v.tierStrategy);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #createResourceGroup(const CreateResourceGroupRequest&) const}.
     * <p>
     * Creates a new resource group to facilitate resource management.
     */
    struct CreateResourceGroupResponse
    {

        /**
         * Constructs a CreateResourceGroupResponse object with default
         * parameter values.
         */
        CreateResourceGroupResponse() :
            name(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string name;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateResourceGroupResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateResourceGroupResponse& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateResourceGroupResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
