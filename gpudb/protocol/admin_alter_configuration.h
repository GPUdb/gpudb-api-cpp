/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_ALTER_CONFIGURATION_H__
#define __ADMIN_ALTER_CONFIGURATION_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #adminAlterConfiguration(const AdminAlterConfigurationRequest&) const}.
     * <p>
     * Update the system config file.  Updates to the config file are only
     * permitted when the system is stopped.
     */
    struct AdminAlterConfigurationRequest
    {

        /**
         * Constructs an AdminAlterConfigurationRequest object with default
         * parameter values.
         */
        AdminAlterConfigurationRequest() :
            configString(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminAlterConfigurationRequest object with the
         * specified parameters.
         * 
         * @param[in] configString_  updated contents of the config file.
         * @param[in] options_  Optional parameters.
         * 
         */
        AdminAlterConfigurationRequest(const std::string& configString_, const std::map<std::string, std::string>& options_):
            configString( configString_ ),
            options( options_ )
        {
        }

        std::string configString;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminAlterConfigurationRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminAlterConfigurationRequest& v)
        {
            ::avro::encode(e, v.configString);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminAlterConfigurationRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.configString);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.configString);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #adminAlterConfiguration(const AdminAlterConfigurationRequest&) const}.
     * <p>
     * Update the system config file.  Updates to the config file are only
     * permitted when the system is stopped.
     */
    struct AdminAlterConfigurationResponse
    {

        /**
         * Constructs an AdminAlterConfigurationResponse object with default
         * parameter values.
         */
        AdminAlterConfigurationResponse() :
            status(std::string())
        {
        }

        std::string status;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminAlterConfigurationResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminAlterConfigurationResponse& v)
        {
            ::avro::encode(e, v.status);
        }

        static void decode(Decoder& d, gpudb::AdminAlterConfigurationResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.status);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.status);
            }
        }
    };
}

#endif
