/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_ADD_RANKS_H__
#define __ADMIN_ADD_RANKS_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #adminAddRanks(const AdminAddRanksRequest&) const}.
     * <p>
     * Add one or more new ranks to the Kinetica cluster. The new ranks will
     * not contain any data initially, other than replicated tables, and not be
     * assigned any shards. To rebalance data across the cluster, which
     * includes shifting some shard key assignments to newly added ranks, see
     * {@link #adminRebalance(const AdminRebalanceRequest&) const}.
     * <p>
     * For example, if attempting to add three new ranks (two ranks on host
     * 172.123.45.67 and one rank on host 172.123.45.68) to a Kinetica cluster
     * with additional configuration parameters:
     * <p>
     * * @a hosts would be an array including 172.123.45.67 in the first two
     * indices (signifying two ranks being added to host 172.123.45.67) and
     * 172.123.45.68 in the last index (signifying one rank being added to host
     * 172.123.45.67)
     * <p>
     * * @a configParams would be an array of maps, with each map corresponding
     * to the ranks being added in @a hosts. The key of each map would be the
     * configuration parameter name and the value would be the parameter's
     * value, e.g. 'rank.gpu':'1'
     * <p>
     * This endpoint's processing includes copying all replicated table data to
     * the new rank(s) and therefore could take a long time. The API call may
     * time out if run directly.  It is recommended to run this endpoint
     * asynchronously via {@link
     * #createJob(const CreateJobRequest&) const}.
     */
    struct AdminAddRanksRequest
    {

        /**
         * Constructs an AdminAddRanksRequest object with default parameter
         * values.
         */
        AdminAddRanksRequest() :
            hosts(std::vector<std::string>()),
            configParams(std::vector<std::map<std::string, std::string> >()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminAddRanksRequest object with the specified
         * parameters.
         * 
         * @param[in] hosts_  The IP address of each rank being added to the
         *                    cluster. Insert one entry per rank, even if they
         *                    are on the same host. The order of the hosts in
         *                    the array only matters as it relates to the @a
         *                    configParams.
         * @param[in] configParams_  Configuration parameters to apply to the
         *                           new ranks, e.g., which GPU to use.
         *                           Configuration parameters that start with
         *                           'rankN.', where N is the rank number,
         *                           should omit the N, as the new rank
         *                           number(s) are not allocated until the
         *                           ranks are created. Each entry in this
         *                           array corresponds to the entry at the same
         *                           array index in the @a hosts. This array
         *                           must either be completely empty or have
         *                           the same number of elements as the hosts
         *                           array.  An empty array will result in the
         *                           new ranks being set only with default
         *                           parameters.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> gpudb::admin_add_ranks_dry_run: If
         *                      @a true, only validation checks will be
         *                      performed. No ranks are added.
         *                      <ul>
         *                              <li> gpudb::admin_add_ranks_true
         *                              <li> gpudb::admin_add_ranks_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::admin_add_ranks_false.
         *                      </ul>
         * 
         */
        AdminAddRanksRequest(const std::vector<std::string>& hosts_, const std::vector<std::map<std::string, std::string> >& configParams_, const std::map<std::string, std::string>& options_):
            hosts( hosts_ ),
            configParams( configParams_ ),
            options( options_ )
        {
        }

        std::vector<std::string> hosts;
        std::vector<std::map<std::string, std::string> > configParams;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminAddRanksRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminAddRanksRequest& v)
        {
            ::avro::encode(e, v.hosts);
            ::avro::encode(e, v.configParams);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminAddRanksRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.hosts);
                            break;

                        case 1:
                            ::avro::decode(d, v.configParams);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.hosts);
                ::avro::decode(d, v.configParams);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #adminAddRanks(const AdminAddRanksRequest&) const}.
     * <p>
     * Add one or more new ranks to the Kinetica cluster. The new ranks will
     * not contain any data initially, other than replicated tables, and not be
     * assigned any shards. To rebalance data across the cluster, which
     * includes shifting some shard key assignments to newly added ranks, see
     * {@link #adminRebalance(const AdminRebalanceRequest&) const}.
     * <p>
     * For example, if attempting to add three new ranks (two ranks on host
     * 172.123.45.67 and one rank on host 172.123.45.68) to a Kinetica cluster
     * with additional configuration parameters:
     * <p>
     * * @a hosts would be an array including 172.123.45.67 in the first two
     * indices (signifying two ranks being added to host 172.123.45.67) and
     * 172.123.45.68 in the last index (signifying one rank being added to host
     * 172.123.45.67)
     * <p>
     * * @a configParams would be an array of maps, with each map corresponding
     * to the ranks being added in @a hosts. The key of each map would be the
     * configuration parameter name and the value would be the parameter's
     * value, e.g. 'rank.gpu':'1'
     * <p>
     * This endpoint's processing includes copying all replicated table data to
     * the new rank(s) and therefore could take a long time. The API call may
     * time out if run directly.  It is recommended to run this endpoint
     * asynchronously via {@link
     * #createJob(const CreateJobRequest&) const}.
     */
    struct AdminAddRanksResponse
    {

        /**
         * Constructs an AdminAddRanksResponse object with default parameter
         * values.
         */
        AdminAddRanksResponse() :
            addedRanks(std::vector<int32_t>()),
            results(std::vector<std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        std::vector<int32_t> addedRanks;
        std::vector<std::string> results;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminAddRanksResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminAddRanksResponse& v)
        {
            ::avro::encode(e, v.addedRanks);
            ::avro::encode(e, v.results);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AdminAddRanksResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.addedRanks);
                            break;

                        case 1:
                            ::avro::decode(d, v.results);
                            break;

                        case 2:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.addedRanks);
                ::avro::decode(d, v.results);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
