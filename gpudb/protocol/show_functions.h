/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_FUNCTIONS_H__
#define __SHOW_FUNCTIONS_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #showFunctions(const ShowFunctionsRequest&) const}.
     * <p>
     * @private
     */
    struct ShowFunctionsRequest
    {

        /**
         * @private
         * Constructs a ShowFunctionsRequest object with default parameter
         * values.
         */
        ShowFunctionsRequest() :
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * @private
         * Constructs a ShowFunctionsRequest object with the specified
         * parameters.
         * 
         * @param[in] options_
         *                      <ul>
         *                              <li> gpudb::show_functions_properties
         *                      </ul>
         * 
         */
        ShowFunctionsRequest(const std::map<std::string, std::string>& options_):
            options( options_ )
        {
        }

        std::map<std::string, std::string> options;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::ShowFunctionsRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowFunctionsRequest& v)
        {
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowFunctionsRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #showFunctions(const ShowFunctionsRequest&) const}.
     * <p>
     * @private
     */
    struct ShowFunctionsResponse
    {

        /**
         * @private
         * Constructs a ShowFunctionsResponse object with default parameter
         * values.
         */
        ShowFunctionsResponse() :
            functionNames(std::vector<std::string>()),
            returnTypes(std::vector<std::string>()),
            parameters(std::vector<std::vector<std::string> >()),
            optionalParameterCount(std::vector<int32_t>()),
            flags(std::vector<int32_t>()),
            info(std::map<std::string, std::string>())
        {
        }

        std::vector<std::string> functionNames;
        std::vector<std::string> returnTypes;
        std::vector<std::vector<std::string> > parameters;
        std::vector<int32_t> optionalParameterCount;
        std::vector<int32_t> flags;
        std::map<std::string, std::string> info;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::ShowFunctionsResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowFunctionsResponse& v)
        {
            ::avro::encode(e, v.functionNames);
            ::avro::encode(e, v.returnTypes);
            ::avro::encode(e, v.parameters);
            ::avro::encode(e, v.optionalParameterCount);
            ::avro::encode(e, v.flags);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowFunctionsResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.functionNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.returnTypes);
                            break;

                        case 2:
                            ::avro::decode(d, v.parameters);
                            break;

                        case 3:
                            ::avro::decode(d, v.optionalParameterCount);
                            break;

                        case 4:
                            ::avro::decode(d, v.flags);
                            break;

                        case 5:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.functionNames);
                ::avro::decode(d, v.returnTypes);
                ::avro::decode(d, v.parameters);
                ::avro::decode(d, v.optionalParameterCount);
                ::avro::decode(d, v.flags);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
