/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_TABLE_MONITOR_H__
#define __CREATE_TABLE_MONITOR_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #createTableMonitor(const CreateTableMonitorRequest&) const}.
     * <p>
     * Creates a monitor that watches for a single table modification event
     * type (insert, update, or delete) on a particular table (identified by
     * @a tableName) and forwards event notifications to subscribers via ZMQ.
     * After this call completes, subscribe to the returned @a topicId on the
     * ZMQ table monitor port (default 9002). Each time an operation of the
     * given type
     * on the table completes, a multipart message is published for that topic;
     * the
     * first part contains only the topic ID, and each subsequent part contains
     * one
     * binary-encoded Avro object that corresponds to the event and can be
     * decoded
     * using @a typeSchema. The monitor will continue to run (regardless of
     * whether or not there are any subscribers) until deactivated with
     * {@link #clearTableMonitor(const ClearTableMonitorRequest&) const}.
     * <p>
     * For more information on table monitors, see
     * <a href="../../concepts/table_monitors.html" target="_top">Table
     * Monitors</a>.
     */
    struct CreateTableMonitorRequest
    {

        /**
         * Constructs a CreateTableMonitorRequest object with default parameter
         * values.
         */
        CreateTableMonitorRequest() :
            tableName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateTableMonitorRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Name of the table to monitor. Must not refer
         *                        to a collection.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> gpudb::create_table_monitor_event:
         *                      Type of modification event on the target table
         *                      to be monitored by this table monitor.
         *                      <ul>
         *                              <li>
         *                      gpudb::create_table_monitor_insert: Get
         *                      notifications of new record insertions. The new
         *                      row images are forwarded to the subscribers.
         *                              <li>
         *                      gpudb::create_table_monitor_update: Get
         *                      notifications of update operations. The
         *                      modified row count information is forwarded to
         *                      the subscribers.
         *                              <li>
         *                      gpudb::create_table_monitor_delete: Get
         *                      notifications of delete operations. The deleted
         *                      row count information is forwarded to the
         *                      subscribers.
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_table_monitor_insert.
         *                      </ul>
         * 
         */
        CreateTableMonitorRequest(const std::string& tableName_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateTableMonitorRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateTableMonitorRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateTableMonitorRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #createTableMonitor(const CreateTableMonitorRequest&) const}.
     * <p>
     * Creates a monitor that watches for a single table modification event
     * type (insert, update, or delete) on a particular table (identified by
     * @a tableName) and forwards event notifications to subscribers via ZMQ.
     * After this call completes, subscribe to the returned @a topicId on the
     * ZMQ table monitor port (default 9002). Each time an operation of the
     * given type
     * on the table completes, a multipart message is published for that topic;
     * the
     * first part contains only the topic ID, and each subsequent part contains
     * one
     * binary-encoded Avro object that corresponds to the event and can be
     * decoded
     * using @a typeSchema. The monitor will continue to run (regardless of
     * whether or not there are any subscribers) until deactivated with
     * {@link #clearTableMonitor(const ClearTableMonitorRequest&) const}.
     * <p>
     * For more information on table monitors, see
     * <a href="../../concepts/table_monitors.html" target="_top">Table
     * Monitors</a>.
     */
    struct CreateTableMonitorResponse
    {

        /**
         * Constructs a CreateTableMonitorResponse object with default
         * parameter values.
         */
        CreateTableMonitorResponse() :
            topicId(std::string()),
            tableName(std::string()),
            typeSchema(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string topicId;
        std::string tableName;
        std::string typeSchema;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateTableMonitorResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateTableMonitorResponse& v)
        {
            ::avro::encode(e, v.topicId);
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.typeSchema);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateTableMonitorResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.topicId);
                            break;

                        case 1:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 2:
                            ::avro::decode(d, v.typeSchema);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.topicId);
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.typeSchema);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
