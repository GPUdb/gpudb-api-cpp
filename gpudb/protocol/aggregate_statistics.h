/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __AGGREGATE_STATISTICS_H__
#define __AGGREGATE_STATISTICS_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #aggregateStatistics(const AggregateStatisticsRequest&) const}.
     * <p>
     * Calculates the requested statistics of the given column(s) in a given
     * table.
     * <p>
     * The available statistics are @a count (number of total objects), @a
     * mean, @a stdv (standard deviation), @a variance, @a skew, @a kurtosis,
     * @a sum, @a min, @a max, @a weighted_average, @a cardinality (unique
     * count), @a estimated_cardinality, @a percentile and @a percentile_rank.
     * <p>
     * Estimated cardinality is calculated by using the hyperloglog
     * approximation technique.
     * <p>
     * Percentiles and percentile ranks are approximate and are calculated
     * using the t-digest algorithm. They must include the desired @a
     * percentile/@a percentile_rank. To compute multiple percentiles each
     * value must be specified separately (i.e.
     * 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
     * <p>
     * A second, comma-separated value can be added to the @a percentile
     * statistic to calculate percentile resolution, e.g., a 50th percentile
     * with 200 resolution would be 'percentile(50,200)'.
     * <p>
     * The weighted average statistic requires a @a weight_column_name to be
     * specified in @a options. The weighted average is then defined as the sum
     * of the products of @a columnName times the @a weight_column_name values
     * divided by the sum of the @a weight_column_name values.
     * <p>
     * Additional columns can be used in the calculation of statistics via the
     * @a additional_column_names option.  Values in these columns will be
     * included in the overall aggregate calculation--individual aggregates
     * will not be calculated per additional column.  For instance, requesting
     * the @a count & @a mean of @a columnName x and @a additional_column_names
     * y & z, where x holds the numbers 1-10, y holds 11-20, and z holds 21-30,
     * would return the total number of x, y, & z values (30), and the single
     * average value across all x, y, & z values (15.5).
     * <p>
     * The response includes a list of key/value pairs of each statistic
     * requested and its corresponding value.
     */
    struct AggregateStatisticsRequest
    {

        /**
         * Constructs an AggregateStatisticsRequest object with default
         * parameter values.
         */
        AggregateStatisticsRequest() :
            tableName(std::string()),
            columnName(std::string()),
            stats(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AggregateStatisticsRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Name of the table on which the statistics
         *                        operation will be performed.
         * @param[in] columnName_  Name of the primary column for which the
         *                         statistics are to be calculated.
         * @param[in] stats_  Comma separated list of the statistics to
         *                    calculate, e.g. "sum,mean".
         *                    <ul>
         *                            <li> gpudb::aggregate_statistics_count:
         *                    Number of objects (independent of the given
         *                    column(s)).
         *                            <li> gpudb::aggregate_statistics_mean:
         *                    Arithmetic mean (average), equivalent to
         *                    sum/count.
         *                            <li> gpudb::aggregate_statistics_stdv:
         *                    Sample standard deviation (denominator is
         *                    count-1).
         *                            <li>
         *                    gpudb::aggregate_statistics_variance: Unbiased
         *                    sample variance (denominator is count-1).
         *                            <li> gpudb::aggregate_statistics_skew:
         *                    Skewness (third standardized moment).
         *                            <li>
         *                    gpudb::aggregate_statistics_kurtosis: Kurtosis
         *                    (fourth standardized moment).
         *                            <li> gpudb::aggregate_statistics_sum: Sum
         *                    of all values in the column(s).
         *                            <li> gpudb::aggregate_statistics_min:
         *                    Minimum value of the column(s).
         *                            <li> gpudb::aggregate_statistics_max:
         *                    Maximum value of the column(s).
         *                            <li>
         *                    gpudb::aggregate_statistics_weighted_average:
         *                    Weighted arithmetic mean (using the option @a
         *                    weight_column_name as the weighting column).
         *                            <li>
         *                    gpudb::aggregate_statistics_cardinality: Number
         *                    of unique values in the column(s).
         *                            <li>
         *                    gpudb::aggregate_statistics_estimated_cardinality:
         *                    Estimate (via hyperloglog technique) of the
         *                    number of unique values in the column(s).
         *                            <li>
         *                    gpudb::aggregate_statistics_percentile: Estimate
         *                    (via t-digest) of the given percentile of the
         *                    column(s) (percentile(50.0) will be an
         *                    approximation of the median). Add a second,
         *                    comma-separated value to calculate percentile
         *                    resolution, e.g., 'percentile(75,150)'
         *                            <li>
         *                    gpudb::aggregate_statistics_percentile_rank:
         *                    Estimate (via t-digest) of the percentile rank of
         *                    the given value in the column(s) (if the given
         *                    value is the median of the column(s),
         *                    percentile_rank(<median>) will return
         *                    approximately 50.0).
         *                    </ul>
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::aggregate_statistics_additional_column_names:
         *                      A list of comma separated column names over
         *                      which statistics can be accumulated along with
         *                      the primary column.  All columns listed and @a
         *                      columnName must be of the same type.  Must not
         *                      include the column specified in @a columnName
         *                      and no column can be listed twice.
         *                              <li>
         *                      gpudb::aggregate_statistics_weight_column_name:
         *                      Name of column used as weighting attribute for
         *                      the weighted average statistic.
         *                      </ul>
         * 
         */
        AggregateStatisticsRequest(const std::string& tableName_, const std::string& columnName_, const std::string& stats_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            columnName( columnName_ ),
            stats( stats_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::string columnName;
        std::string stats;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AggregateStatisticsRequest>
    {
        static void encode(Encoder& e, const gpudb::AggregateStatisticsRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.columnName);
            ::avro::encode(e, v.stats);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AggregateStatisticsRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.columnName);
                            break;

                        case 2:
                            ::avro::decode(d, v.stats);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.columnName);
                ::avro::decode(d, v.stats);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #aggregateStatistics(const AggregateStatisticsRequest&) const}.
     * <p>
     * Calculates the requested statistics of the given column(s) in a given
     * table.
     * <p>
     * The available statistics are @a count (number of total objects), @a
     * mean, @a stdv (standard deviation), @a variance, @a skew, @a kurtosis,
     * @a sum, @a min, @a max, @a weighted_average, @a cardinality (unique
     * count), @a estimated_cardinality, @a percentile and @a percentile_rank.
     * <p>
     * Estimated cardinality is calculated by using the hyperloglog
     * approximation technique.
     * <p>
     * Percentiles and percentile ranks are approximate and are calculated
     * using the t-digest algorithm. They must include the desired @a
     * percentile/@a percentile_rank. To compute multiple percentiles each
     * value must be specified separately (i.e.
     * 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
     * <p>
     * A second, comma-separated value can be added to the @a percentile
     * statistic to calculate percentile resolution, e.g., a 50th percentile
     * with 200 resolution would be 'percentile(50,200)'.
     * <p>
     * The weighted average statistic requires a @a weight_column_name to be
     * specified in @a options. The weighted average is then defined as the sum
     * of the products of @a columnName times the @a weight_column_name values
     * divided by the sum of the @a weight_column_name values.
     * <p>
     * Additional columns can be used in the calculation of statistics via the
     * @a additional_column_names option.  Values in these columns will be
     * included in the overall aggregate calculation--individual aggregates
     * will not be calculated per additional column.  For instance, requesting
     * the @a count & @a mean of @a columnName x and @a additional_column_names
     * y & z, where x holds the numbers 1-10, y holds 11-20, and z holds 21-30,
     * would return the total number of x, y, & z values (30), and the single
     * average value across all x, y, & z values (15.5).
     * <p>
     * The response includes a list of key/value pairs of each statistic
     * requested and its corresponding value.
     */
    struct AggregateStatisticsResponse
    {

        /**
         * Constructs an AggregateStatisticsResponse object with default
         * parameter values.
         */
        AggregateStatisticsResponse() :
            stats(std::map<std::string, double>()),
            info(std::map<std::string, std::string>())
        {
        }

        std::map<std::string, double> stats;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AggregateStatisticsResponse>
    {
        static void encode(Encoder& e, const gpudb::AggregateStatisticsResponse& v)
        {
            ::avro::encode(e, v.stats);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AggregateStatisticsResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.stats);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.stats);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
