/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_TRIGGER_BY_RANGE_H__
#define __CREATE_TRIGGER_BY_RANGE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #createTriggerByRange(const CreateTriggerByRangeRequest&) const}.
     * <p>
     * Sets up a simple range trigger for a column_name for one or more tables.
     * Once the trigger has been activated, any record added to the listed
     * tables(s) via {@link
     * #insertRecordsRaw(const RawInsertRecordsRequest&) const} with the
     * chosen column_name's value falling within the specified range will trip
     * the trigger. All such records will be queued at GPUdb's trigger port-by
     * default '9001' but can also be obtained via {@link
     * #showSystemStatus(const ShowSystemStatusRequest&) const}-for any
     * listening client to collect. Active triggers can be cancelled by using
     * the {@link #clearTrigger(const ClearTriggerRequest&) const} endpoint
     * or by clearing all relevant tables.
     * <p>
     * The output returns the trigger handle as well as indicating success or
     * failure of the trigger activation.
     */
    struct CreateTriggerByRangeRequest
    {

        /**
         * Constructs a CreateTriggerByRangeRequest object with default
         * parameter values.
         */
        CreateTriggerByRangeRequest() :
            requestId(std::string()),
            tableNames(std::vector<std::string>()),
            columnName(std::string()),
            min(double()),
            max(double()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateTriggerByRangeRequest object with the specified
         * parameters.
         * 
         * @param[in] requestId_  ID for the trigger request.
         * @param[in] tableNames_  Tables on which the trigger will be active.
         * @param[in] columnName_  Name of a numeric column_name on which the
         *                         trigger is activated.
         * @param[in] min_  The lower bound (inclusive) for the trigger range.
         * @param[in] max_  The upper bound (inclusive) for the trigger range.
         * @param[in] options_  Optional parameters.  Default value is an empty
         *                      std::map.
         * 
         */
        CreateTriggerByRangeRequest(const std::string& requestId_, const std::vector<std::string>& tableNames_, const std::string& columnName_, const double min_, const double max_, const std::map<std::string, std::string>& options_):
            requestId( requestId_ ),
            tableNames( tableNames_ ),
            columnName( columnName_ ),
            min( min_ ),
            max( max_ ),
            options( options_ )
        {
        }

        std::string requestId;
        std::vector<std::string> tableNames;
        std::string columnName;
        double min;
        double max;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateTriggerByRangeRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateTriggerByRangeRequest& v)
        {
            ::avro::encode(e, v.requestId);
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.columnName);
            ::avro::encode(e, v.min);
            ::avro::encode(e, v.max);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateTriggerByRangeRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.requestId);
                            break;

                        case 1:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.columnName);
                            break;

                        case 3:
                            ::avro::decode(d, v.min);
                            break;

                        case 4:
                            ::avro::decode(d, v.max);
                            break;

                        case 5:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.requestId);
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.columnName);
                ::avro::decode(d, v.min);
                ::avro::decode(d, v.max);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #createTriggerByRange(const CreateTriggerByRangeRequest&) const}.
     * <p>
     * Sets up a simple range trigger for a column_name for one or more tables.
     * Once the trigger has been activated, any record added to the listed
     * tables(s) via {@link
     * #insertRecordsRaw(const RawInsertRecordsRequest&) const} with the
     * chosen column_name's value falling within the specified range will trip
     * the trigger. All such records will be queued at GPUdb's trigger port-by
     * default '9001' but can also be obtained via {@link
     * #showSystemStatus(const ShowSystemStatusRequest&) const}-for any
     * listening client to collect. Active triggers can be cancelled by using
     * the {@link #clearTrigger(const ClearTriggerRequest&) const} endpoint
     * or by clearing all relevant tables.
     * <p>
     * The output returns the trigger handle as well as indicating success or
     * failure of the trigger activation.
     */
    struct CreateTriggerByRangeResponse
    {

        /**
         * Constructs a CreateTriggerByRangeResponse object with default
         * parameter values.
         */
        CreateTriggerByRangeResponse() :
            triggerId(std::string())
        {
        }

        std::string triggerId;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateTriggerByRangeResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateTriggerByRangeResponse& v)
        {
            ::avro::encode(e, v.triggerId);
        }

        static void decode(Decoder& d, gpudb::CreateTriggerByRangeResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.triggerId);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.triggerId);
            }
        }
    };
}

#endif
