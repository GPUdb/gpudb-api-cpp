/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_JOIN_TABLE_H__
#define __CREATE_JOIN_TABLE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #createJoinTable(const CreateJoinTableRequest&) const}.
     * <p>
     * Creates a table that is the result of a SQL JOIN.  For details see: <a
     * href="../../concepts/joins.html" target="_top">join concept
     * documentation</a>.
     */
    struct CreateJoinTableRequest
    {

        /**
         * Constructs a CreateJoinTableRequest object with default parameter
         * values.
         */
        CreateJoinTableRequest() :
            joinTableName(std::string()),
            tableNames(std::vector<std::string>()),
            columnNames(std::vector<std::string>()),
            expressions(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateJoinTableRequest object with the specified
         * parameters.
         * 
         * @param[in] joinTableName_  Name of the join table to be created.
         *                            Has the same naming restrictions as <a
         *                            href="../../concepts/tables.html"
         *                            target="_top">tables</a>.
         * @param[in] tableNames_  The list of table names composing the join.
         *                         Corresponds to a SQL statement FROM clause
         * @param[in] columnNames_  List of member table columns or column
         *                          expressions to be included in the join.
         *                          Columns can be prefixed with
         *                          'table_id.column_name', where 'table_id' is
         *                          the table name or alias.  Columns can be
         *                          aliased via the syntax 'column_name as
         *                          alias'. Wild cards '*' can be used to
         *                          include all columns across member tables or
         *                          'table_id.*' for all of a single table's
         *                          columns.  Columns and column expressions
         *                          comprising the join must be uniquely named
         *                          or aliased--therefore, the '*' wild card
         *                          cannot be used if column names aren't
         *                          unique across all tables.
         * @param[in] expressions_  An optional list of expressions to combine
         *                          and filter the joined tables.  Corresponds
         *                          to a SQL statement WHERE clause. For
         *                          details see: <a
         *                          href="../../concepts/expressions.html"
         *                          target="_top">expressions</a>.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::create_join_table_collection_name: Name
         *                      of a collection which is to contain the join.
         *                      If the collection provided is non-existent, the
         *                      collection will be automatically created. If
         *                      empty, then the join will be at the top level.
         *                              <li>
         *                      gpudb::create_join_table_max_query_dimensions:
         *                      The maximum number of tables in a join that can
         *                      be accessed by a query and are not equated by a
         *                      foreign-key to primary-key equality predicate
         *                              <li>
         *                      gpudb::create_join_table_optimize_lookups: Use
         *                      more memory to speed up the joining of tables.
         *                      <ul>
         *                              <li> gpudb::create_join_table_true
         *                              <li> gpudb::create_join_table_false
         *                      </ul>
         *                              <li>
         *                      gpudb::create_join_table_refresh_method: Method
         *                      by which the join can be refreshed when the
         *                      data in underlying member tables have changed.
         *                      <ul>
         *                              <li> gpudb::create_join_table_manual:
         *                      refresh only occurs when manually requested by
         *                      calling this endpoint with refresh option set
         *                      to @a refresh or @a full_refresh
         *                              <li> gpudb::create_join_table_on_query:
         *                      incrementally refresh (refresh just those
         *                      records added) whenever a new query is issued
         *                      and new data is inserted into the base table.
         *                      A full refresh of all the records occurs when a
         *                      new query is issued and there have been inserts
         *                      to any non-base-tables since the last query
         *                              <li>
         *                      gpudb::create_join_table_on_insert:
         *                      incrementally refresh (refresh just those
         *                      records added) whenever new data is inserted
         *                      into a base table.  A full refresh of all the
         *                      records occurs when a new query is issued and
         *                      there have been inserts to any non-base-tables
         *                      since the last query
         *                      </ul>
         *                              <li> gpudb::create_join_table_refresh:
         *                      Do a manual refresh of the join if it exists -
         *                      throws an error otherwise
         *                      <ul>
         *                              <li>
         *                      gpudb::create_join_table_no_refresh: don't
         *                      refresh
         *                              <li> gpudb::create_join_table_refresh:
         *                      incrementally refresh (refresh just those
         *                      records added) if new data has been inserted
         *                      into the base table.  A full refresh of all the
         *                      records occurs if there have been inserts to
         *                      any non-base-tables since the last refresh
         *                              <li>
         *                      gpudb::create_join_table_full_refresh: always
         *                      refresh even if no new records have been added.
         *                      Only refresh method guaranteed to do a full
         *                      refresh (refresh all the records) if a delete
         *                      or update has occurred since the last refresh.
         *                      </ul>
         *                              <li> gpudb::create_join_table_ttl: Sets
         *                      the TTL of the table specified in @a
         *                      joinTableName. The value must be the desired
         *                      TTL in minutes.
         *                      </ul>
         * 
         */
        CreateJoinTableRequest(const std::string& joinTableName_, const std::vector<std::string>& tableNames_, const std::vector<std::string>& columnNames_, const std::vector<std::string>& expressions_, const std::map<std::string, std::string>& options_):
            joinTableName( joinTableName_ ),
            tableNames( tableNames_ ),
            columnNames( columnNames_ ),
            expressions( expressions_ ),
            options( options_ )
        {
        }

        std::string joinTableName;
        std::vector<std::string> tableNames;
        std::vector<std::string> columnNames;
        std::vector<std::string> expressions;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateJoinTableRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateJoinTableRequest& v)
        {
            ::avro::encode(e, v.joinTableName);
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.columnNames);
            ::avro::encode(e, v.expressions);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateJoinTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.joinTableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.columnNames);
                            break;

                        case 3:
                            ::avro::decode(d, v.expressions);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.joinTableName);
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.columnNames);
                ::avro::decode(d, v.expressions);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #createJoinTable(const CreateJoinTableRequest&) const}.
     * <p>
     * Creates a table that is the result of a SQL JOIN.  For details see: <a
     * href="../../concepts/joins.html" target="_top">join concept
     * documentation</a>.
     */
    struct CreateJoinTableResponse
    {

        /**
         * Constructs a CreateJoinTableResponse object with default parameter
         * values.
         */
        CreateJoinTableResponse() :
            joinTableName(std::string()),
            count(int64_t())
        {
        }

        std::string joinTableName;
        int64_t count;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateJoinTableResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateJoinTableResponse& v)
        {
            ::avro::encode(e, v.joinTableName);
            ::avro::encode(e, v.count);
        }

        static void decode(Decoder& d, gpudb::CreateJoinTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.joinTableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.count);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.joinTableName);
                ::avro::decode(d, v.count);
            }
        }
    };
}

#endif
