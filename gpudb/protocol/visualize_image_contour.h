/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __VISUALIZE_IMAGE_CONTOUR_H__
#define __VISUALIZE_IMAGE_CONTOUR_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #visualizeImageContour(const VisualizeImageContourRequest&) const}.
     * <p>
     * @private
     */
    struct VisualizeImageContourRequest
    {

        /**
         * @private
         * Constructs a VisualizeImageContourRequest object with default
         * parameter values.
         */
        VisualizeImageContourRequest() :
            tableNames(std::vector<std::string>()),
            xColumnName(std::string()),
            yColumnName(std::string()),
            valueColumnName(std::string()),
            minX(double()),
            maxX(double()),
            minY(double()),
            maxY(double()),
            width(int32_t()),
            height(int32_t()),
            projection(std::string()),
            styleOptions(std::map<std::string, std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * @private
         * Constructs a VisualizeImageContourRequest object with the specified
         * parameters.
         * 
         * @param[in] tableNames_
         * @param[in] xColumnName_
         * @param[in] yColumnName_
         * @param[in] valueColumnName_
         * @param[in] minX_
         * @param[in] maxX_
         * @param[in] minY_
         * @param[in] maxY_
         * @param[in] width_
         * @param[in] height_
         * @param[in] projection_
         *                         <ul>
         *                                 <li>
         *                         gpudb::visualize_image_contour_3857
         *                                 <li>
         *                         gpudb::visualize_image_contour_102100
         *                                 <li>
         *                         gpudb::visualize_image_contour_900913
         *                                 <li>
         *                         gpudb::visualize_image_contour_EPSG_4326
         *                                 <li>
         *                         gpudb::visualize_image_contour_PLATE_CARREE
         *                                 <li>
         *                         gpudb::visualize_image_contour_EPSG_900913
         *                                 <li>
         *                         gpudb::visualize_image_contour_EPSG_102100
         *                                 <li>
         *                         gpudb::visualize_image_contour_EPSG_3857
         *                                 <li>
         *                         gpudb::visualize_image_contour_WEB_MERCATOR
         *                         </ul>
         *                         The default value is
         *                         gpudb::visualize_image_contour_PLATE_CARREE.
         * @param[in] styleOptions_
         *                           <ul>
         *                                   <li>
         *                           gpudb::visualize_image_contour_line_size:
         *                           The default value is '3'.
         *                                   <li>
         *                           gpudb::visualize_image_contour_color:
         *                           The default value is 'FF696969'.
         *                                   <li>
         *                           gpudb::visualize_image_contour_bg_color:
         *                           The default value is '00000000'.
         *                                   <li>
         *                           gpudb::visualize_image_contour_text_color:
         *                           The default value is 'FF000000'.
         *                                   <li>
         *                           gpudb::visualize_image_contour_colormap:
         *                           <ul>
         *                                   <li>
         *                           gpudb::visualize_image_contour_jet
         *                                   <li>
         *                           gpudb::visualize_image_contour_accent
         *                                   <li>
         *                           gpudb::visualize_image_contour_afmhot
         *                                   <li>
         *                           gpudb::visualize_image_contour_autumn
         *                                   <li>
         *                           gpudb::visualize_image_contour_binary
         *                                   <li>
         *                           gpudb::visualize_image_contour_blues
         *                                   <li>
         *                           gpudb::visualize_image_contour_bone
         *                                   <li>
         *                           gpudb::visualize_image_contour_brbg
         *                                   <li>
         *                           gpudb::visualize_image_contour_brg
         *                                   <li>
         *                           gpudb::visualize_image_contour_bugn
         *                                   <li>
         *                           gpudb::visualize_image_contour_bupu
         *                                   <li>
         *                           gpudb::visualize_image_contour_bwr
         *                                   <li>
         *                           gpudb::visualize_image_contour_cmrmap
         *                                   <li>
         *                           gpudb::visualize_image_contour_cool
         *                                   <li>
         *                           gpudb::visualize_image_contour_coolwarm
         *                                   <li>
         *                           gpudb::visualize_image_contour_copper
         *                                   <li>
         *                           gpudb::visualize_image_contour_cubehelix
         *                                   <li>
         *                           gpudb::visualize_image_contour_dark2
         *                                   <li>
         *                           gpudb::visualize_image_contour_flag
         *                                   <li>
         *                           gpudb::visualize_image_contour_gist_earth
         *                                   <li>
         *                           gpudb::visualize_image_contour_gist_gray
         *                                   <li>
         *                           gpudb::visualize_image_contour_gist_heat
         *                                   <li>
         *                           gpudb::visualize_image_contour_gist_ncar
         *                                   <li>
         *                           gpudb::visualize_image_contour_gist_rainbow
         *                                   <li>
         *                           gpudb::visualize_image_contour_gist_stern
         *                                   <li>
         *                           gpudb::visualize_image_contour_gist_yarg
         *                                   <li>
         *                           gpudb::visualize_image_contour_gnbu
         *                                   <li>
         *                           gpudb::visualize_image_contour_gnuplot2
         *                                   <li>
         *                           gpudb::visualize_image_contour_gnuplot
         *                                   <li>
         *                           gpudb::visualize_image_contour_gray
         *                                   <li>
         *                           gpudb::visualize_image_contour_greens
         *                                   <li>
         *                           gpudb::visualize_image_contour_greys
         *                                   <li>
         *                           gpudb::visualize_image_contour_hot
         *                                   <li>
         *                           gpudb::visualize_image_contour_hsv
         *                                   <li>
         *                           gpudb::visualize_image_contour_inferno
         *                                   <li>
         *                           gpudb::visualize_image_contour_magma
         *                                   <li>
         *                           gpudb::visualize_image_contour_nipy_spectral
         *                                   <li>
         *                           gpudb::visualize_image_contour_ocean
         *                                   <li>
         *                           gpudb::visualize_image_contour_oranges
         *                                   <li>
         *                           gpudb::visualize_image_contour_orrd
         *                                   <li>
         *                           gpudb::visualize_image_contour_paired
         *                                   <li>
         *                           gpudb::visualize_image_contour_pastel1
         *                                   <li>
         *                           gpudb::visualize_image_contour_pastel2
         *                                   <li>
         *                           gpudb::visualize_image_contour_pink
         *                                   <li>
         *                           gpudb::visualize_image_contour_piyg
         *                                   <li>
         *                           gpudb::visualize_image_contour_plasma
         *                                   <li>
         *                           gpudb::visualize_image_contour_prgn
         *                                   <li>
         *                           gpudb::visualize_image_contour_prism
         *                                   <li>
         *                           gpudb::visualize_image_contour_pubu
         *                                   <li>
         *                           gpudb::visualize_image_contour_pubugn
         *                                   <li>
         *                           gpudb::visualize_image_contour_puor
         *                                   <li>
         *                           gpudb::visualize_image_contour_purd
         *                                   <li>
         *                           gpudb::visualize_image_contour_purples
         *                                   <li>
         *                           gpudb::visualize_image_contour_rainbow
         *                                   <li>
         *                           gpudb::visualize_image_contour_rdbu
         *                                   <li>
         *                           gpudb::visualize_image_contour_rdgy
         *                                   <li>
         *                           gpudb::visualize_image_contour_rdpu
         *                                   <li>
         *                           gpudb::visualize_image_contour_rdylbu
         *                                   <li>
         *                           gpudb::visualize_image_contour_rdylgn
         *                                   <li>
         *                           gpudb::visualize_image_contour_reds
         *                                   <li>
         *                           gpudb::visualize_image_contour_seismic
         *                                   <li>
         *                           gpudb::visualize_image_contour_set1
         *                                   <li>
         *                           gpudb::visualize_image_contour_set2
         *                                   <li>
         *                           gpudb::visualize_image_contour_set3
         *                                   <li>
         *                           gpudb::visualize_image_contour_spectral
         *                                   <li>
         *                           gpudb::visualize_image_contour_spring
         *                                   <li>
         *                           gpudb::visualize_image_contour_summer
         *                                   <li>
         *                           gpudb::visualize_image_contour_terrain
         *                                   <li>
         *                           gpudb::visualize_image_contour_viridis
         *                                   <li>
         *                           gpudb::visualize_image_contour_winter
         *                                   <li>
         *                           gpudb::visualize_image_contour_wistia
         *                                   <li>
         *                           gpudb::visualize_image_contour_ylgn
         *                                   <li>
         *                           gpudb::visualize_image_contour_ylgnbu
         *                                   <li>
         *                           gpudb::visualize_image_contour_ylorbr
         *                                   <li>
         *                           gpudb::visualize_image_contour_ylorrd
         *                           </ul>
         *                           The default value is
         *                           gpudb::visualize_image_contour_jet.
         *                           </ul>
         * @param[in] options_
         *                      <ul>
         *                              <li>
         *                      gpudb::visualize_image_contour_min_level
         *                              <li>
         *                      gpudb::visualize_image_contour_max_level
         *                              <li>
         *                      gpudb::visualize_image_contour_num_levels:
         *                      The default value is '10'.
         *                              <li>
         *                      gpudb::visualize_image_contour_adjust_levels:
         *                      The default value is 'true'.
         *                              <li>
         *                      gpudb::visualize_image_contour_search_radius:
         *                      The default value is '20'.
         *                              <li>
         *                      gpudb::visualize_image_contour_max_search_cells:
         *                      The default value is '100'.
         *                              <li>
         *                      gpudb::visualize_image_contour_gridding_method:
         *                      <ul>
         *                              <li>
         *                      gpudb::visualize_image_contour_INV_DST_POW
         *                              <li>
         *                      gpudb::visualize_image_contour_MIN_CURV
         *                              <li>
         *                      gpudb::visualize_image_contour_KRIGING
         *                              <li>
         *                      gpudb::visualize_image_contour_PASS_THROUGH
         *                              <li>
         *                      gpudb::visualize_image_contour_FILL_RATIO
         *                      </ul>
         *                      The default value is
         *                      gpudb::visualize_image_contour_INV_DST_POW.
         *                              <li>
         *                      gpudb::visualize_image_contour_smoothing_factor:
         *                      The default value is '10'.
         *                              <li>
         *                      gpudb::visualize_image_contour_grid_size:   The
         *                      default value is '100'.
         *                              <li>
         *                      gpudb::visualize_image_contour_adjust_grid:
         *                      The default value is 'false'.
         *                              <li>
         *                      gpudb::visualize_image_contour_adjust_grid_neigh:
         *                      The default value is '1'.
         *                              <li>
         *                      gpudb::visualize_image_contour_adjust_grid_size:
         *                      The default value is '1'.
         *                              <li>
         *                      gpudb::visualize_image_contour_max_grid_size:
         *                      The default value is '500'.
         *                              <li>
         *                      gpudb::visualize_image_contour_min_grid_size:
         *                      The default value is '10'.
         *                              <li>
         *                      gpudb::visualize_image_contour_render_output_grid:
         *                      The default value is 'false'.
         *                              <li>
         *                      gpudb::visualize_image_contour_color_isolines:
         *                      The default value is 'true'.
         *                              <li>
         *                      gpudb::visualize_image_contour_add_labels:
         *                      The default value is 'false'.
         *                              <li>
         *                      gpudb::visualize_image_contour_labels_font_size:
         *                      The default value is '12'.
         *                              <li>
         *                      gpudb::visualize_image_contour_labels_font_family:
         *                      The default value is 'arial'.
         *                              <li>
         *                      gpudb::visualize_image_contour_labels_search_window:
         *                      The default value is '4'.
         *                              <li>
         *                      gpudb::visualize_image_contour_labels_intralevel_separation:
         *                      The default value is '4'.
         *                              <li>
         *                      gpudb::visualize_image_contour_labels_interlevel_separation:
         *                      The default value is '20'.
         *                              <li>
         *                      gpudb::visualize_image_contour_labels_max_angle:
         *                      The default value is '60'.
         *                      </ul>
         * 
         */
        VisualizeImageContourRequest(const std::vector<std::string>& tableNames_, const std::string& xColumnName_, const std::string& yColumnName_, const std::string& valueColumnName_, const double minX_, const double maxX_, const double minY_, const double maxY_, const int32_t width_, const int32_t height_, const std::string& projection_, const std::map<std::string, std::string>& styleOptions_, const std::map<std::string, std::string>& options_):
            tableNames( tableNames_ ),
            xColumnName( xColumnName_ ),
            yColumnName( yColumnName_ ),
            valueColumnName( valueColumnName_ ),
            minX( minX_ ),
            maxX( maxX_ ),
            minY( minY_ ),
            maxY( maxY_ ),
            width( width_ ),
            height( height_ ),
            projection( projection_ ),
            styleOptions( styleOptions_ ),
            options( options_ )
        {
        }

        std::vector<std::string> tableNames;
        std::string xColumnName;
        std::string yColumnName;
        std::string valueColumnName;
        double minX;
        double maxX;
        double minY;
        double maxY;
        int32_t width;
        int32_t height;
        std::string projection;
        std::map<std::string, std::string> styleOptions;
        std::map<std::string, std::string> options;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::VisualizeImageContourRequest>
    {
        static void encode(Encoder& e, const gpudb::VisualizeImageContourRequest& v)
        {
            ::avro::encode(e, v.tableNames);
            ::avro::encode(e, v.xColumnName);
            ::avro::encode(e, v.yColumnName);
            ::avro::encode(e, v.valueColumnName);
            ::avro::encode(e, v.minX);
            ::avro::encode(e, v.maxX);
            ::avro::encode(e, v.minY);
            ::avro::encode(e, v.maxY);
            ::avro::encode(e, v.width);
            ::avro::encode(e, v.height);
            ::avro::encode(e, v.projection);
            ::avro::encode(e, v.styleOptions);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::VisualizeImageContourRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.xColumnName);
                            break;

                        case 2:
                            ::avro::decode(d, v.yColumnName);
                            break;

                        case 3:
                            ::avro::decode(d, v.valueColumnName);
                            break;

                        case 4:
                            ::avro::decode(d, v.minX);
                            break;

                        case 5:
                            ::avro::decode(d, v.maxX);
                            break;

                        case 6:
                            ::avro::decode(d, v.minY);
                            break;

                        case 7:
                            ::avro::decode(d, v.maxY);
                            break;

                        case 8:
                            ::avro::decode(d, v.width);
                            break;

                        case 9:
                            ::avro::decode(d, v.height);
                            break;

                        case 10:
                            ::avro::decode(d, v.projection);
                            break;

                        case 11:
                            ::avro::decode(d, v.styleOptions);
                            break;

                        case 12:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
                ::avro::decode(d, v.xColumnName);
                ::avro::decode(d, v.yColumnName);
                ::avro::decode(d, v.valueColumnName);
                ::avro::decode(d, v.minX);
                ::avro::decode(d, v.maxX);
                ::avro::decode(d, v.minY);
                ::avro::decode(d, v.maxY);
                ::avro::decode(d, v.width);
                ::avro::decode(d, v.height);
                ::avro::decode(d, v.projection);
                ::avro::decode(d, v.styleOptions);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #visualizeImageContour(const VisualizeImageContourRequest&) const}.
     * <p>
     * @private
     */
    struct VisualizeImageContourResponse
    {

        /**
         * @private
         * Constructs a VisualizeImageContourResponse object with default
         * parameter values.
         */
        VisualizeImageContourResponse() :
            width(int32_t()),
            height(int32_t()),
            bgColor(int64_t()),
            imageData(std::vector<uint8_t>()),
            gridData(std::vector<uint8_t>()),
            fillN0(double()),
            fillNn(double()),
            minLevel(double()),
            maxLevel(double()),
            samplesUsed(int64_t())
        {
        }

        int32_t width;
        int32_t height;
        int64_t bgColor;
        std::vector<uint8_t> imageData;
        std::vector<uint8_t> gridData;
        double fillN0;
        double fillNn;
        double minLevel;
        double maxLevel;
        int64_t samplesUsed;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::VisualizeImageContourResponse>
    {
        static void encode(Encoder& e, const gpudb::VisualizeImageContourResponse& v)
        {
            ::avro::encode(e, v.width);
            ::avro::encode(e, v.height);
            ::avro::encode(e, v.bgColor);
            ::avro::encode(e, v.imageData);
            ::avro::encode(e, v.gridData);
            ::avro::encode(e, v.fillN0);
            ::avro::encode(e, v.fillNn);
            ::avro::encode(e, v.minLevel);
            ::avro::encode(e, v.maxLevel);
            ::avro::encode(e, v.samplesUsed);
        }

        static void decode(Decoder& d, gpudb::VisualizeImageContourResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.width);
                            break;

                        case 1:
                            ::avro::decode(d, v.height);
                            break;

                        case 2:
                            ::avro::decode(d, v.bgColor);
                            break;

                        case 3:
                            ::avro::decode(d, v.imageData);
                            break;

                        case 4:
                            ::avro::decode(d, v.gridData);
                            break;

                        case 5:
                            ::avro::decode(d, v.fillN0);
                            break;

                        case 6:
                            ::avro::decode(d, v.fillNn);
                            break;

                        case 7:
                            ::avro::decode(d, v.minLevel);
                            break;

                        case 8:
                            ::avro::decode(d, v.maxLevel);
                            break;

                        case 9:
                            ::avro::decode(d, v.samplesUsed);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.width);
                ::avro::decode(d, v.height);
                ::avro::decode(d, v.bgColor);
                ::avro::decode(d, v.imageData);
                ::avro::decode(d, v.gridData);
                ::avro::decode(d, v.fillN0);
                ::avro::decode(d, v.fillNn);
                ::avro::decode(d, v.minLevel);
                ::avro::decode(d, v.maxLevel);
                ::avro::decode(d, v.samplesUsed);
            }
        }
    };
}

#endif
