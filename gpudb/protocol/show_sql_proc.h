/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_SQL_PROC_H__
#define __SHOW_SQL_PROC_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #showSqlProc(const ShowSqlProcRequest&) const}.
     * <p>
     * Shows information about SQL procedures, including the full definition of
     * each requested procedure.
     */
    struct ShowSqlProcRequest
    {

        /**
         * Constructs a ShowSqlProcRequest object with default parameter
         * values.
         */
        ShowSqlProcRequest() :
            procedureName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowSqlProcRequest object with the specified
         * parameters.
         * 
         * @param[in] procedureName_  Name of the procedure for which to
         *                            retrieve the information. If blank, then
         *                            information about all procedures is
         *                            returned.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::show_sql_proc_no_error_if_not_exists: If
         *                      @a true, no error will be returned if the
         *                      requested procedure does not exist.  If @a
         *                      false, an error will be returned if the
         *                      requested procedure does not exist.
         *                      <ul>
         *                              <li> gpudb::show_sql_proc_true
         *                              <li> gpudb::show_sql_proc_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::show_sql_proc_false.
         *                      </ul>
         * 
         */
        ShowSqlProcRequest(const std::string& procedureName_, const std::map<std::string, std::string>& options_):
            procedureName( procedureName_ ),
            options( options_ )
        {
        }

        std::string procedureName;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowSqlProcRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowSqlProcRequest& v)
        {
            ::avro::encode(e, v.procedureName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowSqlProcRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.procedureName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.procedureName);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #showSqlProc(const ShowSqlProcRequest&) const}.
     * <p>
     * Shows information about SQL procedures, including the full definition of
     * each requested procedure.
     */
    struct ShowSqlProcResponse
    {

        /**
         * Constructs a ShowSqlProcResponse object with default parameter
         * values.
         */
        ShowSqlProcResponse() :
            procedureNames(std::vector<std::string>()),
            procedureDefinitions(std::vector<std::string>()),
            additionalInfo(std::vector<std::map<std::string, std::string> >()),
            info(std::map<std::string, std::string>())
        {
        }

        std::vector<std::string> procedureNames;
        std::vector<std::string> procedureDefinitions;
        std::vector<std::map<std::string, std::string> > additionalInfo;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowSqlProcResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowSqlProcResponse& v)
        {
            ::avro::encode(e, v.procedureNames);
            ::avro::encode(e, v.procedureDefinitions);
            ::avro::encode(e, v.additionalInfo);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::ShowSqlProcResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.procedureNames);
                            break;

                        case 1:
                            ::avro::decode(d, v.procedureDefinitions);
                            break;

                        case 2:
                            ::avro::decode(d, v.additionalInfo);
                            break;

                        case 3:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.procedureNames);
                ::avro::decode(d, v.procedureDefinitions);
                ::avro::decode(d, v.additionalInfo);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
