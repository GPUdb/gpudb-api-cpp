/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_SCHEMA_H__
#define __CREATE_SCHEMA_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #createSchema(const CreateSchemaRequest&) const}.
     * <p>
     * Creates a SQL-style <a href="../../../concepts/schemas/"
     * target="_top">schema</a>. Schemas are containers for tables and views.
     * Multiple tables and views can be defined with the same name in different
     * schemas.
     */
    struct CreateSchemaRequest
    {

        /**
         * Constructs a CreateSchemaRequest object with default parameter
         * values.
         */
        CreateSchemaRequest() :
            schemaName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateSchemaRequest object with the specified
         * parameters.
         * 
         * @param[in] schemaName_  Name of the schema to be created.  Has the
         *                         same naming restrictions as <a
         *                         href="../../../concepts/tables/"
         *                         target="_top">tables</a>.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::create_schema_no_error_if_exists: If @a
         *                      true, prevents an error from occurring if the
         *                      schema already exists.
         *                      <ul>
         *                              <li> gpudb::create_schema_true
         *                              <li> gpudb::create_schema_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_schema_false.
         *                      </ul>
         * 
         */
        CreateSchemaRequest(const std::string& schemaName_, const std::map<std::string, std::string>& options_):
            schemaName( schemaName_ ),
            options( options_ )
        {
        }

        std::string schemaName;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateSchemaRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateSchemaRequest& v)
        {
            ::avro::encode(e, v.schemaName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateSchemaRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.schemaName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.schemaName);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #createSchema(const CreateSchemaRequest&) const}.
     * <p>
     * Creates a SQL-style <a href="../../../concepts/schemas/"
     * target="_top">schema</a>. Schemas are containers for tables and views.
     * Multiple tables and views can be defined with the same name in different
     * schemas.
     */
    struct CreateSchemaResponse
    {

        /**
         * Constructs a CreateSchemaResponse object with default parameter
         * values.
         */
        CreateSchemaResponse() :
            schemaName(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string schemaName;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateSchemaResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateSchemaResponse& v)
        {
            ::avro::encode(e, v.schemaName);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::CreateSchemaResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.schemaName);
                            break;

                        case 1:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.schemaName);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
