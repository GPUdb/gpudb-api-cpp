/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __GET_JOB_H__
#define __GET_JOB_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #getJob(const GetJobRequest&) const}.
     * <p>
     */
    struct GetJobRequest
    {

        /**
         * Constructs a GetJobRequest object with default parameter values.
         */
        GetJobRequest() :
            jobId(int64_t()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a GetJobRequest object with the specified parameters.
         * 
         * @param[in] jobId_  A unique identifier for the job whose status and
         *                    result is to be fetched.
         * @param[in] options_  Optional parameters.
         * 
         */
        GetJobRequest(const int64_t jobId_, const std::map<std::string, std::string>& options_):
            jobId( jobId_ ),
            options( options_ )
        {
        }

        int64_t jobId;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::GetJobRequest>
    {
        static void encode(Encoder& e, const gpudb::GetJobRequest& v)
        {
            ::avro::encode(e, v.jobId);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::GetJobRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.jobId);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.jobId);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #getJob(const GetJobRequest&) const}.
     * <p>
     */
    struct GetJobResponse
    {

        /**
         * Constructs a GetJobResponse object with default parameter values.
         */
        GetJobResponse() :
            endpoint(std::string()),
            jobStatus(std::string()),
            running(bool()),
            progress(int32_t()),
            successful(bool()),
            responseEncoding(std::string()),
            jobResponse(std::vector<uint8_t>()),
            jobResponseStr(std::string()),
            statusMap(std::map<std::string, std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string endpoint;
        std::string jobStatus;
        bool running;
        int32_t progress;
        bool successful;
        std::string responseEncoding;
        std::vector<uint8_t> jobResponse;
        std::string jobResponseStr;
        std::map<std::string, std::string> statusMap;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::GetJobResponse>
    {
        static void encode(Encoder& e, const gpudb::GetJobResponse& v)
        {
            ::avro::encode(e, v.endpoint);
            ::avro::encode(e, v.jobStatus);
            ::avro::encode(e, v.running);
            ::avro::encode(e, v.progress);
            ::avro::encode(e, v.successful);
            ::avro::encode(e, v.responseEncoding);
            ::avro::encode(e, v.jobResponse);
            ::avro::encode(e, v.jobResponseStr);
            ::avro::encode(e, v.statusMap);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::GetJobResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.endpoint);
                            break;

                        case 1:
                            ::avro::decode(d, v.jobStatus);
                            break;

                        case 2:
                            ::avro::decode(d, v.running);
                            break;

                        case 3:
                            ::avro::decode(d, v.progress);
                            break;

                        case 4:
                            ::avro::decode(d, v.successful);
                            break;

                        case 5:
                            ::avro::decode(d, v.responseEncoding);
                            break;

                        case 6:
                            ::avro::decode(d, v.jobResponse);
                            break;

                        case 7:
                            ::avro::decode(d, v.jobResponseStr);
                            break;

                        case 8:
                            ::avro::decode(d, v.statusMap);
                            break;

                        case 9:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.endpoint);
                ::avro::decode(d, v.jobStatus);
                ::avro::decode(d, v.running);
                ::avro::decode(d, v.progress);
                ::avro::decode(d, v.successful);
                ::avro::decode(d, v.responseEncoding);
                ::avro::decode(d, v.jobResponse);
                ::avro::decode(d, v.jobResponseStr);
                ::avro::decode(d, v.statusMap);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
