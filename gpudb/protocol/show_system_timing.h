/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_SYSTEM_TIMING_H__
#define __SHOW_SYSTEM_TIMING_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #showSystemTiming(const ShowSystemTimingRequest&) const}.
     * <p>
     * Returns the last 100 database requests along with the request timing and
     * internal job id. The admin tool uses it to present request timing
     * information to the user.
     */
    struct ShowSystemTimingRequest
    {

        /**
         * Constructs a ShowSystemTimingRequest object with default parameter
         * values.
         */
        ShowSystemTimingRequest() :
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowSystemTimingRequest object with the specified
         * parameters.
         * 
         * @param[in] options_  Optional parameters, currently unused.  Default
         *                      value is an empty std::map.
         * 
         */
        ShowSystemTimingRequest(const std::map<std::string, std::string>& options_):
            options( options_ )
        {
        }

        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowSystemTimingRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowSystemTimingRequest& v)
        {
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowSystemTimingRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #showSystemTiming(const ShowSystemTimingRequest&) const}.
     * <p>
     * Returns the last 100 database requests along with the request timing and
     * internal job id. The admin tool uses it to present request timing
     * information to the user.
     */
    struct ShowSystemTimingResponse
    {

        /**
         * Constructs a ShowSystemTimingResponse object with default parameter
         * values.
         */
        ShowSystemTimingResponse() :
            endpoints(std::vector<std::string>()),
            timeInMs(std::vector<float>()),
            jobids(std::vector<std::string>())
        {
        }

        std::vector<std::string> endpoints;
        std::vector<float> timeInMs;
        std::vector<std::string> jobids;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowSystemTimingResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowSystemTimingResponse& v)
        {
            ::avro::encode(e, v.endpoints);
            ::avro::encode(e, v.timeInMs);
            ::avro::encode(e, v.jobids);
        }

        static void decode(Decoder& d, gpudb::ShowSystemTimingResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.endpoints);
                            break;

                        case 1:
                            ::avro::decode(d, v.timeInMs);
                            break;

                        case 2:
                            ::avro::decode(d, v.jobids);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.endpoints);
                ::avro::decode(d, v.timeInMs);
                ::avro::decode(d, v.jobids);
            }
        }
    };
}

#endif
