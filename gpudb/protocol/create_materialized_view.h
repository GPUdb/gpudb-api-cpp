/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_MATERIALIZED_VIEW_H__
#define __CREATE_MATERIALIZED_VIEW_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #createMaterializedView(const CreateMaterializedViewRequest&) const}.
     * <p>
     * The create materialized view request does not create the actual table
     * that will be the toplevel table of the view but instead registers the
     * table name so no other views or tables can be created with that name.
     * The response contains a a view_id that is used to label the table
     * creation requests (projection, union, group-by, filter, or join) that
     * describes the view.
     */
    struct CreateMaterializedViewRequest
    {

        /**
         * Constructs a CreateMaterializedViewRequest object with default
         * parameter values.
         */
        CreateMaterializedViewRequest() :
            tableName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateMaterializedViewRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Name of the table to be created that is the
         *                        top-level table of the materialized view.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::create_materialized_view_collection_name:
         *                      Name of a collection which is to contain the
         *                      newly created view. If the collection provided
         *                      is non-existent, the collection will be
         *                      automatically created. If empty, then the newly
         *                      created table will be a top-level table.
         *                              <li>
         *                      gpudb::create_materialized_view_ttl: Sets the
         *                      <a href="../../concepts/ttl.html"
         *                      target="_top">TTL</a> of the table specified in
         *                      @a tableName.
         *                              <li>
         *                      gpudb::create_materialized_view_persist: If @a
         *                      true, then the materialized view specified in
         *                      @a tableName will be persisted and will not
         *                      expire unless a @a ttl is specified.   If @a
         *                      false, then the materialized view will be an
         *                      in-memory table and will expire unless a @a ttl
         *                      is specified otherwise.
         *                      <ul>
         *                              <li>
         *                      gpudb::create_materialized_view_true
         *                              <li>
         *                      gpudb::create_materialized_view_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_materialized_view_false.
         *                              <li>
         *                      gpudb::create_materialized_view_refresh_method:
         *                      Method by which the join can be refreshed when
         *                      the data in underlying member tables have
         *                      changed.
         *                      <ul>
         *                              <li>
         *                      gpudb::create_materialized_view_manual: Refresh
         *                      only occurs when manually requested by calling
         *                      alter_table with action refresh_view
         *                              <li>
         *                      gpudb::create_materialized_view_on_query:
         *                      Incrementally refresh (refresh just those
         *                      records added) whenever a new query is issued
         *                      and new data is inserted into the base table.
         *                      A full refresh of all the records occurs when a
         *                      new query is issued and there have been inserts
         *                      to any non-base-tables since the last query
         *                              <li>
         *                      gpudb::create_materialized_view_on_change: If
         *                      possible, incrementally refresh (refresh just
         *                      those records added) whenever an insert,
         *                      update, delete or refresh of input table is
         *                      done.  A full refresh on_query is done if an
         *                      incremental refresh is not possible.
         *                              <li>
         *                      gpudb::create_materialized_view_periodic:
         *                      Refresh table periodically at rate specified by
         *                      refresh_period option
         *                      </ul>
         *                      The default value is
         *                      gpudb::create_materialized_view_manual.
         *                              <li>
         *                      gpudb::create_materialized_view_refresh_period:
         *                      When refresh_method is periodic specifies the
         *                      period in seconds at which refresh occurs
         *                              <li>
         *                      gpudb::create_materialized_view_refresh_start_time:
         *                      First time at which a periodic refresh is to be
         *                      done.  Value is a datatime string with format
         *                      YYYY-MM-DD HH:MM:SS.
         *                      </ul>
         * 
         */
        CreateMaterializedViewRequest(const std::string& tableName_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateMaterializedViewRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateMaterializedViewRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateMaterializedViewRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #createMaterializedView(const CreateMaterializedViewRequest&) const}.
     * <p>
     * The create materialized view request does not create the actual table
     * that will be the toplevel table of the view but instead registers the
     * table name so no other views or tables can be created with that name.
     * The response contains a a view_id that is used to label the table
     * creation requests (projection, union, group-by, filter, or join) that
     * describes the view.
     */
    struct CreateMaterializedViewResponse
    {

        /**
         * Constructs a CreateMaterializedViewResponse object with default
         * parameter values.
         */
        CreateMaterializedViewResponse() :
            tableName(std::string()),
            viewId(std::string())
        {
        }

        std::string tableName;
        std::string viewId;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateMaterializedViewResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateMaterializedViewResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.viewId);
        }

        static void decode(Decoder& d, gpudb::CreateMaterializedViewResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.viewId);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.viewId);
            }
        }
    };
}

#endif
