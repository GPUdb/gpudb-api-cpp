/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_TABLE_H__
#define __ALTER_TABLE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #alterTable(const AlterTableRequest&) const}.
     * <p>
     * Apply various modifications to a table or collection. Available
     * modifications include:
     * <p>
     *      Creating or deleting an index on a particular column. This can
     * speed up certain search queries (such as {@link
     * #getRecordsRaw(const GetRecordsRequest&) const}, {@link
     * #deleteRecords(const DeleteRecordsRequest&) const}, {@link
     * #updateRecordsRaw(const RawUpdateRecordsRequest&) const}) when using
     * expressions containing equality or relational operators on indexed
     * columns. This only applies to tables.
     * <p>
     *      Setting the time-to-live (TTL). This can be applied to tables,
     * views, or collections.  When applied to collections, every table & view
     * within the collection will have its TTL set to the given value.
     * <p>
     *      Making a table protected or not. Protected tables have their TTLs
     * set to not automatically expire. This can be applied to tables, views,
     * and collections.
     * <p>
     *      Allowing homogeneous tables within a collection.

     *      Managing a table's columns--a column can be added or removed, or
     * have its <a href="../../concepts/types.html" target="_top">type</a>
     * modified.
     */
    struct AlterTableRequest
    {

        /**
         * Constructs an AlterTableRequest object with default parameter
         * values.
         */
        AlterTableRequest() :
            tableName(std::string()),
            action(std::string()),
            value(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterTableRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Table on which the operation will be
         *                        performed. Must be an existing table, view,
         *                        or collection.
         * @param[in] action_  Modification operation to be applied
         *                     <ul>
         *                             <li> gpudb::alter_table_create_index:
         *                     Creates an index on the column name specified in
         *                     @a value. If this column is already indexed, an
         *                     error will be returned.
         *                             <li> gpudb::alter_table_delete_index:
         *                     Deletes an existing index on the column name
         *                     specified in @a value. If this column does not
         *                     have indexing turned on, an error will be
         *                     returned.
         *                             <li>
         *                     gpudb::alter_table_allow_homogeneous_tables:
         *                     Sets whether homogeneous tables are allowed in
         *                     the given collection. This action is only valid
         *                     if @a tableName is a collection. The @a value
         *                     must be either 'true' or 'false'.
         *                             <li> gpudb::alter_table_protected: Sets
         *                     whether the given @a tableName should be
         *                     protected or not. The @a value must be either
         *                     'true' or 'false'.
         *                             <li> gpudb::alter_table_ttl: Sets the
         *                     TTL of the table, view, or collection specified
         *                     in @a tableName. The @a value must be the
         *                     desired TTL in minutes.
         *                             <li> gpudb::alter_table_add_column: Add
         *                     a column @a value to the table. set the column
         *                     properties in options
         *                             <li> gpudb::alter_table_delete_column:
         *                     Delete a column @a value from the table
         *                             <li> gpudb::alter_table_change_column:
         *                     Change properties of a column @a value in the
         *                     table. set the column properties in options
         *                             <li> gpudb::alter_table_rename_table:
         *                     Rename a table, view or collection to @a value.
         *                     Has the same naming restrictions as <a
         *                     href="../../concepts/tables.html"
         *                     target="_top">tables</a>.
         *                     </ul>
         * @param[in] value_  The value of the modification. May be a column
         *                    name, 'true' or 'false', or a TTL depending on @a
         *                    action.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::alter_table_column_default_value: when
         *                      adding a column: set a default value, for
         *                      existing data.
         *                              <li>
         *                      gpudb::alter_table_column_properties: when
         *                      adding or changing a column: set the column
         *                      properties (strings, separated by a comma:
         *                      data, store_only, text_search, char8, int8
         *                      etc).
         *                              <li> gpudb::alter_table_column_type:
         *                      when adding or changing a column: set the
         *                      column type (strings, separated by a comma:
         *                      int, double, string, null etc).
         *                              <li>
         *                      gpudb::alter_table_validate_change_column:
         *                      Validate the type change before applying
         *                      column_change request. Default is @a true (if
         *                      option is missing). If @a true, then validate
         *                      all values. A value too large (or too long) for
         *                      the new type will prevent any change. If @a
         *                      false, then when a value is too large or long,
         *                      it will be truncated.
         *                      <ul>
         *                              <li> gpudb::alter_table_true: true
         *                              <li> gpudb::alter_table_false: false
         *                      </ul>
         *                              <li>
         *                      gpudb::alter_table_copy_values_from_column:
         *                      when adding or changing a column: enter column
         *                      name - from where to copy values.
         *                      </ul>
         * 
         */
        AlterTableRequest(const std::string& tableName_, const std::string& action_, const std::string& value_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            action( action_ ),
            value( value_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::string action;
        std::string value;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTableRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterTableRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.value);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.value);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.value);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #alterTable(const AlterTableRequest&) const}.
     * <p>
     * Apply various modifications to a table or collection. Available
     * modifications include:
     * <p>
     *      Creating or deleting an index on a particular column. This can
     * speed up certain search queries (such as {@link
     * #getRecordsRaw(const GetRecordsRequest&) const}, {@link
     * #deleteRecords(const DeleteRecordsRequest&) const}, {@link
     * #updateRecordsRaw(const RawUpdateRecordsRequest&) const}) when using
     * expressions containing equality or relational operators on indexed
     * columns. This only applies to tables.
     * <p>
     *      Setting the time-to-live (TTL). This can be applied to tables,
     * views, or collections.  When applied to collections, every table & view
     * within the collection will have its TTL set to the given value.
     * <p>
     *      Making a table protected or not. Protected tables have their TTLs
     * set to not automatically expire. This can be applied to tables, views,
     * and collections.
     * <p>
     *      Allowing homogeneous tables within a collection.

     *      Managing a table's columns--a column can be added or removed, or
     * have its <a href="../../concepts/types.html" target="_top">type</a>
     * modified.
     */
    struct AlterTableResponse
    {

        /**
         * Constructs an AlterTableResponse object with default parameter
         * values.
         */
        AlterTableResponse() :
            tableName(std::string()),
            action(std::string()),
            value(std::string())
        {
        }

        std::string tableName;
        std::string action;
        std::string value;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTableResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterTableResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.value);
        }

        static void decode(Decoder& d, gpudb::AlterTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.value);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.value);
            }
        }
    };
}

#endif
