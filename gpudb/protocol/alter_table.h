/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_TABLE_H__
#define __ALTER_TABLE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #alterTable(const AlterTableRequest&) const}.
     * <p>
     * Apply various modifications to a table or collection. Available
     * modifications include:
     * <p>
     *      Creating or deleting an index on a particular column. This can
     * speed up certain search queries (such as {@link
     * #getRecordsRaw(const GetRecordsRequest&) const}, {@link
     * #deleteRecords(const DeleteRecordsRequest&) const}, {@link
     * #updateRecordsRaw(const RawUpdateRecordsRequest&) const}) when using
     * expressions containing equality or relational operators on indexed
     * columns. This only applies to child tables.
     * <p>
     *      Making a table protected or not. Protected tables need the admin
     * password to be sent in a {@link
     * #clearTable(const ClearTableRequest&) const} to delete the table.
     * This can be applied to child tables or collections or views.
     * <p>
     *      Setting the ttl (time-to-live). This can be applied to child tables
     * or collections or views.
     * <p>
     *      Allowing homogeneous child tables. This only applies to
     * collections.
     */
    struct AlterTableRequest
    {

        /**
         * Constructs an AlterTableRequest object with default parameter
         * values.
         */
        AlterTableRequest() :
            tableName(std::string()),
            action(std::string()),
            value(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterTableRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName  Table on which the operation will be
         *                       performed. Must be a valid table or collection
         *                       in GPUdb.
         * @param[in] action  Modification operation to be applied to the table
         *                    or collection Values: 'create_index',
         *                    'delete_index', 'allow_homogeneous_tables',
         *                    'protected', 'ttl'.
         * @param[in] value  The value of the modification. May be a column
         *                   name, 'true' or 'false', or a time-to-live
         *                   depending on @a action.
         * @param[in] options  Optional parameters.  Default value is an empty
         *                     std::map.
         * 
         */
        AlterTableRequest(const std::string& tableName, const std::string& action, const std::string& value, const std::map<std::string, std::string>& options):
            tableName(tableName),
            action(action),
            value(value),
            options(options)
        {
        }

        std::string tableName;
        std::string action;
        std::string value;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTableRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterTableRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.value);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.value);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.value);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #alterTable(const AlterTableRequest&) const}.
     * <p>
     * Apply various modifications to a table or collection. Available
     * modifications include:
     * <p>
     *      Creating or deleting an index on a particular column. This can
     * speed up certain search queries (such as {@link
     * #getRecordsRaw(const GetRecordsRequest&) const}, {@link
     * #deleteRecords(const DeleteRecordsRequest&) const}, {@link
     * #updateRecordsRaw(const RawUpdateRecordsRequest&) const}) when using
     * expressions containing equality or relational operators on indexed
     * columns. This only applies to child tables.
     * <p>
     *      Making a table protected or not. Protected tables need the admin
     * password to be sent in a {@link
     * #clearTable(const ClearTableRequest&) const} to delete the table.
     * This can be applied to child tables or collections or views.
     * <p>
     *      Setting the ttl (time-to-live). This can be applied to child tables
     * or collections or views.
     * <p>
     *      Allowing homogeneous child tables. This only applies to
     * collections.
     */
    struct AlterTableResponse
    {

        /**
         * Constructs an AlterTableResponse object with default parameter
         * values.
         */
        AlterTableResponse() :
            tableName(std::string()),
            action(std::string()),
            value(std::string())
        {
        }

        std::string tableName;
        std::string action;
        std::string value;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTableResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterTableResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.value);
        }

        static void decode(Decoder& d, gpudb::AlterTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.value);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.value);
            }
        }
    };
}

#endif
