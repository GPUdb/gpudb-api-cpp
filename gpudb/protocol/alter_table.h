/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_TABLE_H__
#define __ALTER_TABLE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #alterTable(const AlterTableRequest&) const}.
     * <p>
     * Apply various modifications to a table or collection. Available
     * modifications include:
     * <p>
     *      Creating or deleting an index on a particular column. This can
     * speed up certain search queries (such as {@link
     * #getRecordsRaw(const GetRecordsRequest&) const}, {@link
     * #deleteRecords(const DeleteRecordsRequest&) const}, {@link
     * #updateRecordsRaw(const RawUpdateRecordsRequest&) const}) when using
     * expressions containing equality or relational operators on indexed
     * columns. This only applies to tables.
     * <p>
     *      Setting the time-to-live (TTL). This can be applied to tables,
     * views, or collections.  When applied to collections, every table & view
     * within the collection will have its TTL set to the given value.
     * <p>
     *      Making a table protected or not. Protected tables have their TTLs
     * set to not automatically expire. This can be applied to tables, views,
     * and collections.
     * <p>
     *      Allowing homogeneous tables within a collection.
     */
    struct AlterTableRequest
    {

        /**
         * Constructs an AlterTableRequest object with default parameter
         * values.
         */
        AlterTableRequest() :
            tableName(std::string()),
            action(std::string()),
            value(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterTableRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Table on which the operation will be
         *                        performed. Must be an existing table, view,
         *                        or collection.
         * @param[in] action_  Modification operation to be applied Values:
         *                     'create_index', 'delete_index',
         *                     'allow_homogeneous_tables', 'protected', 'ttl',
         *                     'add_column', 'delete_column', 'change_column',
         *                     'rename_table'.
         * @param[in] value_  The value of the modification. May be a column
         *                    name, 'true' or 'false', or a TTL depending on @a
         *                    action.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> column_default_value: when adding
         *                      a column: set a default value, for existing
         *                      data.
         *                              <li> column_properties: when adding or
         *                      changing a column: set the column properties
         *                      (strings, separated by a comma: data,
         *                      store_only, text_search, char8, int8 etc).
         *                              <li> column_type: when adding or
         *                      changing a column: set the column type
         *                      (strings, separated by a comma: int, double,
         *                      string, null etc).
         *                              <li> validate_change_column: Validate
         *                      the type change before applying column_change
         *                      request. Default is true (if option is
         *                      missing). If True, then validate all values. A
         *                      value too large (or too long) for the new type
         *                      will prevent any change. If False, then when a
         *                      value is too large or long, it will be
         *                      trancated. Values: 'true', 'false'.
         *                              <li> copy_values_from_column: when
         *                      adding or changing a column: enter column name
         *                      - from where to copy values.
         *                              <li> rename_column: new column name
         *                      (using change_column).
         *                      </ul>
         *                        Default value is an empty std::map.
         * 
         */
        AlterTableRequest(const std::string& tableName_, const std::string& action_, const std::string& value_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            action( action_ ),
            value( value_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::string action;
        std::string value;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTableRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterTableRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.value);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterTableRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.value);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.value);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #alterTable(const AlterTableRequest&) const}.
     * <p>
     * Apply various modifications to a table or collection. Available
     * modifications include:
     * <p>
     *      Creating or deleting an index on a particular column. This can
     * speed up certain search queries (such as {@link
     * #getRecordsRaw(const GetRecordsRequest&) const}, {@link
     * #deleteRecords(const DeleteRecordsRequest&) const}, {@link
     * #updateRecordsRaw(const RawUpdateRecordsRequest&) const}) when using
     * expressions containing equality or relational operators on indexed
     * columns. This only applies to tables.
     * <p>
     *      Setting the time-to-live (TTL). This can be applied to tables,
     * views, or collections.  When applied to collections, every table & view
     * within the collection will have its TTL set to the given value.
     * <p>
     *      Making a table protected or not. Protected tables have their TTLs
     * set to not automatically expire. This can be applied to tables, views,
     * and collections.
     * <p>
     *      Allowing homogeneous tables within a collection.
     */
    struct AlterTableResponse
    {

        /**
         * Constructs an AlterTableResponse object with default parameter
         * values.
         */
        AlterTableResponse() :
            tableName(std::string()),
            action(std::string()),
            value(std::string())
        {
        }

        std::string tableName;
        std::string action;
        std::string value;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterTableResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterTableResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.action);
            ::avro::encode(e, v.value);
        }

        static void decode(Decoder& d, gpudb::AlterTableResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.action);
                            break;

                        case 2:
                            ::avro::decode(d, v.value);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.action);
                ::avro::decode(d, v.value);
            }
        }
    };
}

#endif
