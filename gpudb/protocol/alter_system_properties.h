/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ALTER_SYSTEM_PROPERTIES_H__
#define __ALTER_SYSTEM_PROPERTIES_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #alterSystemProperties(const AlterSystemPropertiesRequest&) const}.
     * <p>
     * The alter_system_properties endpoint is primarily used to simplify the
     * testing of gpudb and is not expected to be used during normal execution.
     * Commands are given through the properties_update_map whose keys are
     * commands and values are strings representing integer values (for example
     * '8000') or boolean values ('true' or 'false').
     */
    struct AlterSystemPropertiesRequest
    {

        /**
         * Constructs an AlterSystemPropertiesRequest object with default
         * parameter values.
         */
        AlterSystemPropertiesRequest() :
            propertyUpdatesMap(std::map<std::string, std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AlterSystemPropertiesRequest object with the specified
         * parameters.
         * 
         * @param[in] propertyUpdatesMap  Map containing the properties of the
         *                                system to be updated. Error if empty.
         * @param[in] options  Optional parameters.  Default value is an empty
         *                     std::map.
         * 
         */
        AlterSystemPropertiesRequest(const std::map<std::string, std::string>& propertyUpdatesMap, const std::map<std::string, std::string>& options):
            propertyUpdatesMap(propertyUpdatesMap),
            options(options)
        {
        }

        std::map<std::string, std::string> propertyUpdatesMap;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterSystemPropertiesRequest>
    {
        static void encode(Encoder& e, const gpudb::AlterSystemPropertiesRequest& v)
        {
            ::avro::encode(e, v.propertyUpdatesMap);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AlterSystemPropertiesRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.propertyUpdatesMap);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.propertyUpdatesMap);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #alterSystemProperties(const AlterSystemPropertiesRequest&) const}.
     * <p>
     * The alter_system_properties endpoint is primarily used to simplify the
     * testing of gpudb and is not expected to be used during normal execution.
     * Commands are given through the properties_update_map whose keys are
     * commands and values are strings representing integer values (for example
     * '8000') or boolean values ('true' or 'false').
     */
    struct AlterSystemPropertiesResponse
    {

        /**
         * Constructs an AlterSystemPropertiesResponse object with default
         * parameter values.
         */
        AlterSystemPropertiesResponse() :
            updatedPropertiesMap(std::map<std::string, std::string>())
        {
        }

        std::map<std::string, std::string> updatedPropertiesMap;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AlterSystemPropertiesResponse>
    {
        static void encode(Encoder& e, const gpudb::AlterSystemPropertiesResponse& v)
        {
            ::avro::encode(e, v.updatedPropertiesMap);
        }

        static void decode(Decoder& d, gpudb::AlterSystemPropertiesResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.updatedPropertiesMap);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.updatedPropertiesMap);
            }
        }
    };
}

#endif
