/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __GET_RECORDS_BY_COLUMN_H__
#define __GET_RECORDS_BY_COLUMN_H__

#include "../DynamicTableRecord.hpp"

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #getRecordsByColumnRaw(const GetRecordsByColumnRequest&) const}.
     * <p>
     * For a given table, retrieves the values of the given columns within a
     * given range. It returns maps of column name to the vector of values for
     * each supported data type (double, float, long, int and string). This
     * operation supports pagination feature, i.e. values that are retrieved
     * are those associated with the indices between the start (offset) and end
     * value (offset + limit) parameters (inclusive). If there are num_points
     * values in the table then each of the indices between 0 and num_points-1
     * retrieves a unique value.
     * <p>
     * Note that when using the pagination feature, if the table (or the
     * underlying table in case of a view) is updated (records are inserted,
     * deleted or modified) the records or values retrieved may differ between
     * calls (discontiguous or overlap) based on the type of the update.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../concepts/index.html#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     */
    struct GetRecordsByColumnRequest
    {

        /**
         * Constructs a GetRecordsByColumnRequest object with default parameter
         * values.
         */
        GetRecordsByColumnRequest() :
            tableName(std::string()),
            columnNames(std::vector<std::string>()),
            offset(int64_t()),
            limit(int64_t()),
            encoding(std::string("binary")),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a GetRecordsByColumnRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName  Name of the table on which this operation will
         *                       be performed. The table cannot be a parent
         *                       set.
         * @param[in] columnNames  The list of column values to retrieve.
         *                         Columns annotated as store only cannot be
         *                         retrieved.
         * @param[in] offset  A positive integer indicating the number of
         *                    initial results to skip (this can be useful for
         *                    paging through the results).  The minimum allowed
         *                    value is 0. The maximum allowed value is MAX_INT.
         * @param[in] limit  A positive integer indicating the maximum number
         *                   of results to be returned (if not provided the
         *                   default is 10000). Or END_OF_column (-9999) to
         *                   indicate that the max number of results should be
         *                   returned.
         * @param[in] options  Default value is an empty std::map.
         * <ul>
         *     <li>expression: Optional filter expression to apply to the table.  
         *     <li>sort_by: Optional column that the data should be sorted by. Empty by default (i.e. no sorting is applied).  
         *     <li>sort_order: String indicating how the returned values should be sorted - ascending or descending. Default is 'ascending'. Ignored if 'sort_by' option is not specified.  Default value is 'ascending'. values:ASCENDING, DESCENDING
         * </ul>
         * 
         */
        GetRecordsByColumnRequest(const std::string& tableName, const std::vector<std::string>& columnNames, const int64_t offset, const int64_t limit, const std::map<std::string, std::string>& options):
            tableName(tableName),
            columnNames(columnNames),
            offset(offset),
            limit(limit),
            encoding("binary"),
            options(options)
        {
        }

        /**
         * Constructs a GetRecordsByColumnRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName  Name of the table on which this operation will
         *                       be performed. The table cannot be a parent
         *                       set.
         * @param[in] columnNames  The list of column values to retrieve.
         *                         Columns annotated as store only cannot be
         *                         retrieved.
         * @param[in] offset  A positive integer indicating the number of
         *                    initial results to skip (this can be useful for
         *                    paging through the results).  The minimum allowed
         *                    value is 0. The maximum allowed value is MAX_INT.
         * @param[in] limit  A positive integer indicating the maximum number
         *                   of results to be returned (if not provided the
         *                   default is 10000). Or END_OF_column (-9999) to
         *                   indicate that the max number of results should be
         *                   returned.
         * @param[in] encoding  Specifies the encoding for returned records;
         *                      either 'binary' or 'json'.  Default value is
         *                      'binary'.
         * @param[in] options  Default value is an empty std::map.
         * <ul>
         *     <li>expression: Optional filter expression to apply to the table.  
         *     <li>sort_by: Optional column that the data should be sorted by. Empty by default (i.e. no sorting is applied).  
         *     <li>sort_order: String indicating how the returned values should be sorted - ascending or descending. Default is 'ascending'. Ignored if 'sort_by' option is not specified.  Default value is 'ascending'. values:ASCENDING, DESCENDING
         * </ul>
         * 
         */
        GetRecordsByColumnRequest(const std::string& tableName, const std::vector<std::string>& columnNames, const int64_t offset, const int64_t limit, const std::string& encoding, const std::map<std::string, std::string>& options):
            tableName(tableName),
            columnNames(columnNames),
            offset(offset),
            limit(limit),
            encoding(encoding),
            options(options)
        {
        }

        std::string tableName;
        std::vector<std::string> columnNames;
        int64_t offset;
        int64_t limit;
        std::string encoding;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::GetRecordsByColumnRequest>
    {
        static void encode(Encoder& e, const gpudb::GetRecordsByColumnRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.columnNames);
            ::avro::encode(e, v.offset);
            ::avro::encode(e, v.limit);
            ::avro::encode(e, v.encoding);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::GetRecordsByColumnRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.columnNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.offset);
                            break;

                        case 3:
                            ::avro::decode(d, v.limit);
                            break;

                        case 4:
                            ::avro::decode(d, v.encoding);
                            break;

                        case 5:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.columnNames);
                ::avro::decode(d, v.offset);
                ::avro::decode(d, v.limit);
                ::avro::decode(d, v.encoding);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #getRecordsByColumnRaw(const GetRecordsByColumnRequest&) const}.
     * <p>
     * For a given table, retrieves the values of the given columns within a
     * given range. It returns maps of column name to the vector of values for
     * each supported data type (double, float, long, int and string). This
     * operation supports pagination feature, i.e. values that are retrieved
     * are those associated with the indices between the start (offset) and end
     * value (offset + limit) parameters (inclusive). If there are num_points
     * values in the table then each of the indices between 0 and num_points-1
     * retrieves a unique value.
     * <p>
     * Note that when using the pagination feature, if the table (or the
     * underlying table in case of a view) is updated (records are inserted,
     * deleted or modified) the records or values retrieved may differ between
     * calls (discontiguous or overlap) based on the type of the update.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../concepts/index.html#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     */
    struct RawGetRecordsByColumnResponse
    {

        /**
         * Constructs a RawGetRecordsByColumnResponse object with default
         * parameter values.
         */
        RawGetRecordsByColumnResponse() :
            tableName(std::string()),
            responseSchemaStr(std::string()),
            binaryEncodedResponse(std::vector<uint8_t>()),
            jsonEncodedResponse(std::string()),
            totalNumberOfRecords(int64_t()),
            hasMoreRecords(bool())
        {
        }

        std::string tableName;
        std::string responseSchemaStr;
        std::vector<uint8_t> binaryEncodedResponse;
        std::string jsonEncodedResponse;
        int64_t totalNumberOfRecords;
        bool hasMoreRecords;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::RawGetRecordsByColumnResponse>
    {
        static void encode(Encoder& e, const gpudb::RawGetRecordsByColumnResponse& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.responseSchemaStr);
            ::avro::encode(e, v.binaryEncodedResponse);
            ::avro::encode(e, v.jsonEncodedResponse);
            ::avro::encode(e, v.totalNumberOfRecords);
            ::avro::encode(e, v.hasMoreRecords);
        }

        static void decode(Decoder& d, gpudb::RawGetRecordsByColumnResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.responseSchemaStr);
                            break;

                        case 2:
                            ::avro::decode(d, v.binaryEncodedResponse);
                            break;

                        case 3:
                            ::avro::decode(d, v.jsonEncodedResponse);
                            break;

                        case 4:
                            ::avro::decode(d, v.totalNumberOfRecords);
                            break;

                        case 5:
                            ::avro::decode(d, v.hasMoreRecords);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.responseSchemaStr);
                ::avro::decode(d, v.binaryEncodedResponse);
                ::avro::decode(d, v.jsonEncodedResponse);
                ::avro::decode(d, v.totalNumberOfRecords);
                ::avro::decode(d, v.hasMoreRecords);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #getRecordsByColumn(const GetRecordsByColumnRequest&) const}.
     * <p>
     * For a given table, retrieves the values of the given columns within a
     * given range. It returns maps of column name to the vector of values for
     * each supported data type (double, float, long, int and string). This
     * operation supports pagination feature, i.e. values that are retrieved
     * are those associated with the indices between the start (offset) and end
     * value (offset + limit) parameters (inclusive). If there are num_points
     * values in the table then each of the indices between 0 and num_points-1
     * retrieves a unique value.
     * <p>
     * Note that when using the pagination feature, if the table (or the
     * underlying table in case of a view) is updated (records are inserted,
     * deleted or modified) the records or values retrieved may differ between
     * calls (discontiguous or overlap) based on the type of the update.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../concepts/index.html#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     */
    struct GetRecordsByColumnResponse
    {

        /**
         * Constructs a GetRecordsByColumnResponse object with default
         * parameter values.
         */
        GetRecordsByColumnResponse() :
            tableName(std::string()),
            responseSchemaStr(std::string()),
            data(std::vector<gpudb::DynamicTableRecord>()),
            totalNumberOfRecords(int64_t()),
            hasMoreRecords(bool())
        {
        }

        std::string tableName;
        std::string responseSchemaStr;
        std::vector<gpudb::DynamicTableRecord> data;
        int64_t totalNumberOfRecords;
        bool hasMoreRecords;
    };
}

#endif
