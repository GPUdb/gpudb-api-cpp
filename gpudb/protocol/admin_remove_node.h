/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_REMOVE_NODE_H__
#define __ADMIN_REMOVE_NODE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #adminRemoveNode(const AdminRemoveNodeRequest&) const}.
     * <p>
     * Remove a node from the cluster.  Note that this operation could take a
     * long time to complete for big clusters.  The data is transferred to
     * other nodes in the cluster before the node is removed.
     */
    struct AdminRemoveNodeRequest
    {

        /**
         * Constructs an AdminRemoveNodeRequest object with default parameter
         * values.
         */
        AdminRemoveNodeRequest() :
            rank(int32_t()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminRemoveNodeRequest object with the specified
         * parameters.
         * 
         * @param[in] rank_  Rank number of the node being removed from the
         *                   cluster.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> gpudb::admin_remove_node_reshard:
         *                      When @a true, then the shards from nodes will
         *                      be moved to the other nodes in the cluster.
         *                      When false, then the node will only be removed
         *                      from the cluster if the node does not contain
         *                      any data shards, otherwise an error is
         *                      returned.  Note that for big clusters, this
         *                      data transfer could be time consuming and also
         *                      result in delay in responding to queries for
         *                      busy clusters.
         *                      <ul>
         *                              <li> gpudb::admin_remove_node_true
         *                              <li> gpudb::admin_remove_node_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::admin_remove_node_true.
         *                              <li> gpudb::admin_remove_node_force:
         *                      When @a true, the rank is immediately shutdown
         *                      and removed from the cluster.  This will result
         *                      in loss of any data that is present in the node
         *                      at the time of the request.
         *                      <ul>
         *                              <li> gpudb::admin_remove_node_true
         *                              <li> gpudb::admin_remove_node_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::admin_remove_node_false.
         *                      </ul>
         * 
         */
        AdminRemoveNodeRequest(const int32_t rank_, const std::map<std::string, std::string>& options_):
            rank( rank_ ),
            options( options_ )
        {
        }

        int32_t rank;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminRemoveNodeRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminRemoveNodeRequest& v)
        {
            ::avro::encode(e, v.rank);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminRemoveNodeRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.rank);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.rank);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #adminRemoveNode(const AdminRemoveNodeRequest&) const}.
     * <p>
     * Remove a node from the cluster.  Note that this operation could take a
     * long time to complete for big clusters.  The data is transferred to
     * other nodes in the cluster before the node is removed.
     */
    struct AdminRemoveNodeResponse
    {

        /**
         * Constructs an AdminRemoveNodeResponse object with default parameter
         * values.
         */
        AdminRemoveNodeResponse() :
            rank(int32_t())
        {
        }

        int32_t rank;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminRemoveNodeResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminRemoveNodeResponse& v)
        {
            ::avro::encode(e, v.rank);
        }

        static void decode(Decoder& d, gpudb::AdminRemoveNodeResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.rank);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.rank);
            }
        }
    };
}

#endif
