/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __AGGREGATE_MIN_MAX_H__
#define __AGGREGATE_MIN_MAX_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #aggregateMinMax(const AggregateMinMaxRequest&) const}.
     * <p>
     * Calculates and returns the minimum and maximum values of a particular
     * column in a table.
     */
    struct AggregateMinMaxRequest
    {

        /**
         * Constructs an AggregateMinMaxRequest object with default parameter
         * values.
         */
        AggregateMinMaxRequest() :
            tableName(std::string()),
            columnName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AggregateMinMaxRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Name of the table on which the operation will
         *                        be performed. Must be an existing table.
         * @param[in] columnName_  Name of a column or an expression of one or
         *                         more column on which the min-max will be
         *                         calculated.
         * @param[in] options_  Optional parameters.
         * 
         */
        AggregateMinMaxRequest(const std::string& tableName_, const std::string& columnName_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            columnName( columnName_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::string columnName;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AggregateMinMaxRequest>
    {
        static void encode(Encoder& e, const gpudb::AggregateMinMaxRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.columnName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AggregateMinMaxRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.columnName);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.columnName);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #aggregateMinMax(const AggregateMinMaxRequest&) const}.
     * <p>
     * Calculates and returns the minimum and maximum values of a particular
     * column in a table.
     */
    struct AggregateMinMaxResponse
    {

        /**
         * Constructs an AggregateMinMaxResponse object with default parameter
         * values.
         */
        AggregateMinMaxResponse() :
            min(double()),
            max(double())
        {
        }

        double min;
        double max;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AggregateMinMaxResponse>
    {
        static void encode(Encoder& e, const gpudb::AggregateMinMaxResponse& v)
        {
            ::avro::encode(e, v.min);
            ::avro::encode(e, v.max);
        }

        static void decode(Decoder& d, gpudb::AggregateMinMaxResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.min);
                            break;

                        case 1:
                            ::avro::decode(d, v.max);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.min);
                ::avro::decode(d, v.max);
            }
        }
    };
}

#endif
