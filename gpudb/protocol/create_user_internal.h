/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_USER_INTERNAL_H__
#define __CREATE_USER_INTERNAL_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #createUserInternal(const CreateUserInternalRequest&) const}.
     * <p>
     * Creates a new internal user (a user whose credentials are managed by
     * GPUdb).
     */
    struct CreateUserInternalRequest
    {

        /**
         * Constructs a CreateUserInternalRequest object with default parameter
         * values.
         */
        CreateUserInternalRequest() :
            name(std::string()),
            password(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a CreateUserInternalRequest object with the specified
         * parameters.
         * 
         * @param[in] name  Name of the user to be created. Must contain only
         *                  lowercase letters, digits, and underscores, and
         *                  cannot begin with a digit. Must not be the same
         *                  name as an existing user or role in GPUdb.
         * @param[in] password  Initial password of the user to be created. May
         *                      be an empty string for no password.
         * @param[in] options  Optional parameters.
         * 
         */
        CreateUserInternalRequest(const std::string& name, const std::string& password, const std::map<std::string, std::string>& options):
            name(name),
            password(password),
            options(options)
        {
        }

        std::string name;
        std::string password;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateUserInternalRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateUserInternalRequest& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.password);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateUserInternalRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.password);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.password);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #createUserInternal(const CreateUserInternalRequest&) const}.
     * <p>
     * Creates a new internal user (a user whose credentials are managed by
     * GPUdb).
     */
    struct CreateUserInternalResponse
    {

        /**
         * Constructs a CreateUserInternalResponse object with default
         * parameter values.
         */
        CreateUserInternalResponse() :
            name(std::string())
        {
        }

        std::string name;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::CreateUserInternalResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateUserInternalResponse& v)
        {
            ::avro::encode(e, v.name);
        }

        static void decode(Decoder& d, gpudb::CreateUserInternalResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
            }
        }
    };
}

#endif
