/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_ADD_NODE_H__
#define __ADMIN_ADD_NODE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #adminAddNode(const AdminAddNodeRequest&) const}.
     * <p>
     * Add a new node to the GPUdb cluster. By default this will only add the
     * node to the cluster, but will not be assigned any data shards. Set the
     * @a reshard option to @a true to move some shards from the other nodes in
     * the cluster to this node.
     */
    struct AdminAddNodeRequest
    {

        /**
         * Constructs an AdminAddNodeRequest object with default parameter
         * values.
         */
        AdminAddNodeRequest() :
            hostName(std::string()),
            gpuIndex(int32_t()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminAddNodeRequest object with the specified
         * parameters.
         * 
         * @param[in] hostName_  host name of the node being added to the
         *                       system.
         * @param[in] gpuIndex_
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> gpudb::admin_add_node_reshard: If
         *                      @a true, then some of the shards from all the
         *                      existing nodes will be moved to the new node
         *                      being added. Note that for big clusters, this
         *                      data transfer could be time consuming and also
         *                      result in delay in responding to queries for
         *                      busy clusters.
         *                      <ul>
         *                              <li> gpudb::admin_add_node_true
         *                              <li> gpudb::admin_add_node_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::admin_add_node_false.
         *                      </ul>
         * 
         */
        AdminAddNodeRequest(const std::string& hostName_, const int32_t gpuIndex_, const std::map<std::string, std::string>& options_):
            hostName( hostName_ ),
            gpuIndex( gpuIndex_ ),
            options( options_ )
        {
        }

        std::string hostName;
        int32_t gpuIndex;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminAddNodeRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminAddNodeRequest& v)
        {
            ::avro::encode(e, v.hostName);
            ::avro::encode(e, v.gpuIndex);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminAddNodeRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.hostName);
                            break;

                        case 1:
                            ::avro::decode(d, v.gpuIndex);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.hostName);
                ::avro::decode(d, v.gpuIndex);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #adminAddNode(const AdminAddNodeRequest&) const}.
     * <p>
     * Add a new node to the GPUdb cluster. By default this will only add the
     * node to the cluster, but will not be assigned any data shards. Set the
     * @a reshard option to @a true to move some shards from the other nodes in
     * the cluster to this node.
     */
    struct AdminAddNodeResponse
    {

        /**
         * Constructs an AdminAddNodeResponse object with default parameter
         * values.
         */
        AdminAddNodeResponse() :
            rank(int32_t())
        {
        }

        int32_t rank;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminAddNodeResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminAddNodeResponse& v)
        {
            ::avro::encode(e, v.rank);
        }

        static void decode(Decoder& d, gpudb::AdminAddNodeResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.rank);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.rank);
            }
        }
    };
}

#endif
