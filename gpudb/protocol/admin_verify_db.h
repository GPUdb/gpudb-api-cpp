/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_VERIFY_DB_H__
#define __ADMIN_VERIFY_DB_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #adminVerifyDb(const AdminVerifyDbRequest&) const}.
     * <p>
     * Verify database is in a consistent state.  When inconsistencies or
     * errors are found, the verified_ok flag in the response is set to false
     * and the list of errors found is provided in the error_list.
     */
    struct AdminVerifyDbRequest
    {

        /**
         * Constructs an AdminVerifyDbRequest object with default parameter
         * values.
         */
        AdminVerifyDbRequest() :
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminVerifyDbRequest object with the specified
         * parameters.
         * 
         * @param[in] options_  Optional parameters.  Default value is an empty
         *                      std::map.
         * 
         */
        AdminVerifyDbRequest(const std::map<std::string, std::string>& options_):
            options( options_ )
        {
        }

        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminVerifyDbRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminVerifyDbRequest& v)
        {
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminVerifyDbRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #adminVerifyDb(const AdminVerifyDbRequest&) const}.
     * <p>
     * Verify database is in a consistent state.  When inconsistencies or
     * errors are found, the verified_ok flag in the response is set to false
     * and the list of errors found is provided in the error_list.
     */
    struct AdminVerifyDbResponse
    {

        /**
         * Constructs an AdminVerifyDbResponse object with default parameter
         * values.
         */
        AdminVerifyDbResponse() :
            verifiedOk(bool()),
            errorList(std::vector<std::string>())
        {
        }

        bool verifiedOk;
        std::vector<std::string> errorList;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminVerifyDbResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminVerifyDbResponse& v)
        {
            ::avro::encode(e, v.verifiedOk);
            ::avro::encode(e, v.errorList);
        }

        static void decode(Decoder& d, gpudb::AdminVerifyDbResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.verifiedOk);
                            break;

                        case 1:
                            ::avro::decode(d, v.errorList);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.verifiedOk);
                ::avro::decode(d, v.errorList);
            }
        }
    };
}

#endif
