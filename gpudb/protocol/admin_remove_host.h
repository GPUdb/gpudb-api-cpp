/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_REMOVE_HOST_H__
#define __ADMIN_REMOVE_HOST_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #adminRemoveHost(const AdminRemoveHostRequest&) const}.
     * <p>
     * Removes a host from an existing cluster. If the host to be removed has
     * any ranks running on it, the ranks must be removed using {@link
     * #adminRemoveRanks(const AdminRemoveRanksRequest&) const} or manually
     * switched over to a new host using {@link
     * #adminSwitchover(const AdminSwitchoverRequest&) const} prior to host
     * removal. If the host to be removed has the graph server or SQL planner
     * running on it, these must be manually switched over to a new host using
     * {@link #adminSwitchover(const AdminSwitchoverRequest&) const}.
     */
    struct AdminRemoveHostRequest
    {

        /**
         * Constructs an AdminRemoveHostRequest object with default parameter
         * values.
         */
        AdminRemoveHostRequest() :
            host(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminRemoveHostRequest object with the specified
         * parameters.
         * 
         * @param[in] host_  Identifies the host this applies to. Can be the
         *                   host address, or formatted as 'hostN' where N is
         *                   the host number as specified in gpudb.conf
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> gpudb::admin_remove_host_dry_run:
         *                      If set to @a true, only validation checks will
         *                      be performed. No host is removed.
         *                      <ul>
         *                              <li> gpudb::admin_remove_host_true
         *                              <li> gpudb::admin_remove_host_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::admin_remove_host_false.
         *                      </ul>
         * 
         */
        AdminRemoveHostRequest(const std::string& host_, const std::map<std::string, std::string>& options_):
            host( host_ ),
            options( options_ )
        {
        }

        std::string host;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminRemoveHostRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminRemoveHostRequest& v)
        {
            ::avro::encode(e, v.host);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminRemoveHostRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.host);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.host);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #adminRemoveHost(const AdminRemoveHostRequest&) const}.
     * <p>
     * Removes a host from an existing cluster. If the host to be removed has
     * any ranks running on it, the ranks must be removed using {@link
     * #adminRemoveRanks(const AdminRemoveRanksRequest&) const} or manually
     * switched over to a new host using {@link
     * #adminSwitchover(const AdminSwitchoverRequest&) const} prior to host
     * removal. If the host to be removed has the graph server or SQL planner
     * running on it, these must be manually switched over to a new host using
     * {@link #adminSwitchover(const AdminSwitchoverRequest&) const}.
     */
    struct AdminRemoveHostResponse
    {

        /**
         * Constructs an AdminRemoveHostResponse object with default parameter
         * values.
         */
        AdminRemoveHostResponse() :
            info(std::map<std::string, std::string>())
        {
        }

        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminRemoveHostResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminRemoveHostResponse& v)
        {
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AdminRemoveHostResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
