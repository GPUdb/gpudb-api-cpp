/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_SECURITY_H__
#define __SHOW_SECURITY_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #showSecurity(const ShowSecurityRequest&) const}.
     * <p>
     * Shows security information relating to users and/or roles.
     */
    struct ShowSecurityRequest
    {

        /**
         * Constructs a ShowSecurityRequest object with default parameter
         * values.
         */
        ShowSecurityRequest() :
            names(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowSecurityRequest object with the specified
         * parameters.
         * 
         * @param[in] names  A list of names of users and/or roles about which
         *                   security information is requested. If none are
         *                   provided, information about all users and roles
         *                   will be returned.
         * @param[in] options  Optional parameters.
         * 
         */
        ShowSecurityRequest(const std::vector<std::string>& names, const std::map<std::string, std::string>& options):
            names(names),
            options(options)
        {
        }

        std::vector<std::string> names;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowSecurityRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowSecurityRequest& v)
        {
            ::avro::encode(e, v.names);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowSecurityRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.names);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.names);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #showSecurity(const ShowSecurityRequest&) const}.
     * <p>
     * Shows security information relating to users and/or roles.
     */
    struct ShowSecurityResponse
    {

        /**
         * Constructs a ShowSecurityResponse object with default parameter
         * values.
         */
        ShowSecurityResponse() :
            types(std::map<std::string, std::string>()),
            roles(std::map<std::string, std::vector<std::string> >()),
            permissions(std::map<std::string, std::vector<std::map<std::string, std::string> > >())
        {
        }

        std::map<std::string, std::string> types;
        std::map<std::string, std::vector<std::string> > roles;
        std::map<std::string, std::vector<std::map<std::string, std::string> > > permissions;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowSecurityResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowSecurityResponse& v)
        {
            ::avro::encode(e, v.types);
            ::avro::encode(e, v.roles);
            ::avro::encode(e, v.permissions);
        }

        static void decode(Decoder& d, gpudb::ShowSecurityResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.types);
                            break;

                        case 1:
                            ::avro::decode(d, v.roles);
                            break;

                        case 2:
                            ::avro::decode(d, v.permissions);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.types);
                ::avro::decode(d, v.roles);
                ::avro::decode(d, v.permissions);
            }
        }
    };
}

#endif
