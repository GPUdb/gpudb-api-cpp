/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __MERGE_RECORDS_H__
#define __MERGE_RECORDS_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #mergeRecords(const MergeRecordsRequest&) const}.
     * <p>
     * Create a new empty result table (specified by @a tableName), and insert
     * all records from source tables (specified by @a sourceTableNames) based
     * on the field mapping information (specified by @a fieldMaps). The field
     * map (specified by @a fieldMaps) holds the user specified maps of target
     * table column names to source table columns.
     */
    struct MergeRecordsRequest
    {

        /**
         * Constructs a MergeRecordsRequest object with default parameter
         * values.
         */
        MergeRecordsRequest() :
            tableName(std::string()),
            sourceTableNames(std::vector<std::string>()),
            fieldMaps(std::vector<std::map<std::string, std::string> >()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a MergeRecordsRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  The new result table name for the records to
         *                        be merged.  Must NOT be an existing table.
         * @param[in] sourceTableNames_  The list of source table names to get
         *                               the records from. Must be existing
         *                               table names.
         * @param[in] fieldMaps_  Contains the mapping of column names from
         *                        result table (specified by @a tableName) as
         *                        the keys, and corresponding column names from
         *                        a table from source tables (specified by @a
         *                        sourceTableNames). Must be existing column
         *                        names in source table and target table, and
         *                        their types must be matched.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::merge_records_collection_name: Name of a
         *                      collection which is to contain the newly
         *                      created merged table (specified by @a
         *                      tableName). If empty, then the newly created
         *                      merged table will be a top-level table. If the
         *                      collection does not allow duplicate types and
         *                      it contains a table of the same type as the
         *                      given one, then this table creation request
         *                      will fail.
         *                              <li>
         *                      gpudb::merge_records_is_replicated: For a
         *                      merged table (specified by @a tableName),
         *                      indicates whether the table is to be replicated
         *                      to all the database ranks. This may be
         *                      necessary when the table is to be joined with
         *                      other tables in a query.
         *                      <ul>
         *                              <li> gpudb::merge_records_true
         *                              <li> gpudb::merge_records_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::merge_records_false.
         *                              <li> gpudb::merge_records_ttl: Sets the
         *                      TTL of the merged table or collection
         *                      (specified by @a tableName). The value must be
         *                      the desired TTL in minutes.
         *                              <li> gpudb::merge_records_chunk_size:
         *                      If provided this indicates the chunk size to be
         *                      used for the merged table.
         *                      </ul>
         * 
         */
        MergeRecordsRequest(const std::string& tableName_, const std::vector<std::string>& sourceTableNames_, const std::vector<std::map<std::string, std::string> >& fieldMaps_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            sourceTableNames( sourceTableNames_ ),
            fieldMaps( fieldMaps_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::vector<std::string> sourceTableNames;
        std::vector<std::map<std::string, std::string> > fieldMaps;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::MergeRecordsRequest>
    {
        static void encode(Encoder& e, const gpudb::MergeRecordsRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.sourceTableNames);
            ::avro::encode(e, v.fieldMaps);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::MergeRecordsRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.sourceTableNames);
                            break;

                        case 2:
                            ::avro::decode(d, v.fieldMaps);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.sourceTableNames);
                ::avro::decode(d, v.fieldMaps);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #mergeRecords(const MergeRecordsRequest&) const}.
     * <p>
     * Create a new empty result table (specified by @a tableName), and insert
     * all records from source tables (specified by @a sourceTableNames) based
     * on the field mapping information (specified by @a fieldMaps). The field
     * map (specified by @a fieldMaps) holds the user specified maps of target
     * table column names to source table columns.
     */
    struct MergeRecordsResponse
    {

        /**
         * Constructs a MergeRecordsResponse object with default parameter
         * values.
         */
        MergeRecordsResponse() :
            tableName(std::string())
        {
        }

        std::string tableName;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::MergeRecordsResponse>
    {
        static void encode(Encoder& e, const gpudb::MergeRecordsResponse& v)
        {
            ::avro::encode(e, v.tableName);
        }

        static void decode(Decoder& d, gpudb::MergeRecordsResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
            }
        }
    };
}

#endif
