/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __EXECUTE_PROC_H__
#define __EXECUTE_PROC_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #executeProc(const ExecuteProcRequest&) const}.
     * <p>
     * Executes a proc in the GPUdb Node.js proc server.
     */
    struct ExecuteProcRequest
    {

        /**
         * Constructs an ExecuteProcRequest object with default parameter
         * values.
         */
        ExecuteProcRequest() :
            name(std::string()),
            params(std::map<std::string, std::string>()),
            binParams(std::map<std::string, std::vector<uint8_t> >()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an ExecuteProcRequest object with the specified
         * parameters.
         * 
         * @param[in] name  Name of the proc to execute.
         * @param[in] params  A map containing string parameters to pass to the
         *                    proc. Each key/value pair specifies the name of a
         *                    parameter and its value.
         * @param[in] binParams  A map containing binary parameters to pass to
         *                       the proc. Each key/value pair specifies the
         *                       name of a parameter and its value.
         * @param[in] options  Optional parameters.  Default value is an empty
         *                     std::map.
         * 
         */
        ExecuteProcRequest(const std::string& name, const std::map<std::string, std::string>& params, const std::map<std::string, std::vector<uint8_t> >& binParams, const std::map<std::string, std::string>& options):
            name(name),
            params(params),
            binParams(binParams),
            options(options)
        {
        }

        std::string name;
        std::map<std::string, std::string> params;
        std::map<std::string, std::vector<uint8_t> > binParams;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ExecuteProcRequest>
    {
        static void encode(Encoder& e, const gpudb::ExecuteProcRequest& v)
        {
            ::avro::encode(e, v.name);
            ::avro::encode(e, v.params);
            ::avro::encode(e, v.binParams);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ExecuteProcRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.name);
                            break;

                        case 1:
                            ::avro::decode(d, v.params);
                            break;

                        case 2:
                            ::avro::decode(d, v.binParams);
                            break;

                        case 3:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.name);
                ::avro::decode(d, v.params);
                ::avro::decode(d, v.binParams);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #executeProc(const ExecuteProcRequest&) const}.
     * <p>
     * Executes a proc in the GPUdb Node.js proc server.
     */
    struct ExecuteProcResponse
    {

        /**
         * Constructs an ExecuteProcResponse object with default parameter
         * values.
         */
        ExecuteProcResponse() :
            results(std::map<std::string, std::string>()),
            binResults(std::map<std::string, std::vector<uint8_t> >())
        {
        }

        std::map<std::string, std::string> results;
        std::map<std::string, std::vector<uint8_t> > binResults;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ExecuteProcResponse>
    {
        static void encode(Encoder& e, const gpudb::ExecuteProcResponse& v)
        {
            ::avro::encode(e, v.results);
            ::avro::encode(e, v.binResults);
        }

        static void decode(Decoder& d, gpudb::ExecuteProcResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.results);
                            break;

                        case 1:
                            ::avro::decode(d, v.binResults);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.results);
                ::avro::decode(d, v.binResults);
            }
        }
    };
}

#endif
