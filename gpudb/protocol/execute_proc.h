/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __EXECUTE_PROC_H__
#define __EXECUTE_PROC_H__

    /**
     * @private
     */

namespace gpudb
{

    /**
     * @private
     * A set of input parameters for {@link
     * #executeProc(const ExecuteProcRequest&) const}.
     * <p>
     */
    struct ExecuteProcRequest
    {

        /**
         * @private
         * Constructs an ExecuteProcRequest object with default parameter
         * values.
         */
        ExecuteProcRequest() :
            procName(std::string()),
            params(std::map<std::string, std::string>()),
            binParams(std::map<std::string, std::vector<uint8_t> >()),
            inputTableNames(std::vector<std::string>()),
            inputColumnNames(std::map<std::string, std::vector<std::string> >()),
            outputTableNames(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * @private
         * Constructs an ExecuteProcRequest object with the specified
         * parameters.
         * 
         * @param[in] procName
         * @param[in] params
         * @param[in] binParams
         * @param[in] inputTableNames
         * @param[in] inputColumnNames
         * @param[in] outputTableNames
         * @param[in] options
         * 
         */
        ExecuteProcRequest(const std::string& procName, const std::map<std::string, std::string>& params, const std::map<std::string, std::vector<uint8_t> >& binParams, const std::vector<std::string>& inputTableNames, const std::map<std::string, std::vector<std::string> >& inputColumnNames, const std::vector<std::string>& outputTableNames, const std::map<std::string, std::string>& options):
            procName(procName),
            params(params),
            binParams(binParams),
            inputTableNames(inputTableNames),
            inputColumnNames(inputColumnNames),
            outputTableNames(outputTableNames),
            options(options)
        {
        }

    /**
     * @private
     */

        std::string procName;
        std::map<std::string, std::string> params;
        std::map<std::string, std::vector<uint8_t> > binParams;
        std::vector<std::string> inputTableNames;
        std::map<std::string, std::vector<std::string> > inputColumnNames;
        std::vector<std::string> outputTableNames;
        std::map<std::string, std::string> options;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::ExecuteProcRequest>
    {
        static void encode(Encoder& e, const gpudb::ExecuteProcRequest& v)
        {
            ::avro::encode(e, v.procName);
            ::avro::encode(e, v.params);
            ::avro::encode(e, v.binParams);
            ::avro::encode(e, v.inputTableNames);
            ::avro::encode(e, v.inputColumnNames);
            ::avro::encode(e, v.outputTableNames);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ExecuteProcRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.procName);
                            break;

                        case 1:
                            ::avro::decode(d, v.params);
                            break;

                        case 2:
                            ::avro::decode(d, v.binParams);
                            break;

                        case 3:
                            ::avro::decode(d, v.inputTableNames);
                            break;

                        case 4:
                            ::avro::decode(d, v.inputColumnNames);
                            break;

                        case 5:
                            ::avro::decode(d, v.outputTableNames);
                            break;

                        case 6:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.procName);
                ::avro::decode(d, v.params);
                ::avro::decode(d, v.binParams);
                ::avro::decode(d, v.inputTableNames);
                ::avro::decode(d, v.inputColumnNames);
                ::avro::decode(d, v.outputTableNames);
                ::avro::decode(d, v.options);
            }
        }
    };
}

    /**
     * @private
     */

namespace gpudb
{

    /**
     * @private
     * A set of output parameters for {@link
     * #executeProc(const ExecuteProcRequest&) const}.
     * <p>
     */
    struct ExecuteProcResponse
    {

        /**
         * @private
         * Constructs an ExecuteProcResponse object with default parameter
         * values.
         */
        ExecuteProcResponse() :
            runId(std::string())
        {
        }

    /**
     * @private
     */

        std::string runId;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::ExecuteProcResponse>
    {
        static void encode(Encoder& e, const gpudb::ExecuteProcResponse& v)
        {
            ::avro::encode(e, v.runId);
        }

        static void decode(Decoder& d, gpudb::ExecuteProcResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.runId);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.runId);
            }
        }
    };
}

#endif
