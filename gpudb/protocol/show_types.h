/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_TYPES_H__
#define __SHOW_TYPES_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #showTypes(const ShowTypesRequest&) const}.
     * <p>
     * Retrieves information for the specified data type. Given a type ID, the
     * database returns the data type schema, the label, and the semantic type
     * along with the type ID. If the user provides any combination of label
     * and semantic type, then the database returns the pertinent information
     * for all data types that match the input criteria.
     */
    struct ShowTypesRequest
    {

        /**
         * Constructs a ShowTypesRequest object with default parameter values.
         */
        ShowTypesRequest() :
            typeId(std::string()),
            label(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowTypesRequest object with the specified parameters.
         * 
         * @param[in] typeId_  Type Id returned in response to a call to
         *                     /create/type.
         * @param[in] label_  Option string that was supplied by user in a call
         *                    to /create/type.
         * @param[in] options_  Optional parameters.  Default value is an empty
         *                      std::map.
         * 
         */
        ShowTypesRequest(const std::string& typeId_, const std::string& label_, const std::map<std::string, std::string>& options_):
            typeId( typeId_ ),
            label( label_ ),
            options( options_ )
        {
        }

        std::string typeId;
        std::string label;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowTypesRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowTypesRequest& v)
        {
            ::avro::encode(e, v.typeId);
            ::avro::encode(e, v.label);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowTypesRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.typeId);
                            break;

                        case 1:
                            ::avro::decode(d, v.label);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.typeId);
                ::avro::decode(d, v.label);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #showTypes(const ShowTypesRequest&) const}.
     * <p>
     * Retrieves information for the specified data type. Given a type ID, the
     * database returns the data type schema, the label, and the semantic type
     * along with the type ID. If the user provides any combination of label
     * and semantic type, then the database returns the pertinent information
     * for all data types that match the input criteria.
     */
    struct ShowTypesResponse
    {

        /**
         * Constructs a ShowTypesResponse object with default parameter values.
         */
        ShowTypesResponse() :
            typeIds(std::vector<std::string>()),
            typeSchemas(std::vector<std::string>()),
            labels(std::vector<std::string>()),
            properties(std::vector<std::map<std::string, std::vector<std::string> > >())
        {
        }

        std::vector<std::string> typeIds;
        std::vector<std::string> typeSchemas;
        std::vector<std::string> labels;
        std::vector<std::map<std::string, std::vector<std::string> > > properties;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowTypesResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowTypesResponse& v)
        {
            ::avro::encode(e, v.typeIds);
            ::avro::encode(e, v.typeSchemas);
            ::avro::encode(e, v.labels);
            ::avro::encode(e, v.properties);
        }

        static void decode(Decoder& d, gpudb::ShowTypesResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.typeIds);
                            break;

                        case 1:
                            ::avro::decode(d, v.typeSchemas);
                            break;

                        case 2:
                            ::avro::decode(d, v.labels);
                            break;

                        case 3:
                            ::avro::decode(d, v.properties);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.typeIds);
                ::avro::decode(d, v.typeSchemas);
                ::avro::decode(d, v.labels);
                ::avro::decode(d, v.properties);
            }
        }
    };
}

#endif
