/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __CREATE_PROC_H__
#define __CREATE_PROC_H__

    /**
     * @private
     */

namespace gpudb
{

    /**
     * @private
     * A set of input parameters for {@link
     * #createProc(const CreateProcRequest&) const}.
     * <p>
     */
    struct CreateProcRequest
    {

        /**
         * @private
         * Constructs a CreateProcRequest object with default parameter values.
         */
        CreateProcRequest() :
            procName(std::string()),
            files(std::map<std::string, std::vector<uint8_t> >()),
            command(std::string()),
            args(std::vector<std::string>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * @private
         * Constructs a CreateProcRequest object with the specified parameters.
         * 
         * @param[in] procName
         * @param[in] files
         * @param[in] command
         * @param[in] args
         * @param[in] options
         *                     <ul>
         *                             <li> nondistributed: Values: 'true',
         *                     'false'.
         *                     </ul>
         * 
         */
        CreateProcRequest(const std::string& procName, const std::map<std::string, std::vector<uint8_t> >& files, const std::string& command, const std::vector<std::string>& args, const std::map<std::string, std::string>& options):
            procName(procName),
            files(files),
            command(command),
            args(args),
            options(options)
        {
        }

    /**
     * @private
     */

        std::string procName;
        std::map<std::string, std::vector<uint8_t> > files;
        std::string command;
        std::vector<std::string> args;
        std::map<std::string, std::string> options;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::CreateProcRequest>
    {
        static void encode(Encoder& e, const gpudb::CreateProcRequest& v)
        {
            ::avro::encode(e, v.procName);
            ::avro::encode(e, v.files);
            ::avro::encode(e, v.command);
            ::avro::encode(e, v.args);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::CreateProcRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.procName);
                            break;

                        case 1:
                            ::avro::decode(d, v.files);
                            break;

                        case 2:
                            ::avro::decode(d, v.command);
                            break;

                        case 3:
                            ::avro::decode(d, v.args);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.procName);
                ::avro::decode(d, v.files);
                ::avro::decode(d, v.command);
                ::avro::decode(d, v.args);
                ::avro::decode(d, v.options);
            }
        }
    };
}

    /**
     * @private
     */

namespace gpudb
{

    /**
     * @private
     * A set of output parameters for {@link
     * #createProc(const CreateProcRequest&) const}.
     * <p>
     */
    struct CreateProcResponse
    {

        /**
         * @private
         * Constructs a CreateProcResponse object with default parameter
         * values.
         */
        CreateProcResponse() :
            procName(std::string())
        {
        }

    /**
     * @private
     */

        std::string procName;
    };
}

    /**
     * @private
     */

namespace avro
{
    template<> struct codec_traits<gpudb::CreateProcResponse>
    {
        static void encode(Encoder& e, const gpudb::CreateProcResponse& v)
        {
            ::avro::encode(e, v.procName);
        }

        static void decode(Decoder& d, gpudb::CreateProcResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.procName);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.procName);
            }
        }
    };
}

#endif
