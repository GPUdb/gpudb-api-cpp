/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __GRANT_ROLE_H__
#define __GRANT_ROLE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #grantRole(const GrantRoleRequest&) const}.
     * <p>
     * Grants membership in a role to a user or role.
     */
    struct GrantRoleRequest
    {

        /**
         * Constructs a GrantRoleRequest object with default parameter values.
         */
        GrantRoleRequest() :
            role(std::string()),
            member(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a GrantRoleRequest object with the specified parameters.
         * 
         * @param[in] role_  Name of the role in which membership will be
         *                   granted. Must be an existing role.
         * @param[in] member_  Name of the user or role that will be granted
         *                     membership in @a role. Must be an existing user
         *                     or role.
         * @param[in] options_  Optional parameters.
         * 
         */
        GrantRoleRequest(const std::string& role_, const std::string& member_, const std::map<std::string, std::string>& options_):
            role( role_ ),
            member( member_ ),
            options( options_ )
        {
        }

        std::string role;
        std::string member;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::GrantRoleRequest>
    {
        static void encode(Encoder& e, const gpudb::GrantRoleRequest& v)
        {
            ::avro::encode(e, v.role);
            ::avro::encode(e, v.member);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::GrantRoleRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.role);
                            break;

                        case 1:
                            ::avro::decode(d, v.member);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.role);
                ::avro::decode(d, v.member);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #grantRole(const GrantRoleRequest&) const}.
     * <p>
     * Grants membership in a role to a user or role.
     */
    struct GrantRoleResponse
    {

        /**
         * Constructs a GrantRoleResponse object with default parameter values.
         */
        GrantRoleResponse() :
            role(std::string()),
            member(std::string()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string role;
        std::string member;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::GrantRoleResponse>
    {
        static void encode(Encoder& e, const gpudb::GrantRoleResponse& v)
        {
            ::avro::encode(e, v.role);
            ::avro::encode(e, v.member);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::GrantRoleResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.role);
                            break;

                        case 1:
                            ::avro::decode(d, v.member);
                            break;

                        case 2:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.role);
                ::avro::decode(d, v.member);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
