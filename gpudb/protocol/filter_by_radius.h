/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __FILTER_BY_RADIUS_H__
#define __FILTER_BY_RADIUS_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #filterByRadius(const FilterByRadiusRequest&) const}.
     * <p>
     * Calculates which objects from a table lie within a circle with the given
     * radius and center point (i.e. circular NAI). The operation is
     * synchronous, meaning that a response will not be returned until all the
     * objects are fully available. The response payload provides the count of
     * the resulting set. A new resultant set (view) which satisfies the input
     * circular NAI restriction specification is also created if a @a viewName
     * is passed in as part of the request.
     * <p>
     * For track data, all track points that lie within the circle plus one
     * point on either side of the circle (if the track goes beyond the circle)
     * will be included in the result. For shapes, e.g. polygons, all polygons
     * that intersect the circle will be included (even if none of the points
     * of the polygon fall within the circle).
     */
    struct FilterByRadiusRequest
    {

        /**
         * Constructs a FilterByRadiusRequest object with default parameter
         * values.
         */
        FilterByRadiusRequest() :
            tableName(std::string()),
            viewName(std::string()),
            xColumnName(std::string()),
            xCenter(double()),
            yColumnName(std::string()),
            yCenter(double()),
            radius(double()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a FilterByRadiusRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Name of the table on which the filter by
         *                        radius operation will be performed.  Must be
         *                        an existing table.
         * @param[in] viewName_  If provided, then this will be the name of the
         *                       view containing the results. Must not be an
         *                       already existing collection, table or view.
         *                       Default value is an empty string.
         * @param[in] xColumnName_  Name of the column to be used for the
         *                          x-coordinate (the longitude) of the center.
         * @param[in] xCenter_  Value of the longitude of the center. Must be
         *                      within [-180.0, 180.0].  The minimum allowed
         *                      value is -180. The maximum allowed value is
         *                      180.
         * @param[in] yColumnName_  Name of the column to be used for the
         *                          y-coordinate-the latitude-of the center.
         * @param[in] yCenter_  Value of the latitude of the center. Must be
         *                      within [-90.0, 90.0].  The minimum allowed
         *                      value is -90. The maximum allowed value is 90.
         * @param[in] radius_  The radius of the circle within which the search
         *                     will be performed. Must be a non-zero positive
         *                     value. It is in meters; so, for example, a value
         *                     of '42000' means 42 km.  The minimum allowed
         *                     value is 0. The maximum allowed value is
         *                     MAX_INT.
         * @param[in] options_  Optional parameters.  Default value is an empty
         *                      std::map.
         * 
         */
        FilterByRadiusRequest(const std::string& tableName_, const std::string& viewName_, const std::string& xColumnName_, const double xCenter_, const std::string& yColumnName_, const double yCenter_, const double radius_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            viewName( viewName_ ),
            xColumnName( xColumnName_ ),
            xCenter( xCenter_ ),
            yColumnName( yColumnName_ ),
            yCenter( yCenter_ ),
            radius( radius_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::string viewName;
        std::string xColumnName;
        double xCenter;
        std::string yColumnName;
        double yCenter;
        double radius;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::FilterByRadiusRequest>
    {
        static void encode(Encoder& e, const gpudb::FilterByRadiusRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.viewName);
            ::avro::encode(e, v.xColumnName);
            ::avro::encode(e, v.xCenter);
            ::avro::encode(e, v.yColumnName);
            ::avro::encode(e, v.yCenter);
            ::avro::encode(e, v.radius);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::FilterByRadiusRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.viewName);
                            break;

                        case 2:
                            ::avro::decode(d, v.xColumnName);
                            break;

                        case 3:
                            ::avro::decode(d, v.xCenter);
                            break;

                        case 4:
                            ::avro::decode(d, v.yColumnName);
                            break;

                        case 5:
                            ::avro::decode(d, v.yCenter);
                            break;

                        case 6:
                            ::avro::decode(d, v.radius);
                            break;

                        case 7:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.viewName);
                ::avro::decode(d, v.xColumnName);
                ::avro::decode(d, v.xCenter);
                ::avro::decode(d, v.yColumnName);
                ::avro::decode(d, v.yCenter);
                ::avro::decode(d, v.radius);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #filterByRadius(const FilterByRadiusRequest&) const}.
     * <p>
     * Calculates which objects from a table lie within a circle with the given
     * radius and center point (i.e. circular NAI). The operation is
     * synchronous, meaning that a response will not be returned until all the
     * objects are fully available. The response payload provides the count of
     * the resulting set. A new resultant set (view) which satisfies the input
     * circular NAI restriction specification is also created if a @a viewName
     * is passed in as part of the request.
     * <p>
     * For track data, all track points that lie within the circle plus one
     * point on either side of the circle (if the track goes beyond the circle)
     * will be included in the result. For shapes, e.g. polygons, all polygons
     * that intersect the circle will be included (even if none of the points
     * of the polygon fall within the circle).
     */
    struct FilterByRadiusResponse
    {

        /**
         * Constructs a FilterByRadiusResponse object with default parameter
         * values.
         */
        FilterByRadiusResponse() :
            count(int64_t())
        {
        }

        int64_t count;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::FilterByRadiusResponse>
    {
        static void encode(Encoder& e, const gpudb::FilterByRadiusResponse& v)
        {
            ::avro::encode(e, v.count);
        }

        static void decode(Decoder& d, gpudb::FilterByRadiusResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.count);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.count);
            }
        }
    };
}

#endif
