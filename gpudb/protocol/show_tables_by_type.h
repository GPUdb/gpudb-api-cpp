/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __SHOW_TABLES_BY_TYPE_H__
#define __SHOW_TABLES_BY_TYPE_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #showTablesByType(const ShowTablesByTypeRequest&) const}.
     * <p>
     * Gets names of the tables whose type matches the given criteria. Each
     * table has a particular type. This type is made out of the type label,
     * schema of the table, and the semantic type of the table. This function
     * allows a look up of the existing tables based on full or partial type
     * information. The operation is synchronous.
     */
    struct ShowTablesByTypeRequest
    {

        /**
         * Constructs a ShowTablesByTypeRequest object with default parameter
         * values.
         */
        ShowTablesByTypeRequest() :
            typeId(std::string()),
            label(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a ShowTablesByTypeRequest object with the specified
         * parameters.
         * 
         * @param[in] typeId_  Type id returned by a call to /create/type.
         * @param[in] label_  Optional user supplied label which can be used
         *                    instead of the type_id to retrieve all tables
         *                    with the given label.
         * @param[in] options_  Optional parameters.
         * 
         */
        ShowTablesByTypeRequest(const std::string& typeId_, const std::string& label_, const std::map<std::string, std::string>& options_):
            typeId( typeId_ ),
            label( label_ ),
            options( options_ )
        {
        }

        std::string typeId;
        std::string label;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowTablesByTypeRequest>
    {
        static void encode(Encoder& e, const gpudb::ShowTablesByTypeRequest& v)
        {
            ::avro::encode(e, v.typeId);
            ::avro::encode(e, v.label);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::ShowTablesByTypeRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.typeId);
                            break;

                        case 1:
                            ::avro::decode(d, v.label);
                            break;

                        case 2:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.typeId);
                ::avro::decode(d, v.label);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #showTablesByType(const ShowTablesByTypeRequest&) const}.
     * <p>
     * Gets names of the tables whose type matches the given criteria. Each
     * table has a particular type. This type is made out of the type label,
     * schema of the table, and the semantic type of the table. This function
     * allows a look up of the existing tables based on full or partial type
     * information. The operation is synchronous.
     */
    struct ShowTablesByTypeResponse
    {

        /**
         * Constructs a ShowTablesByTypeResponse object with default parameter
         * values.
         */
        ShowTablesByTypeResponse() :
            tableNames(std::vector<std::string>())
        {
        }

        std::vector<std::string> tableNames;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::ShowTablesByTypeResponse>
    {
        static void encode(Encoder& e, const gpudb::ShowTablesByTypeResponse& v)
        {
            ::avro::encode(e, v.tableNames);
        }

        static void decode(Decoder& d, gpudb::ShowTablesByTypeResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableNames);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableNames);
            }
        }
    };
}

#endif
