/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __INSERT_RECORDS_H__
#define __INSERT_RECORDS_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #insertRecordsRaw(const RawInsertRecordsRequest&) const}.
     * <p>
     * Adds multiple records to the specified table. The operation is
     * synchronous meaning that GPUdb will not return a response until all the
     * records are fully inserted and available. The response payload provides
     * the counts of the number of records actually inserted and/or updated,
     * and can provide the unique identifier of each added record.
     * <p>
     * The @a options parameter can be used to customize this function's
     * behavior.  The @a update_on_existing_pk option specifies the primary-key
     * collision policy.  If the table has a {@link
     * #createType(const CreateTypeRequest&) const primary key} and if @a
     * update_on_existing_pk is @a true, then if any of the records being added
     * have the same primary key as existing records, the existing records are
     * replaced (i.e. updated) with the given records.  If @a
     * update_on_existing_pk is @a false and if the records being added have
     * the same primary key as existing records, they are ignored (the existing
     * records are left unchanged).  It is quite possible that in this case
     * some of the given records will be inserted and some (those having
     * existing primary keys) will be ignored (or updated).  If the specified
     * table does not have a primary key column, then the @a
     * update_on_existing_pk option is ignored.
     * <p>
     * The @a return_record_ids option indicates that the database should
     * return the unique identifiers of inserted records.
     * <p>
     * The @a route_to_address option directs that inserted records should be
     * targeted for a particular database node.
     */
    struct RawInsertRecordsRequest
    {

        /**
         * Constructs a RawInsertRecordsRequest object with default parameter
         * values.
         */
        RawInsertRecordsRequest() :
            tableName(std::string()),
            list(std::vector<std::vector<uint8_t> >()),
            listStr(std::vector<std::string>()),
            listEncoding(std::string("binary")),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a RawInsertRecordsRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Table to which the records are to be added.
         *                        Must be an existing table.
         * @param[in] list_  An array of binary-encoded data for the records to
         *                   be added. All records must be of the same type as
         *                   that of the table. Empty array if @a listEncoding
         *                   is @a json.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> update_on_existing_pk: If the
         *                      table has a /create/type, then if the value is
         *                      @a true then if any of the records being added
         *                      have the same primary key as existing records,
         *                      the existing records are replaced (i.e.
         *                      updated) with the given records. If @a false,
         *                      and if the records being added have the same
         *                      primary key as existing records, they are
         *                      ignored (the existing records are left
         *                      unchanged).  It is quite possible that in this
         *                      case some of the given records will be inserted
         *                      and some (those having existing primary keys)
         *                      will be ignored (or updated). If the specified
         *                      table does not have a primary key column then
         *                      this optional parameter is ignored. Values:
         *                      'true', 'false'.
         *                              <li> return_record_ids: If @a true then
         *                      return GPUdb's internal record id along for
         *                      each inserted record. Values: 'true', 'false'.
         *                              <li> route_to_address: Route to a
         *                      specific rank/tom. Option not suitable for
         *                      tables using primary/shard keys
         *                      </ul>
         *                        Default value is an empty std::map.
         * 
         */
        RawInsertRecordsRequest(const std::string& tableName_, const std::vector<std::vector<uint8_t> >& list_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            list( list_ ),
            listStr( std::vector<std::string>() ),
            listEncoding( "binary" ),
            options( options_ )
        {
        }

        /**
         * Constructs a RawInsertRecordsRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Table to which the records are to be added.
         *                        Must be an existing table.
         * @param[in] list_  An array of binary-encoded data for the records to
         *                   be added. All records must be of the same type as
         *                   that of the table. Empty array if @a listEncoding
         *                   is @a json.
         * @param[in] listStr_  An array of JSON encoded data for the records
         *                      to be added. All records must be of the same
         *                      type as that of the table. Empty array if @a
         *                      listEncoding is @a binary.
         * @param[in] listEncoding_  The encoding of the records to be
         *                           inserted. Values: 'binary', 'json'.
         *                             Default value is 'binary'.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> update_on_existing_pk: If the
         *                      table has a /create/type, then if the value is
         *                      @a true then if any of the records being added
         *                      have the same primary key as existing records,
         *                      the existing records are replaced (i.e.
         *                      updated) with the given records. If @a false,
         *                      and if the records being added have the same
         *                      primary key as existing records, they are
         *                      ignored (the existing records are left
         *                      unchanged).  It is quite possible that in this
         *                      case some of the given records will be inserted
         *                      and some (those having existing primary keys)
         *                      will be ignored (or updated). If the specified
         *                      table does not have a primary key column then
         *                      this optional parameter is ignored. Values:
         *                      'true', 'false'.
         *                              <li> return_record_ids: If @a true then
         *                      return GPUdb's internal record id along for
         *                      each inserted record. Values: 'true', 'false'.
         *                              <li> route_to_address: Route to a
         *                      specific rank/tom. Option not suitable for
         *                      tables using primary/shard keys
         *                      </ul>
         *                        Default value is an empty std::map.
         * 
         */
        RawInsertRecordsRequest(const std::string& tableName_, const std::vector<std::vector<uint8_t> >& list_, const std::vector<std::string>& listStr_, const std::string& listEncoding_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            list( list_ ),
            listStr( listStr_ ),
            listEncoding( listEncoding_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::vector<std::vector<uint8_t> > list;
        std::vector<std::string> listStr;
        std::string listEncoding;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::RawInsertRecordsRequest>
    {
        static void encode(Encoder& e, const gpudb::RawInsertRecordsRequest& v)
        {
            ::avro::encode(e, v.tableName);
            ::avro::encode(e, v.list);
            ::avro::encode(e, v.listStr);
            ::avro::encode(e, v.listEncoding);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::RawInsertRecordsRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.tableName);
                            break;

                        case 1:
                            ::avro::decode(d, v.list);
                            break;

                        case 2:
                            ::avro::decode(d, v.listStr);
                            break;

                        case 3:
                            ::avro::decode(d, v.listEncoding);
                            break;

                        case 4:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.tableName);
                ::avro::decode(d, v.list);
                ::avro::decode(d, v.listStr);
                ::avro::decode(d, v.listEncoding);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #insertRecordsRaw(const RawInsertRecordsRequest&) const}.
     * <p>
     * Adds multiple records to the specified table. The operation is
     * synchronous meaning that GPUdb will not return a response until all the
     * records are fully inserted and available. The response payload provides
     * the counts of the number of records actually inserted and/or updated,
     * and can provide the unique identifier of each added record.
     * <p>
     * The @a options parameter can be used to customize this function's
     * behavior.  The @a update_on_existing_pk option specifies the primary-key
     * collision policy.  If the table has a {@link
     * #createType(const std::string&,const std::string&,const std::map<std::string, std::vector<std::string> >&,const std::map<std::string, std::string>&) const
     * primary key} and if @a update_on_existing_pk is @a true, then if any of
     * the records being added have the same primary key as existing records,
     * the existing records are replaced (i.e. updated) with the given records.
     * If @a update_on_existing_pk is @a false and if the records being added
     * have the same primary key as existing records, they are ignored (the
     * existing records are left unchanged).  It is quite possible that in this
     * case some of the given records will be inserted and some (those having
     * existing primary keys) will be ignored (or updated).  If the specified
     * table does not have a primary key column, then the @a
     * update_on_existing_pk option is ignored.
     * <p>
     * The @a return_record_ids option indicates that the database should
     * return the unique identifiers of inserted records.
     * <p>
     * The @a route_to_address option directs that inserted records should be
     * targeted for a particular database node.
     * 
     * @param <T>  The type of object being processed.
     * 
     */
    template<typename T> struct InsertRecordsRequest
    {

        /**
         * Constructs an InsertRecordsRequest object with default parameter
         * values.
         */
        InsertRecordsRequest() :
            tableName(std::string()),
            data(std::vector<T>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an InsertRecordsRequest object with the specified
         * parameters.
         * 
         * @param[in] tableName_  Table to which the records are to be added.
         *                        Must be an existing table.
         * @param[in] data_  An array of binary-encoded data for the records to
         *                   be added. All records must be of the same type as
         *                   that of the table. Empty array if @a listEncoding
         *                   is @a json.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li> update_on_existing_pk: If the
         *                      table has a /create/type, then if the value is
         *                      @a true then if any of the records being added
         *                      have the same primary key as existing records,
         *                      the existing records are replaced (i.e.
         *                      updated) with the given records. If @a false,
         *                      and if the records being added have the same
         *                      primary key as existing records, they are
         *                      ignored (the existing records are left
         *                      unchanged).  It is quite possible that in this
         *                      case some of the given records will be inserted
         *                      and some (those having existing primary keys)
         *                      will be ignored (or updated). If the specified
         *                      table does not have a primary key column then
         *                      this optional parameter is ignored. Values:
         *                      'true', 'false'.
         *                              <li> return_record_ids: If @a true then
         *                      return GPUdb's internal record id along for
         *                      each inserted record. Values: 'true', 'false'.
         *                              <li> route_to_address: Route to a
         *                      specific rank/tom. Option not suitable for
         *                      tables using primary/shard keys
         *                      </ul>
         *                        Default value is an empty std::map.
         * 
         */
        InsertRecordsRequest(const std::string& tableName_, const std::vector<T>& data_, const std::map<std::string, std::string>& options_):
            tableName( tableName_ ),
            data( data_ ),
            options( options_ )
        {
        }

        std::string tableName;
        std::vector<T> data;
        std::map<std::string, std::string> options;
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #insertRecordsRaw(const RawInsertRecordsRequest&) const}.
     * <p>
     * Adds multiple records to the specified table. The operation is
     * synchronous meaning that GPUdb will not return a response until all the
     * records are fully inserted and available. The response payload provides
     * the counts of the number of records actually inserted and/or updated,
     * and can provide the unique identifier of each added record.
     * <p>
     * The @a options parameter can be used to customize this function's
     * behavior.  The @a update_on_existing_pk option specifies the primary-key
     * collision policy.  If the table has a {@link
     * #createType(const CreateTypeRequest&) const primary key} and if @a
     * update_on_existing_pk is @a true, then if any of the records being added
     * have the same primary key as existing records, the existing records are
     * replaced (i.e. updated) with the given records.  If @a
     * update_on_existing_pk is @a false and if the records being added have
     * the same primary key as existing records, they are ignored (the existing
     * records are left unchanged).  It is quite possible that in this case
     * some of the given records will be inserted and some (those having
     * existing primary keys) will be ignored (or updated).  If the specified
     * table does not have a primary key column, then the @a
     * update_on_existing_pk option is ignored.
     * <p>
     * The @a return_record_ids option indicates that the database should
     * return the unique identifiers of inserted records.
     * <p>
     * The @a route_to_address option directs that inserted records should be
     * targeted for a particular database node.
     */
    struct InsertRecordsResponse
    {

        /**
         * Constructs an InsertRecordsResponse object with default parameter
         * values.
         */
        InsertRecordsResponse() :
            recordIds(std::vector<std::string>()),
            countInserted(int32_t()),
            countUpdated(int32_t())
        {
        }

        std::vector<std::string> recordIds;
        int32_t countInserted;
        int32_t countUpdated;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::InsertRecordsResponse>
    {
        static void encode(Encoder& e, const gpudb::InsertRecordsResponse& v)
        {
            ::avro::encode(e, v.recordIds);
            ::avro::encode(e, v.countInserted);
            ::avro::encode(e, v.countUpdated);
        }

        static void decode(Decoder& d, gpudb::InsertRecordsResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.recordIds);
                            break;

                        case 1:
                            ::avro::decode(d, v.countInserted);
                            break;

                        case 2:
                            ::avro::decode(d, v.countUpdated);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.recordIds);
                ::avro::decode(d, v.countInserted);
                ::avro::decode(d, v.countUpdated);
            }
        }
    };
}

#endif
