/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __HAS_SCHEMA_H__
#define __HAS_SCHEMA_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #hasSchema(const HasSchemaRequest&) const}.
     * <p>
     * Checks for the existence of a schema with the given name.
     */
    struct HasSchemaRequest
    {

        /**
         * Constructs a HasSchemaRequest object with default parameter values.
         */
        HasSchemaRequest() :
            schemaName(std::string()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs a HasSchemaRequest object with the specified parameters.
         * 
         * @param[in] schemaName_  Name of the schema to check for existence,
         *                         in root, using standard <a
         *                         href="../../../concepts/tables/#table-name-resolution"
         *                         target="_top">name resolution rules</a>.
         * @param[in] options_  Optional parameters.
         * 
         */
        HasSchemaRequest(const std::string& schemaName_, const std::map<std::string, std::string>& options_):
            schemaName( schemaName_ ),
            options( options_ )
        {
        }

        std::string schemaName;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::HasSchemaRequest>
    {
        static void encode(Encoder& e, const gpudb::HasSchemaRequest& v)
        {
            ::avro::encode(e, v.schemaName);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::HasSchemaRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.schemaName);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.schemaName);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #hasSchema(const HasSchemaRequest&) const}.
     * <p>
     * Checks for the existence of a schema with the given name.
     */
    struct HasSchemaResponse
    {

        /**
         * Constructs a HasSchemaResponse object with default parameter values.
         */
        HasSchemaResponse() :
            schemaName(std::string()),
            schemaExists(bool()),
            info(std::map<std::string, std::string>())
        {
        }

        std::string schemaName;
        bool schemaExists;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::HasSchemaResponse>
    {
        static void encode(Encoder& e, const gpudb::HasSchemaResponse& v)
        {
            ::avro::encode(e, v.schemaName);
            ::avro::encode(e, v.schemaExists);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::HasSchemaResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.schemaName);
                            break;

                        case 1:
                            ::avro::decode(d, v.schemaExists);
                            break;

                        case 2:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.schemaName);
                ::avro::decode(d, v.schemaExists);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
