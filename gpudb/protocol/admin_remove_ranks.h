/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
#ifndef __ADMIN_REMOVE_RANKS_H__
#define __ADMIN_REMOVE_RANKS_H__

namespace gpudb
{

    /**
     * A set of input parameters for {@link
     * #adminRemoveRanks(const AdminRemoveRanksRequest&) const}.
     * <p>
     * Remove one or more ranks from the cluster.  Note that this operation
     * could take a long time to complete for big clusters. All data in the
     * ranks to be removed is rebalanced to other ranks before the node is
     * removed unless the @a rebalance_sharded_data or @a
     * rebalance_unsharded_data parameters are set to @a false in the @a
     * options.
     */
    struct AdminRemoveRanksRequest
    {

        /**
         * Constructs an AdminRemoveRanksRequest object with default parameter
         * values.
         */
        AdminRemoveRanksRequest() :
            ranks(std::vector<int32_t>()),
            options(std::map<std::string, std::string>())
        {
        }

        /**
         * Constructs an AdminRemoveRanksRequest object with the specified
         * parameters.
         * 
         * @param[in] ranks_  Rank numbers of the ranks to be removed from the
         *                    cluster.
         * @param[in] options_  Optional parameters.
         *                      <ul>
         *                              <li>
         *                      gpudb::admin_remove_ranks_rebalance_sharded_data:
         *                      When @a true, data with primary keys or shard
         *                      keys will be rebalanced to other ranks prior to
         *                      rank removal. Note that for big clusters, this
         *                      data transfer could be time consuming and
         *                      result in delayed query responses.
         *                      <ul>
         *                              <li> gpudb::admin_remove_ranks_true
         *                              <li> gpudb::admin_remove_ranks_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::admin_remove_ranks_true.
         *                              <li>
         *                      gpudb::admin_remove_ranks_rebalance_unsharded_data:
         *                      When @a true, unsharded data (data without
         *                      primary keys and without shard keys) will be
         *                      rebalanced to other ranks prior to rank
         *                      removal. Note that for big clusters, this data
         *                      transfer could be time consuming and result in
         *                      delayed query responses.
         *                      <ul>
         *                              <li> gpudb::admin_remove_ranks_true
         *                              <li> gpudb::admin_remove_ranks_false
         *                      </ul>
         *                      The default value is
         *                      gpudb::admin_remove_ranks_true.
         *                      </ul>
         * 
         */
        AdminRemoveRanksRequest(const std::vector<int32_t>& ranks_, const std::map<std::string, std::string>& options_):
            ranks( ranks_ ),
            options( options_ )
        {
        }

        std::vector<int32_t> ranks;
        std::map<std::string, std::string> options;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminRemoveRanksRequest>
    {
        static void encode(Encoder& e, const gpudb::AdminRemoveRanksRequest& v)
        {
            ::avro::encode(e, v.ranks);
            ::avro::encode(e, v.options);
        }

        static void decode(Decoder& d, gpudb::AdminRemoveRanksRequest& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.ranks);
                            break;

                        case 1:
                            ::avro::decode(d, v.options);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.ranks);
                ::avro::decode(d, v.options);
            }
        }
    };
}

namespace gpudb
{

    /**
     * A set of output parameters for {@link
     * #adminRemoveRanks(const AdminRemoveRanksRequest&) const}.
     * <p>
     * Remove one or more ranks from the cluster.  Note that this operation
     * could take a long time to complete for big clusters. All data in the
     * ranks to be removed is rebalanced to other ranks before the node is
     * removed unless the @a rebalance_sharded_data or @a
     * rebalance_unsharded_data parameters are set to @a false in the @a
     * options.
     */
    struct AdminRemoveRanksResponse
    {

        /**
         * Constructs an AdminRemoveRanksResponse object with default parameter
         * values.
         */
        AdminRemoveRanksResponse() :
            removedRanks(std::vector<int32_t>()),
            results(std::vector<std::string>()),
            info(std::map<std::string, std::string>())
        {
        }

        std::vector<int32_t> removedRanks;
        std::vector<std::string> results;
        std::map<std::string, std::string> info;
    };
}

namespace avro
{
    template<> struct codec_traits<gpudb::AdminRemoveRanksResponse>
    {
        static void encode(Encoder& e, const gpudb::AdminRemoveRanksResponse& v)
        {
            ::avro::encode(e, v.removedRanks);
            ::avro::encode(e, v.results);
            ::avro::encode(e, v.info);
        }

        static void decode(Decoder& d, gpudb::AdminRemoveRanksResponse& v)
        {
            if (::avro::ResolvingDecoder *rd = dynamic_cast< ::avro::ResolvingDecoder*>(&d))
            {
                const std::vector<size_t> fo = rd->fieldOrder();

                for (std::vector<size_t>::const_iterator it = fo.begin(); it != fo.end(); ++it)
                {
                    switch (*it)
                    {
                        case 0:
                            ::avro::decode(d, v.removedRanks);
                            break;

                        case 1:
                            ::avro::decode(d, v.results);
                            break;

                        case 2:
                            ::avro::decode(d, v.info);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                ::avro::decode(d, v.removedRanks);
                ::avro::decode(d, v.results);
                ::avro::decode(d, v.info);
            }
        }
    };
}

#endif
