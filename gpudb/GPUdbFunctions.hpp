/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

/**
 * Add a new node to the GPUdb cluster. By default this will only add the node
 * to the cluster, but will not be assigned any data shards. Set the @a reshard
 * option to @a true to move some shards from the other nodes in the cluster to
 * this node.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminAddNodeResponse adminAddNode( const AdminAddNodeRequest& request_ ) const;

/**
 * Add a new node to the GPUdb cluster. By default this will only add the node
 * to the cluster, but will not be assigned any data shards. Set the @a reshard
 * option to @a true to move some shards from the other nodes in the cluster to
 * this node.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminAddNodeResponse& adminAddNode( const AdminAddNodeRequest& request_,
                                    AdminAddNodeResponse& response_ ) const;

/**
 * Add a new node to the GPUdb cluster. By default this will only add the node
 * to the cluster, but will not be assigned any data shards. Set the @a reshard
 * option to @a true to move some shards from the other nodes in the cluster to
 * this node.
 * 
 * @param hostName  host name of the node being added to the system.
 * @param gpuIndex
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::admin_add_node_reshard: If @a true, then
 *                 some of the shards from all the existing nodes will be moved
 *                 to the new node being added. Note that for big clusters,
 *                 this data transfer could be time consuming and also result
 *                 in delay in responding to queries for busy clusters.
 *                 <ul>
 *                         <li> gpudb::admin_add_node_true
 *                         <li> gpudb::admin_add_node_false
 *                 </ul>
 *                 The default value is gpudb::admin_add_node_false.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminAddNodeResponse adminAddNode( const std::string& hostName,
                                   const int32_t gpuIndex,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Add a new node to the GPUdb cluster. By default this will only add the node
 * to the cluster, but will not be assigned any data shards. Set the @a reshard
 * option to @a true to move some shards from the other nodes in the cluster to
 * this node.
 * 
 * @param hostName  host name of the node being added to the system.
 * @param gpuIndex
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::admin_add_node_reshard: If @a true, then
 *                 some of the shards from all the existing nodes will be moved
 *                 to the new node being added. Note that for big clusters,
 *                 this data transfer could be time consuming and also result
 *                 in delay in responding to queries for busy clusters.
 *                 <ul>
 *                         <li> gpudb::admin_add_node_true
 *                         <li> gpudb::admin_add_node_false
 *                 </ul>
 *                 The default value is gpudb::admin_add_node_false.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminAddNodeResponse& adminAddNode( const std::string& hostName,
                                    const int32_t gpuIndex,
                                    const std::map<std::string, std::string>& options,
                                    AdminAddNodeResponse& response_ ) const;

/**
 * Update the system config file.  Updates to the config file are only
 * permitted when the system is stopped.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminAlterConfigurationResponse adminAlterConfiguration( const AdminAlterConfigurationRequest& request_ ) const;

/**
 * Update the system config file.  Updates to the config file are only
 * permitted when the system is stopped.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminAlterConfigurationResponse& adminAlterConfiguration( const AdminAlterConfigurationRequest& request_,
                                                          AdminAlterConfigurationResponse& response_ ) const;

/**
 * Update the system config file.  Updates to the config file are only
 * permitted when the system is stopped.
 * 
 * @param configString  updated contents of the config file.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminAlterConfigurationResponse adminAlterConfiguration( const std::string& configString,
                                                         const std::map<std::string, std::string>& options ) const;

/**
 * Update the system config file.  Updates to the config file are only
 * permitted when the system is stopped.
 * 
 * @param configString  updated contents of the config file.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminAlterConfigurationResponse& adminAlterConfiguration( const std::string& configString,
                                                          const std::map<std::string, std::string>& options,
                                                          AdminAlterConfigurationResponse& response_ ) const;

/**
 * Perform the requested action on a list of one or more job(s) . Currently
 * only cancelling filter, aggregate and get records reqeusts are supported.
 * Based on the type of job and the current state of execution, the action may
 * not be successfully executed. The final result of the attempted actions for
 * each specified job is returned in the status array of the response.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminAlterJobsResponse adminAlterJobs( const AdminAlterJobsRequest& request_ ) const;

/**
 * Perform the requested action on a list of one or more job(s) . Currently
 * only cancelling filter, aggregate and get records reqeusts are supported.
 * Based on the type of job and the current state of execution, the action may
 * not be successfully executed. The final result of the attempted actions for
 * each specified job is returned in the status array of the response.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminAlterJobsResponse& adminAlterJobs( const AdminAlterJobsRequest& request_,
                                        AdminAlterJobsResponse& response_ ) const;

/**
 * Perform the requested action on a list of one or more job(s) . Currently
 * only cancelling filter, aggregate and get records reqeusts are supported.
 * Based on the type of job and the current state of execution, the action may
 * not be successfully executed. The final result of the attempted actions for
 * each specified job is returned in the status array of the response.
 * 
 * @param jobIds  Jobs to be modified.
 * @param action  Action to be performed on the jobs specified by job_ids.
 *                <ul>
 *                        <li> gpudb::admin_alter_jobs_cancel
 *                </ul>
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminAlterJobsResponse adminAlterJobs( const std::vector<int32_t>& jobIds,
                                       const std::string& action,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Perform the requested action on a list of one or more job(s) . Currently
 * only cancelling filter, aggregate and get records reqeusts are supported.
 * Based on the type of job and the current state of execution, the action may
 * not be successfully executed. The final result of the attempted actions for
 * each specified job is returned in the status array of the response.
 * 
 * @param jobIds  Jobs to be modified.
 * @param action  Action to be performed on the jobs specified by job_ids.
 *                <ul>
 *                        <li> gpudb::admin_alter_jobs_cancel
 *                </ul>
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminAlterJobsResponse& adminAlterJobs( const std::vector<int32_t>& jobIds,
                                        const std::string& action,
                                        const std::map<std::string, std::string>& options,
                                        AdminAlterJobsResponse& response_ ) const;

/**
 * Specify the mapping of the shards to the various ranks in the cluster. In
 * most cases, it should be sufficient to let the system automatically
 * distribute the shards evenly across the available ranks. However, this
 * endpoint can be used to move shards for various administrative reasons, say
 * in case of heterogeneous node clusters.  It should be noted that the system
 * may reassign the shards the when the number of nodes in the cluster changes
 * or the cluster is rebalanced.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminAlterShardsResponse adminAlterShards( const AdminAlterShardsRequest& request_ ) const;

/**
 * Specify the mapping of the shards to the various ranks in the cluster. In
 * most cases, it should be sufficient to let the system automatically
 * distribute the shards evenly across the available ranks. However, this
 * endpoint can be used to move shards for various administrative reasons, say
 * in case of heterogeneous node clusters.  It should be noted that the system
 * may reassign the shards the when the number of nodes in the cluster changes
 * or the cluster is rebalanced.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminAlterShardsResponse& adminAlterShards( const AdminAlterShardsRequest& request_,
                                            AdminAlterShardsResponse& response_ ) const;

/**
 * Specify the mapping of the shards to the various ranks in the cluster. In
 * most cases, it should be sufficient to let the system automatically
 * distribute the shards evenly across the available ranks. However, this
 * endpoint can be used to move shards for various administrative reasons, say
 * in case of heterogeneous node clusters.  It should be noted that the system
 * may reassign the shards the when the number of nodes in the cluster changes
 * or the cluster is rebalanced.
 * 
 * @param version
 * @param useIndex  Set to true when only the shards being moved are specified
 *                  in the request.  The index must indicate the shards being
 *                  moved.
 * @param rank  node to which the shard will be moved.
 * @param tom  Toms to which the shard will be moved.
 * @param index  the shard which is being moved.  When use_index is set to
 *               true, size of this array must equal the size of rank/tom
 *               array.
 * @param backupMapList  List of rank_tom integers, for which backup toms are
 *                       defined
 * @param backupMapValues  List of the backup rank_tom(s) for each rank_tom in
 *                         backup_map_list
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminAlterShardsResponse adminAlterShards( const int64_t version,
                                           const bool useIndex,
                                           const std::vector<int32_t>& rank,
                                           const std::vector<int32_t>& tom,
                                           const std::vector<int32_t>& index,
                                           const std::vector<int32_t>& backupMapList,
                                           const std::vector<std::vector<int32_t> >& backupMapValues,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Specify the mapping of the shards to the various ranks in the cluster. In
 * most cases, it should be sufficient to let the system automatically
 * distribute the shards evenly across the available ranks. However, this
 * endpoint can be used to move shards for various administrative reasons, say
 * in case of heterogeneous node clusters.  It should be noted that the system
 * may reassign the shards the when the number of nodes in the cluster changes
 * or the cluster is rebalanced.
 * 
 * @param version
 * @param useIndex  Set to true when only the shards being moved are specified
 *                  in the request.  The index must indicate the shards being
 *                  moved.
 * @param rank  node to which the shard will be moved.
 * @param tom  Toms to which the shard will be moved.
 * @param index  the shard which is being moved.  When use_index is set to
 *               true, size of this array must equal the size of rank/tom
 *               array.
 * @param backupMapList  List of rank_tom integers, for which backup toms are
 *                       defined
 * @param backupMapValues  List of the backup rank_tom(s) for each rank_tom in
 *                         backup_map_list
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminAlterShardsResponse& adminAlterShards( const int64_t version,
                                            const bool useIndex,
                                            const std::vector<int32_t>& rank,
                                            const std::vector<int32_t>& tom,
                                            const std::vector<int32_t>& index,
                                            const std::vector<int32_t>& backupMapList,
                                            const std::vector<std::vector<int32_t> >& backupMapValues,
                                            const std::map<std::string, std::string>& options,
                                            AdminAlterShardsResponse& response_ ) const;

/**
 * Take the system offline. When the system is offline, no user operations can
 * be performed with the exception of a system shutdown.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminOfflineResponse adminOffline( const AdminOfflineRequest& request_ ) const;

/**
 * Take the system offline. When the system is offline, no user operations can
 * be performed with the exception of a system shutdown.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminOfflineResponse& adminOffline( const AdminOfflineRequest& request_,
                                    AdminOfflineResponse& response_ ) const;

/**
 * Take the system offline. When the system is offline, no user operations can
 * be performed with the exception of a system shutdown.
 * 
 * @param offline  Set to true if desired state is offline.
 *                 <ul>
 *                         <li> gpudb::admin_offline_true
 *                         <li> gpudb::admin_offline_false
 *                 </ul>
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminOfflineResponse adminOffline( const bool offline,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Take the system offline. When the system is offline, no user operations can
 * be performed with the exception of a system shutdown.
 * 
 * @param offline  Set to true if desired state is offline.
 *                 <ul>
 *                         <li> gpudb::admin_offline_true
 *                         <li> gpudb::admin_offline_false
 *                 </ul>
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminOfflineResponse& adminOffline( const bool offline,
                                    const std::map<std::string, std::string>& options,
                                    AdminOfflineResponse& response_ ) const;

/**
 * Rebalance the cluster so that all the nodes contain approximately equal
 * number of records.  The rebalance will also cause the shards to be (as much
 * as possible) equally distributed across all the ranks. Note that the system
 * may move any shards that were moved by system administrator using {@link
 * #adminAlterShards(const AdminAlterShardsRequest&) const}
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminRebalanceResponse adminRebalance( const AdminRebalanceRequest& request_ ) const;

/**
 * Rebalance the cluster so that all the nodes contain approximately equal
 * number of records.  The rebalance will also cause the shards to be (as much
 * as possible) equally distributed across all the ranks. Note that the system
 * may move any shards that were moved by system administrator using {@link
 * #adminAlterShards(const AdminAlterShardsRequest&,AdminAlterShardsResponse&) const}
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminRebalanceResponse& adminRebalance( const AdminRebalanceRequest& request_,
                                        AdminRebalanceResponse& response_ ) const;

/**
 * Rebalance the cluster so that all the nodes contain approximately equal
 * number of records.  The rebalance will also cause the shards to be (as much
 * as possible) equally distributed across all the ranks. Note that the system
 * may move any shards that were moved by system administrator using {@link
 * #adminAlterShards(const int64_t,const bool,const std::vector<int32_t>&,const std::vector<int32_t>&,const std::vector<int32_t>&,const std::vector<int32_t>&,const std::vector<std::vector<int32_t> >&,const std::map<std::string, std::string>&) const}
 * 
 * @param tableNames  Sepcify the tables here if only specific tables have to
 *                    be rebalanced.  Leave this empty to rebalance all the
 *                    tables.  Note that only the tables which have no primary
 *                    or shard key can be rebalanced.
 * @param action  Specify 'start' to start rebalancing the cluster or 'stop' to
 *                prematurely stop a previsouly issued rebalance request.
 *                <ul>
 *                        <li> gpudb::admin_rebalance_start
 *                        <li> gpudb::admin_rebalance_stop
 *                </ul>
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::admin_rebalance_reshard: If @a true,
 *                 then all the nodes in the cluster will be assigned
 *                 approximately the same number of shards. Note that for big
 *                 clusters, this data transfer could be time consuming and
 *                 also result in delay in responding to queries for busy
 *                 clusters.
 *                 <ul>
 *                         <li> gpudb::admin_rebalance_true
 *                         <li> gpudb::admin_rebalance_false
 *                 </ul>
 *                 The default value is gpudb::admin_rebalance_true.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminRebalanceResponse adminRebalance( const std::vector<std::string>& tableNames,
                                       const std::string& action,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Rebalance the cluster so that all the nodes contain approximately equal
 * number of records.  The rebalance will also cause the shards to be (as much
 * as possible) equally distributed across all the ranks. Note that the system
 * may move any shards that were moved by system administrator using {@link
 * #adminAlterShards(const int64_t,const bool,const std::vector<int32_t>&,const std::vector<int32_t>&,const std::vector<int32_t>&,const std::vector<int32_t>&,const std::vector<std::vector<int32_t> >&,const std::map<std::string, std::string>&,AdminAlterShardsResponse&) const}
 * 
 * @param tableNames  Sepcify the tables here if only specific tables have to
 *                    be rebalanced.  Leave this empty to rebalance all the
 *                    tables.  Note that only the tables which have no primary
 *                    or shard key can be rebalanced.
 * @param action  Specify 'start' to start rebalancing the cluster or 'stop' to
 *                prematurely stop a previsouly issued rebalance request.
 *                <ul>
 *                        <li> gpudb::admin_rebalance_start
 *                        <li> gpudb::admin_rebalance_stop
 *                </ul>
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::admin_rebalance_reshard: If @a true,
 *                 then all the nodes in the cluster will be assigned
 *                 approximately the same number of shards. Note that for big
 *                 clusters, this data transfer could be time consuming and
 *                 also result in delay in responding to queries for busy
 *                 clusters.
 *                 <ul>
 *                         <li> gpudb::admin_rebalance_true
 *                         <li> gpudb::admin_rebalance_false
 *                 </ul>
 *                 The default value is gpudb::admin_rebalance_true.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminRebalanceResponse& adminRebalance( const std::vector<std::string>& tableNames,
                                        const std::string& action,
                                        const std::map<std::string, std::string>& options,
                                        AdminRebalanceResponse& response_ ) const;

/**
 * Remove a node from the cluster.  Note that this operation could take a long
 * time to complete for big clusters.  The data is transferred to other nodes
 * in the cluster before the node is removed.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminRemoveNodeResponse adminRemoveNode( const AdminRemoveNodeRequest& request_ ) const;

/**
 * Remove a node from the cluster.  Note that this operation could take a long
 * time to complete for big clusters.  The data is transferred to other nodes
 * in the cluster before the node is removed.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminRemoveNodeResponse& adminRemoveNode( const AdminRemoveNodeRequest& request_,
                                          AdminRemoveNodeResponse& response_ ) const;

/**
 * Remove a node from the cluster.  Note that this operation could take a long
 * time to complete for big clusters.  The data is transferred to other nodes
 * in the cluster before the node is removed.
 * 
 * @param rank  Rank number of the node being removed from the cluster.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::admin_remove_node_reshard: When @a true,
 *                 then the shards from nodes will be moved to the other nodes
 *                 in the cluster. When false, then the node will only be
 *                 removed from the cluster if the node does not contain any
 *                 data shards, otherwise an error is returned.  Note that for
 *                 big clusters, this data transfer could be time consuming and
 *                 also result in delay in responding to queries for busy
 *                 clusters.
 *                 <ul>
 *                         <li> gpudb::admin_remove_node_true
 *                         <li> gpudb::admin_remove_node_false
 *                 </ul>
 *                 The default value is gpudb::admin_remove_node_true.
 *                         <li> gpudb::admin_remove_node_force: When @a true,
 *                 the rank is immediately shutdown and removed from the
 *                 cluster.  This will result in loss of any data that is
 *                 present in the node at the time of the request.
 *                 <ul>
 *                         <li> gpudb::admin_remove_node_true
 *                         <li> gpudb::admin_remove_node_false
 *                 </ul>
 *                 The default value is gpudb::admin_remove_node_false.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminRemoveNodeResponse adminRemoveNode( const int32_t rank,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Remove a node from the cluster.  Note that this operation could take a long
 * time to complete for big clusters.  The data is transferred to other nodes
 * in the cluster before the node is removed.
 * 
 * @param rank  Rank number of the node being removed from the cluster.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::admin_remove_node_reshard: When @a true,
 *                 then the shards from nodes will be moved to the other nodes
 *                 in the cluster. When false, then the node will only be
 *                 removed from the cluster if the node does not contain any
 *                 data shards, otherwise an error is returned.  Note that for
 *                 big clusters, this data transfer could be time consuming and
 *                 also result in delay in responding to queries for busy
 *                 clusters.
 *                 <ul>
 *                         <li> gpudb::admin_remove_node_true
 *                         <li> gpudb::admin_remove_node_false
 *                 </ul>
 *                 The default value is gpudb::admin_remove_node_true.
 *                         <li> gpudb::admin_remove_node_force: When @a true,
 *                 the rank is immediately shutdown and removed from the
 *                 cluster.  This will result in loss of any data that is
 *                 present in the node at the time of the request.
 *                 <ul>
 *                         <li> gpudb::admin_remove_node_true
 *                         <li> gpudb::admin_remove_node_false
 *                 </ul>
 *                 The default value is gpudb::admin_remove_node_false.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminRemoveNodeResponse& adminRemoveNode( const int32_t rank,
                                          const std::map<std::string, std::string>& options,
                                          AdminRemoveNodeResponse& response_ ) const;

/**
 * Show the current system configuration file.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminShowConfigurationResponse adminShowConfiguration( const AdminShowConfigurationRequest& request_ ) const;

/**
 * Show the current system configuration file.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminShowConfigurationResponse& adminShowConfiguration( const AdminShowConfigurationRequest& request_,
                                                        AdminShowConfigurationResponse& response_ ) const;

/**
 * Show the current system configuration file.
 * 
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminShowConfigurationResponse adminShowConfiguration( const std::map<std::string, std::string>& options ) const;

/**
 * Show the current system configuration file.
 * 
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminShowConfigurationResponse& adminShowConfiguration( const std::map<std::string, std::string>& options,
                                                        AdminShowConfigurationResponse& response_ ) const;

/**
 * Get a list of the current jobs in GPUdb.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminShowJobsResponse adminShowJobs( const AdminShowJobsRequest& request_ ) const;

/**
 * Get a list of the current jobs in GPUdb.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminShowJobsResponse& adminShowJobs( const AdminShowJobsRequest& request_,
                                      AdminShowJobsResponse& response_ ) const;

/**
 * Get a list of the current jobs in GPUdb.
 * 
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::admin_show_jobs_show_details:
 *                 <ul>
 *                         <li> gpudb::admin_show_jobs_true
 *                         <li> gpudb::admin_show_jobs_false
 *                 </ul>
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminShowJobsResponse adminShowJobs( const std::map<std::string, std::string>& options ) const;

/**
 * Get a list of the current jobs in GPUdb.
 * 
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::admin_show_jobs_show_details:
 *                 <ul>
 *                         <li> gpudb::admin_show_jobs_true
 *                         <li> gpudb::admin_show_jobs_false
 *                 </ul>
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminShowJobsResponse& adminShowJobs( const std::map<std::string, std::string>& options,
                                      AdminShowJobsResponse& response_ ) const;

/**
 * Show the mapping of shards to the corresponding rank and tom.  The response
 * message contains list of 16384 (total number of shards in the system) Rank
 * and TOM numbers corresponding to each shard.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminShowShardsResponse adminShowShards( const AdminShowShardsRequest& request_ ) const;

/**
 * Show the mapping of shards to the corresponding rank and tom.  The response
 * message contains list of 16384 (total number of shards in the system) Rank
 * and TOM numbers corresponding to each shard.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminShowShardsResponse& adminShowShards( const AdminShowShardsRequest& request_,
                                          AdminShowShardsResponse& response_ ) const;

/**
 * Show the mapping of shards to the corresponding rank and tom.  The response
 * message contains list of 16384 (total number of shards in the system) Rank
 * and TOM numbers corresponding to each shard.
 * 
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminShowShardsResponse adminShowShards( const std::map<std::string, std::string>& options ) const;

/**
 * Show the mapping of shards to the corresponding rank and tom.  The response
 * message contains list of 16384 (total number of shards in the system) Rank
 * and TOM numbers corresponding to each shard.
 * 
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminShowShardsResponse& adminShowShards( const std::map<std::string, std::string>& options,
                                          AdminShowShardsResponse& response_ ) const;

/**
 * Exits the database server application.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminShutdownResponse adminShutdown( const AdminShutdownRequest& request_ ) const;

/**
 * Exits the database server application.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminShutdownResponse& adminShutdown( const AdminShutdownRequest& request_,
                                      AdminShutdownResponse& response_ ) const;

/**
 * Exits the database server application.
 * 
 * @param exitType  Reserved for future use. User can pass an empty string.
 * @param authorization  No longer used. User can pass an empty string.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminShutdownResponse adminShutdown( const std::string& exitType,
                                     const std::string& authorization,
                                     const std::map<std::string, std::string>& options ) const;

/**
 * Exits the database server application.
 * 
 * @param exitType  Reserved for future use. User can pass an empty string.
 * @param authorization  No longer used. User can pass an empty string.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminShutdownResponse& adminShutdown( const std::string& exitType,
                                      const std::string& authorization,
                                      const std::map<std::string, std::string>& options,
                                      AdminShutdownResponse& response_ ) const;

/**
 * Verify database is in a consistent state.  When inconsistencies or errors
 * are found, the verified_ok flag in the response is set to false and the list
 * of errors found is provided in the error_list.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminVerifyDbResponse adminVerifyDb( const AdminVerifyDbRequest& request_ ) const;

/**
 * Verify database is in a consistent state.  When inconsistencies or errors
 * are found, the verified_ok flag in the response is set to false and the list
 * of errors found is provided in the error_list.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminVerifyDbResponse& adminVerifyDb( const AdminVerifyDbRequest& request_,
                                      AdminVerifyDbResponse& response_ ) const;

/**
 * Verify database is in a consistent state.  When inconsistencies or errors
 * are found, the verified_ok flag in the response is set to false and the list
 * of errors found is provided in the error_list.
 * 
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::admin_verify_db_rebuild_on_error:
 *                 <ul>
 *                         <li> gpudb::admin_verify_db_true
 *                         <li> gpudb::admin_verify_db_false
 *                 </ul>
 *                 The default value is gpudb::admin_verify_db_false.
 *                         <li> gpudb::admin_verify_db_verify_persist:
 *                 <ul>
 *                         <li> gpudb::admin_verify_db_true
 *                         <li> gpudb::admin_verify_db_false
 *                 </ul>
 *                 The default value is gpudb::admin_verify_db_false.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminVerifyDbResponse adminVerifyDb( const std::map<std::string, std::string>& options ) const;

/**
 * Verify database is in a consistent state.  When inconsistencies or errors
 * are found, the verified_ok flag in the response is set to false and the list
 * of errors found is provided in the error_list.
 * 
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::admin_verify_db_rebuild_on_error:
 *                 <ul>
 *                         <li> gpudb::admin_verify_db_true
 *                         <li> gpudb::admin_verify_db_false
 *                 </ul>
 *                 The default value is gpudb::admin_verify_db_false.
 *                         <li> gpudb::admin_verify_db_verify_persist:
 *                 <ul>
 *                         <li> gpudb::admin_verify_db_true
 *                         <li> gpudb::admin_verify_db_false
 *                 </ul>
 *                 The default value is gpudb::admin_verify_db_false.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminVerifyDbResponse& adminVerifyDb( const std::map<std::string, std::string>& options,
                                      AdminVerifyDbResponse& response_ ) const;

/**
 * Calculates and returns the convex hull for the values in a table specified
 * by @a tableName.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateConvexHullResponse aggregateConvexHull( const AggregateConvexHullRequest& request_ ) const;

/**
 * Calculates and returns the convex hull for the values in a table specified
 * by @a tableName.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateConvexHullResponse& aggregateConvexHull( const AggregateConvexHullRequest& request_,
                                                  AggregateConvexHullResponse& response_ ) const;

/**
 * Calculates and returns the convex hull for the values in a table specified
 * by @a tableName.
 * 
 * @param tableName  Name of Table on which the operation will be performed.
 *                   Must be an existing table.  It can not be a collection.
 * @param xColumnName  Name of the column containing the x coordinates of the
 *                     points for the operation being performed.
 * @param yColumnName  Name of the column containing the y coordinates of the
 *                     points for the operation being performed.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateConvexHullResponse aggregateConvexHull( const std::string& tableName,
                                                 const std::string& xColumnName,
                                                 const std::string& yColumnName,
                                                 const std::map<std::string, std::string>& options ) const;

/**
 * Calculates and returns the convex hull for the values in a table specified
 * by @a tableName.
 * 
 * @param tableName  Name of Table on which the operation will be performed.
 *                   Must be an existing table.  It can not be a collection.
 * @param xColumnName  Name of the column containing the x coordinates of the
 *                     points for the operation being performed.
 * @param yColumnName  Name of the column containing the y coordinates of the
 *                     points for the operation being performed.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateConvexHullResponse& aggregateConvexHull( const std::string& tableName,
                                                  const std::string& xColumnName,
                                                  const std::string& yColumnName,
                                                  const std::map<std::string, std::string>& options,
                                                  AggregateConvexHullResponse& response_ ) const;

/**
 * Calculates unique combinations (groups) of values for the given columns in a
 * given table/view/collection and computes aggregates on each unique
 * combination. This is somewhat analogous to an SQL-style SELECT...GROUP BY.
 * <p>
 * Any column(s) can be grouped on, and all column types except
 * unrestricted-length strings may be used for computing applicable aggregates.
 * <p>
 * The results can be paged via the @a offset and @a limit parameters. For
 * example, to get 10 groups with the largest counts the inputs would be:
 * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
 * <p>
 * @a options can be used to customize behavior of this call e.g. filtering or
 * sorting the results.
 * <p>
 * To group by columns 'x' and 'y' and compute the number of objects within
 * each group, use:  column_names=['x','y','count(*)'].
 * <p>
 * To also compute the sum of 'z' over each group, use:
 * column_names=['x','y','count(*)','sum(z)'].
 * <p>
 * Available <a href="../../concepts/expressions.html#aggregate-expressions"
 * target="_top">aggregation functions</a> are: count(*), sum, min, max, avg,
 * mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp, arg_min,
 * arg_max and count_distinct.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * <p>
 * If a @a result_table name is specified in the options, the results are
 * stored in a new table with that name.  No results are returned in the
 * response.  If the source table's <a
 * href="../../concepts/tables.html#shard-keys" target="_top">shard key</a> is
 * used as the grouping column(s), the result table will be sharded, in all
 * other cases it will be replicated.  Sorting will properly function only if
 * the result table is replicated or if there is only one processing node and
 * should not be relied upon in other cases.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

RawAggregateGroupByResponse aggregateGroupByRaw( const AggregateGroupByRequest& request_ ) const;

/**
 * Calculates unique combinations (groups) of values for the given columns in a
 * given table/view/collection and computes aggregates on each unique
 * combination. This is somewhat analogous to an SQL-style SELECT...GROUP BY.
 * <p>
 * Any column(s) can be grouped on, and all column types except
 * unrestricted-length strings may be used for computing applicable aggregates.
 * <p>
 * The results can be paged via the @a offset and @a limit parameters. For
 * example, to get 10 groups with the largest counts the inputs would be:
 * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
 * <p>
 * @a options can be used to customize behavior of this call e.g. filtering or
 * sorting the results.
 * <p>
 * To group by columns 'x' and 'y' and compute the number of objects within
 * each group, use:  column_names=['x','y','count(*)'].
 * <p>
 * To also compute the sum of 'z' over each group, use:
 * column_names=['x','y','count(*)','sum(z)'].
 * <p>
 * Available <a href="../../concepts/expressions.html#aggregate-expressions"
 * target="_top">aggregation functions</a> are: count(*), sum, min, max, avg,
 * mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp, arg_min,
 * arg_max and count_distinct.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * <p>
 * If a @a result_table name is specified in the options, the results are
 * stored in a new table with that name.  No results are returned in the
 * response.  If the source table's <a
 * href="../../concepts/tables.html#shard-keys" target="_top">shard key</a> is
 * used as the grouping column(s), the result table will be sharded, in all
 * other cases it will be replicated.  Sorting will properly function only if
 * the result table is replicated or if there is only one processing node and
 * should not be relied upon in other cases.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

RawAggregateGroupByResponse& aggregateGroupByRaw( const AggregateGroupByRequest& request_,
                                                  RawAggregateGroupByResponse& response_ ) const;

/**
 * Calculates unique combinations (groups) of values for the given columns in a
 * given table/view/collection and computes aggregates on each unique
 * combination. This is somewhat analogous to an SQL-style SELECT...GROUP BY.
 * <p>
 * Any column(s) can be grouped on, and all column types except
 * unrestricted-length strings may be used for computing applicable aggregates.
 * <p>
 * The results can be paged via the @a offset and @a limit parameters. For
 * example, to get 10 groups with the largest counts the inputs would be:
 * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
 * <p>
 * @a options can be used to customize behavior of this call e.g. filtering or
 * sorting the results.
 * <p>
 * To group by columns 'x' and 'y' and compute the number of objects within
 * each group, use:  column_names=['x','y','count(*)'].
 * <p>
 * To also compute the sum of 'z' over each group, use:
 * column_names=['x','y','count(*)','sum(z)'].
 * <p>
 * Available <a href="../../concepts/expressions.html#aggregate-expressions"
 * target="_top">aggregation functions</a> are: count(*), sum, min, max, avg,
 * mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp, arg_min,
 * arg_max and count_distinct.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * <p>
 * If a @a result_table name is specified in the options, the results are
 * stored in a new table with that name.  No results are returned in the
 * response.  If the source table's <a
 * href="../../concepts/tables.html#shard-keys" target="_top">shard key</a> is
 * used as the grouping column(s), the result table will be sharded, in all
 * other cases it will be replicated.  Sorting will properly function only if
 * the result table is replicated or if there is only one processing node and
 * should not be relied upon in other cases.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateGroupByResponse aggregateGroupBy( const AggregateGroupByRequest& request_ ) const;

/**
 * Calculates unique combinations (groups) of values for the given columns in a
 * given table/view/collection and computes aggregates on each unique
 * combination. This is somewhat analogous to an SQL-style SELECT...GROUP BY.
 * <p>
 * Any column(s) can be grouped on, and all column types except
 * unrestricted-length strings may be used for computing applicable aggregates.
 * <p>
 * The results can be paged via the @a offset and @a limit parameters. For
 * example, to get 10 groups with the largest counts the inputs would be:
 * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
 * <p>
 * @a options can be used to customize behavior of this call e.g. filtering or
 * sorting the results.
 * <p>
 * To group by columns 'x' and 'y' and compute the number of objects within
 * each group, use:  column_names=['x','y','count(*)'].
 * <p>
 * To also compute the sum of 'z' over each group, use:
 * column_names=['x','y','count(*)','sum(z)'].
 * <p>
 * Available <a href="../../concepts/expressions.html#aggregate-expressions"
 * target="_top">aggregation functions</a> are: count(*), sum, min, max, avg,
 * mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp, arg_min,
 * arg_max and count_distinct.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * <p>
 * If a @a result_table name is specified in the options, the results are
 * stored in a new table with that name.  No results are returned in the
 * response.  If the source table's <a
 * href="../../concepts/tables.html#shard-keys" target="_top">shard key</a> is
 * used as the grouping column(s), the result table will be sharded, in all
 * other cases it will be replicated.  Sorting will properly function only if
 * the result table is replicated or if there is only one processing node and
 * should not be relied upon in other cases.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateGroupByResponse& aggregateGroupBy( const AggregateGroupByRequest& request_,
                                            AggregateGroupByResponse& response_ ) const;

/**
 * Calculates unique combinations (groups) of values for the given columns in a
 * given table/view/collection and computes aggregates on each unique
 * combination. This is somewhat analogous to an SQL-style SELECT...GROUP BY.
 * <p>
 * Any column(s) can be grouped on, and all column types except
 * unrestricted-length strings may be used for computing applicable aggregates.
 * <p>
 * The results can be paged via the @a offset and @a limit parameters. For
 * example, to get 10 groups with the largest counts the inputs would be:
 * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
 * <p>
 * @a options can be used to customize behavior of this call e.g. filtering or
 * sorting the results.
 * <p>
 * To group by columns 'x' and 'y' and compute the number of objects within
 * each group, use:  column_names=['x','y','count(*)'].
 * <p>
 * To also compute the sum of 'z' over each group, use:
 * column_names=['x','y','count(*)','sum(z)'].
 * <p>
 * Available <a href="../../concepts/expressions.html#aggregate-expressions"
 * target="_top">aggregation functions</a> are: count(*), sum, min, max, avg,
 * mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp, arg_min,
 * arg_max and count_distinct.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * <p>
 * If a @a result_table name is specified in the options, the results are
 * stored in a new table with that name.  No results are returned in the
 * response.  If the source table's <a
 * href="../../concepts/tables.html#shard-keys" target="_top">shard key</a> is
 * used as the grouping column(s), the result table will be sharded, in all
 * other cases it will be replicated.  Sorting will properly function only if
 * the result table is replicated or if there is only one processing node and
 * should not be relied upon in other cases.
 * 
 * @param tableName  Name of the table on which the operation will be
 *                   performed. Must be an existing table/view/collection.
 * @param columnNames  List of one or more column names, expressions, and
 *                     aggregate expressions. Must include at least one
 *                     'grouping' column or expression.  If no aggregate is
 *                     included, count(*) will be computed as a default.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned Or END_OF_SET (-9999) to indicate that the max
 *               number of results should be returned.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::aggregate_group_by_collection_name: Name
 *                 of a collection which is to contain the table specified in
 *                 @a result_table, otherwise the table will be a top-level
 *                 table. If the collection does not allow duplicate types and
 *                 it contains a table of the same type as the given one, then
 *                 this table creation request will fail. Additionally this
 *                 option is invalid if @a tableName is a collection.
 *                         <li> gpudb::aggregate_group_by_expression: Filter
 *                 expression to apply to the table prior to computing the
 *                 aggregate group by.
 *                         <li> gpudb::aggregate_group_by_having: Filter
 *                 expression to apply to the aggregated results.
 *                         <li> gpudb::aggregate_group_by_sort_order: String
 *                 indicating how the returned values should be sorted -
 *                 ascending or descending.
 *                 <ul>
 *                         <li> gpudb::aggregate_group_by_ascending: Indicates
 *                 that the returned values should be sorted in ascending
 *                 order.
 *                         <li> gpudb::aggregate_group_by_descending: Indicates
 *                 that the returned values should be sorted in descending
 *                 order.
 *                 </ul>
 *                 The default value is gpudb::aggregate_group_by_ascending.
 *                         <li> gpudb::aggregate_group_by_sort_by: String
 *                 determining how the results are sorted.
 *                 <ul>
 *                         <li> gpudb::aggregate_group_by_key: Indicates that
 *                 the returned values should be sorted by key, which
 *                 corresponds to the grouping columns. If you have multiple
 *                 grouping columns (and are sorting by key), it will first
 *                 sort the first grouping column, then the second grouping
 *                 column, etc.
 *                         <li> gpudb::aggregate_group_by_value: Indicates that
 *                 the returned values should be sorted by value, which
 *                 corresponds to the aggregates. If you have multiple
 *                 aggregates (and are sorting by value), it will first sort by
 *                 the first aggregate, then the second aggregate, etc.
 *                 </ul>
 *                 The default value is gpudb::aggregate_group_by_key.
 *                         <li> gpudb::aggregate_group_by_result_table: The
 *                 name of the table used to store the results. Has the same
 *                 naming restrictions as <a href="../../concepts/tables.html"
 *                 target="_top">tables</a>. Column names (group-by and
 *                 aggregate fields) need to be given aliases e.g. ["FChar256
 *                 as fchar256", "sum(FDouble) as sfd"].  If present, no
 *                 results are returned in the response.  This option is not
 *                 available if one of the grouping attributes is an
 *                 unrestricted string (i.e.; not charN) type.
 *                         <li> gpudb::aggregate_group_by_result_table_persist:
 *                 If @a true then the result table specified in
 *                 {result_table}@{key of input.options} will be persisted as a
 *                 regular table (it will not be automatically cleared unless a
 *                 @a ttl is provided, and the table data can be modified in
 *                 subsequent operations). If @a false (the default) then the
 *                 result table will be a read-only, memory-only temporary
 *                 table.
 *                 <ul>
 *                         <li> gpudb::aggregate_group_by_true
 *                         <li> gpudb::aggregate_group_by_false
 *                 </ul>
 *                 The default value is gpudb::aggregate_group_by_false.
 *                         <li>
 *                 gpudb::aggregate_group_by_result_table_force_replicated:
 *                 Force the result table to be replicated (ignores any
 *                 sharding). Must be used in combination with the @a
 *                 result_table option.
 *                         <li>
 *                 gpudb::aggregate_group_by_result_table_generate_pk: If
 *                 'true' then set a primary key for the result table. Must be
 *                 used in combination with the @a result_table option.
 *                         <li> gpudb::aggregate_group_by_ttl: Sets the TTL of
 *                 the table specified in @a result_table. The value must be
 *                 the desired TTL in minutes.
 *                         <li> gpudb::aggregate_group_by_chunk_size: If
 *                 provided this indicates the chunk size to be used for the
 *                 result table. Must be used in combination with the @a
 *                 result_table option.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateGroupByResponse aggregateGroupBy( const std::string& tableName,
                                           const std::vector<std::string>& columnNames,
                                           const int64_t offset,
                                           const int64_t limit,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Calculates unique combinations (groups) of values for the given columns in a
 * given table/view/collection and computes aggregates on each unique
 * combination. This is somewhat analogous to an SQL-style SELECT...GROUP BY.
 * <p>
 * Any column(s) can be grouped on, and all column types except
 * unrestricted-length strings may be used for computing applicable aggregates.
 * <p>
 * The results can be paged via the @a offset and @a limit parameters. For
 * example, to get 10 groups with the largest counts the inputs would be:
 * limit=10, options={"sort_order":"descending", "sort_by":"value"}.
 * <p>
 * @a options can be used to customize behavior of this call e.g. filtering or
 * sorting the results.
 * <p>
 * To group by columns 'x' and 'y' and compute the number of objects within
 * each group, use:  column_names=['x','y','count(*)'].
 * <p>
 * To also compute the sum of 'z' over each group, use:
 * column_names=['x','y','count(*)','sum(z)'].
 * <p>
 * Available <a href="../../concepts/expressions.html#aggregate-expressions"
 * target="_top">aggregation functions</a> are: count(*), sum, min, max, avg,
 * mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp, arg_min,
 * arg_max and count_distinct.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * <p>
 * If a @a result_table name is specified in the options, the results are
 * stored in a new table with that name.  No results are returned in the
 * response.  If the source table's <a
 * href="../../concepts/tables.html#shard-keys" target="_top">shard key</a> is
 * used as the grouping column(s), the result table will be sharded, in all
 * other cases it will be replicated.  Sorting will properly function only if
 * the result table is replicated or if there is only one processing node and
 * should not be relied upon in other cases.
 * 
 * @param tableName  Name of the table on which the operation will be
 *                   performed. Must be an existing table/view/collection.
 * @param columnNames  List of one or more column names, expressions, and
 *                     aggregate expressions. Must include at least one
 *                     'grouping' column or expression.  If no aggregate is
 *                     included, count(*) will be computed as a default.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned Or END_OF_SET (-9999) to indicate that the max
 *               number of results should be returned.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::aggregate_group_by_collection_name: Name
 *                 of a collection which is to contain the table specified in
 *                 @a result_table, otherwise the table will be a top-level
 *                 table. If the collection does not allow duplicate types and
 *                 it contains a table of the same type as the given one, then
 *                 this table creation request will fail. Additionally this
 *                 option is invalid if @a tableName is a collection.
 *                         <li> gpudb::aggregate_group_by_expression: Filter
 *                 expression to apply to the table prior to computing the
 *                 aggregate group by.
 *                         <li> gpudb::aggregate_group_by_having: Filter
 *                 expression to apply to the aggregated results.
 *                         <li> gpudb::aggregate_group_by_sort_order: String
 *                 indicating how the returned values should be sorted -
 *                 ascending or descending.
 *                 <ul>
 *                         <li> gpudb::aggregate_group_by_ascending: Indicates
 *                 that the returned values should be sorted in ascending
 *                 order.
 *                         <li> gpudb::aggregate_group_by_descending: Indicates
 *                 that the returned values should be sorted in descending
 *                 order.
 *                 </ul>
 *                 The default value is gpudb::aggregate_group_by_ascending.
 *                         <li> gpudb::aggregate_group_by_sort_by: String
 *                 determining how the results are sorted.
 *                 <ul>
 *                         <li> gpudb::aggregate_group_by_key: Indicates that
 *                 the returned values should be sorted by key, which
 *                 corresponds to the grouping columns. If you have multiple
 *                 grouping columns (and are sorting by key), it will first
 *                 sort the first grouping column, then the second grouping
 *                 column, etc.
 *                         <li> gpudb::aggregate_group_by_value: Indicates that
 *                 the returned values should be sorted by value, which
 *                 corresponds to the aggregates. If you have multiple
 *                 aggregates (and are sorting by value), it will first sort by
 *                 the first aggregate, then the second aggregate, etc.
 *                 </ul>
 *                 The default value is gpudb::aggregate_group_by_key.
 *                         <li> gpudb::aggregate_group_by_result_table: The
 *                 name of the table used to store the results. Has the same
 *                 naming restrictions as <a href="../../concepts/tables.html"
 *                 target="_top">tables</a>. Column names (group-by and
 *                 aggregate fields) need to be given aliases e.g. ["FChar256
 *                 as fchar256", "sum(FDouble) as sfd"].  If present, no
 *                 results are returned in the response.  This option is not
 *                 available if one of the grouping attributes is an
 *                 unrestricted string (i.e.; not charN) type.
 *                         <li> gpudb::aggregate_group_by_result_table_persist:
 *                 If @a true then the result table specified in
 *                 {result_table}@{key of input.options} will be persisted as a
 *                 regular table (it will not be automatically cleared unless a
 *                 @a ttl is provided, and the table data can be modified in
 *                 subsequent operations). If @a false (the default) then the
 *                 result table will be a read-only, memory-only temporary
 *                 table.
 *                 <ul>
 *                         <li> gpudb::aggregate_group_by_true
 *                         <li> gpudb::aggregate_group_by_false
 *                 </ul>
 *                 The default value is gpudb::aggregate_group_by_false.
 *                         <li>
 *                 gpudb::aggregate_group_by_result_table_force_replicated:
 *                 Force the result table to be replicated (ignores any
 *                 sharding). Must be used in combination with the @a
 *                 result_table option.
 *                         <li>
 *                 gpudb::aggregate_group_by_result_table_generate_pk: If
 *                 'true' then set a primary key for the result table. Must be
 *                 used in combination with the @a result_table option.
 *                         <li> gpudb::aggregate_group_by_ttl: Sets the TTL of
 *                 the table specified in @a result_table. The value must be
 *                 the desired TTL in minutes.
 *                         <li> gpudb::aggregate_group_by_chunk_size: If
 *                 provided this indicates the chunk size to be used for the
 *                 result table. Must be used in combination with the @a
 *                 result_table option.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateGroupByResponse& aggregateGroupBy( const std::string& tableName,
                                            const std::vector<std::string>& columnNames,
                                            const int64_t offset,
                                            const int64_t limit,
                                            const std::map<std::string, std::string>& options,
                                            AggregateGroupByResponse& response_ ) const;

/**
 * Performs a histogram calculation given a table, a column, and an interval
 * function. The @a interval is used to produce bins of that size and the
 * result, computed over the records falling within each bin, is returned.  For
 * each bin, the start value is inclusive, but the end value is
 * exclusive--except for the very last bin for which the end value is also
 * inclusive.  The value returned for each bin is the number of records in it,
 * except when a column name is provided as a *value_column* in @a options.  In
 * this latter case the sum of the values corresponding to the *value_column*
 * is used as the result instead.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateHistogramResponse aggregateHistogram( const AggregateHistogramRequest& request_ ) const;

/**
 * Performs a histogram calculation given a table, a column, and an interval
 * function. The @a interval is used to produce bins of that size and the
 * result, computed over the records falling within each bin, is returned.  For
 * each bin, the start value is inclusive, but the end value is
 * exclusive--except for the very last bin for which the end value is also
 * inclusive.  The value returned for each bin is the number of records in it,
 * except when a column name is provided as a *value_column* in @a options.  In
 * this latter case the sum of the values corresponding to the *value_column*
 * is used as the result instead.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateHistogramResponse& aggregateHistogram( const AggregateHistogramRequest& request_,
                                                AggregateHistogramResponse& response_ ) const;

/**
 * Performs a histogram calculation given a table, a column, and an interval
 * function. The @a interval is used to produce bins of that size and the
 * result, computed over the records falling within each bin, is returned.  For
 * each bin, the start value is inclusive, but the end value is
 * exclusive--except for the very last bin for which the end value is also
 * inclusive.  The value returned for each bin is the number of records in it,
 * except when a column name is provided as a *value_column* in @a options.  In
 * this latter case the sum of the values corresponding to the *value_column*
 * is used as the result instead.
 * 
 * @param tableName  Name of the table on which the operation will be
 *                   performed. Must be an existing table or collection.
 * @param columnName  Name of a column or an expression of one or more column
 *                    names over which the histogram will be calculated.
 * @param start  Lower end value of the histogram interval, inclusive.
 * @param end  Upper end value of the histogram interval, inclusive.
 * @param interval  The size of each bin within the start and end parameters.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::aggregate_histogram_value_column: The
 *                 name of the column to use when calculating the bin values
 *                 (values are summed).  The column must be a numerical type
 *                 (int, double, long, float).
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateHistogramResponse aggregateHistogram( const std::string& tableName,
                                               const std::string& columnName,
                                               const double start,
                                               const double end,
                                               const double interval,
                                               const std::map<std::string, std::string>& options ) const;

/**
 * Performs a histogram calculation given a table, a column, and an interval
 * function. The @a interval is used to produce bins of that size and the
 * result, computed over the records falling within each bin, is returned.  For
 * each bin, the start value is inclusive, but the end value is
 * exclusive--except for the very last bin for which the end value is also
 * inclusive.  The value returned for each bin is the number of records in it,
 * except when a column name is provided as a *value_column* in @a options.  In
 * this latter case the sum of the values corresponding to the *value_column*
 * is used as the result instead.
 * 
 * @param tableName  Name of the table on which the operation will be
 *                   performed. Must be an existing table or collection.
 * @param columnName  Name of a column or an expression of one or more column
 *                    names over which the histogram will be calculated.
 * @param start  Lower end value of the histogram interval, inclusive.
 * @param end  Upper end value of the histogram interval, inclusive.
 * @param interval  The size of each bin within the start and end parameters.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::aggregate_histogram_value_column: The
 *                 name of the column to use when calculating the bin values
 *                 (values are summed).  The column must be a numerical type
 *                 (int, double, long, float).
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateHistogramResponse& aggregateHistogram( const std::string& tableName,
                                                const std::string& columnName,
                                                const double start,
                                                const double end,
                                                const double interval,
                                                const std::map<std::string, std::string>& options,
                                                AggregateHistogramResponse& response_ ) const;

/**
 * This endpoint runs the k-means algorithm - a heuristic algorithm that
 * attempts to do k-means clustering.  An ideal k-means clustering algorithm
 * selects k points such that the sum of the mean squared distances of each
 * member of the set to the nearest of the k points is minimized.  The k-means
 * algorithm however does not necessarily produce such an ideal cluster.   It
 * begins with a randomly selected set of k points and then refines the
 * location of the points iteratively and settles to a local minimum.  Various
 * parameters and options are provided to control the heuristic search.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateKMeansResponse aggregateKMeans( const AggregateKMeansRequest& request_ ) const;

/**
 * This endpoint runs the k-means algorithm - a heuristic algorithm that
 * attempts to do k-means clustering.  An ideal k-means clustering algorithm
 * selects k points such that the sum of the mean squared distances of each
 * member of the set to the nearest of the k points is minimized.  The k-means
 * algorithm however does not necessarily produce such an ideal cluster.   It
 * begins with a randomly selected set of k points and then refines the
 * location of the points iteratively and settles to a local minimum.  Various
 * parameters and options are provided to control the heuristic search.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateKMeansResponse& aggregateKMeans( const AggregateKMeansRequest& request_,
                                          AggregateKMeansResponse& response_ ) const;

/**
 * This endpoint runs the k-means algorithm - a heuristic algorithm that
 * attempts to do k-means clustering.  An ideal k-means clustering algorithm
 * selects k points such that the sum of the mean squared distances of each
 * member of the set to the nearest of the k points is minimized.  The k-means
 * algorithm however does not necessarily produce such an ideal cluster.   It
 * begins with a randomly selected set of k points and then refines the
 * location of the points iteratively and settles to a local minimum.  Various
 * parameters and options are provided to control the heuristic search.
 * 
 * @param tableName  Name of the table on which the operation will be
 *                   performed. Must be an existing table or collection.
 * @param columnNames  List of column names on which the operation would be
 *                     performed. If n columns are provided then each of the k
 *                     result points will have n dimensions corresponding to
 *                     the n columns.
 * @param k  The number of mean points to be determined by the algorithm.
 * @param tolerance  Stop iterating when the distances between successive
 *                   points is less than the given tolerance.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::aggregate_k_means_whiten: When set to 1
 *                 each of the columns is first normalized by its stdv -
 *                 default is not to whiten.
 *                         <li> gpudb::aggregate_k_means_max_iters: Number of
 *                 times to try to hit the tolerance limit before giving up -
 *                 default is 10.
 *                         <li> gpudb::aggregate_k_means_num_tries: Number of
 *                 times to run the k-means algorithm with a different randomly
 *                 selected starting points - helps avoid local minimum.
 *                 Default is 1.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateKMeansResponse aggregateKMeans( const std::string& tableName,
                                         const std::vector<std::string>& columnNames,
                                         const int32_t k,
                                         const double tolerance,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * This endpoint runs the k-means algorithm - a heuristic algorithm that
 * attempts to do k-means clustering.  An ideal k-means clustering algorithm
 * selects k points such that the sum of the mean squared distances of each
 * member of the set to the nearest of the k points is minimized.  The k-means
 * algorithm however does not necessarily produce such an ideal cluster.   It
 * begins with a randomly selected set of k points and then refines the
 * location of the points iteratively and settles to a local minimum.  Various
 * parameters and options are provided to control the heuristic search.
 * 
 * @param tableName  Name of the table on which the operation will be
 *                   performed. Must be an existing table or collection.
 * @param columnNames  List of column names on which the operation would be
 *                     performed. If n columns are provided then each of the k
 *                     result points will have n dimensions corresponding to
 *                     the n columns.
 * @param k  The number of mean points to be determined by the algorithm.
 * @param tolerance  Stop iterating when the distances between successive
 *                   points is less than the given tolerance.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::aggregate_k_means_whiten: When set to 1
 *                 each of the columns is first normalized by its stdv -
 *                 default is not to whiten.
 *                         <li> gpudb::aggregate_k_means_max_iters: Number of
 *                 times to try to hit the tolerance limit before giving up -
 *                 default is 10.
 *                         <li> gpudb::aggregate_k_means_num_tries: Number of
 *                 times to run the k-means algorithm with a different randomly
 *                 selected starting points - helps avoid local minimum.
 *                 Default is 1.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateKMeansResponse& aggregateKMeans( const std::string& tableName,
                                          const std::vector<std::string>& columnNames,
                                          const int32_t k,
                                          const double tolerance,
                                          const std::map<std::string, std::string>& options,
                                          AggregateKMeansResponse& response_ ) const;

/**
 * Calculates and returns the minimum and maximum values of a particular column
 * in a table.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateMinMaxResponse aggregateMinMax( const AggregateMinMaxRequest& request_ ) const;

/**
 * Calculates and returns the minimum and maximum values of a particular column
 * in a table.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateMinMaxResponse& aggregateMinMax( const AggregateMinMaxRequest& request_,
                                          AggregateMinMaxResponse& response_ ) const;

/**
 * Calculates and returns the minimum and maximum values of a particular column
 * in a table.
 * 
 * @param tableName  Name of the table on which the operation will be
 *                   performed. Must be an existing table.
 * @param columnName  Name of a column or an expression of one or more column
 *                    on which the min-max will be calculated.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateMinMaxResponse aggregateMinMax( const std::string& tableName,
                                         const std::string& columnName,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Calculates and returns the minimum and maximum values of a particular column
 * in a table.
 * 
 * @param tableName  Name of the table on which the operation will be
 *                   performed. Must be an existing table.
 * @param columnName  Name of a column or an expression of one or more column
 *                    on which the min-max will be calculated.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateMinMaxResponse& aggregateMinMax( const std::string& tableName,
                                          const std::string& columnName,
                                          const std::map<std::string, std::string>& options,
                                          AggregateMinMaxResponse& response_ ) const;

/**
 * Calculates and returns the minimum and maximum x- and y-coordinates of a
 * particular geospatial geometry column in a table.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateMinMaxGeometryResponse aggregateMinMaxGeometry( const AggregateMinMaxGeometryRequest& request_ ) const;

/**
 * Calculates and returns the minimum and maximum x- and y-coordinates of a
 * particular geospatial geometry column in a table.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateMinMaxGeometryResponse& aggregateMinMaxGeometry( const AggregateMinMaxGeometryRequest& request_,
                                                          AggregateMinMaxGeometryResponse& response_ ) const;

/**
 * Calculates and returns the minimum and maximum x- and y-coordinates of a
 * particular geospatial geometry column in a table.
 * 
 * @param tableName  Name of the table on which the operation will be
 *                   performed. Must be an existing table.
 * @param columnName  Name of a geospatial geometry column on which the min-max
 *                    will be calculated.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateMinMaxGeometryResponse aggregateMinMaxGeometry( const std::string& tableName,
                                                         const std::string& columnName,
                                                         const std::map<std::string, std::string>& options ) const;

/**
 * Calculates and returns the minimum and maximum x- and y-coordinates of a
 * particular geospatial geometry column in a table.
 * 
 * @param tableName  Name of the table on which the operation will be
 *                   performed. Must be an existing table.
 * @param columnName  Name of a geospatial geometry column on which the min-max
 *                    will be calculated.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateMinMaxGeometryResponse& aggregateMinMaxGeometry( const std::string& tableName,
                                                          const std::string& columnName,
                                                          const std::map<std::string, std::string>& options,
                                                          AggregateMinMaxGeometryResponse& response_ ) const;

/**
 * Calculates the requested statistics of a given column in a given table.
 * <p>
 * The available statistics are count (number of total objects), mean, stdv
 * (standard deviation), variance, skew, kurtosis, sum, sum_of_squares, min,
 * max, weighted_average, cardinality (unique count), estimated cardinality,
 * percentile and percentile_rank.
 * <p>
 * Estimated cardinality is calculated by using the hyperloglog approximation
 * technique.
 * <p>
 * Percentiles and percentile_ranks are approximate and are calculated using
 * the t-digest algorithm. They must include the desired
 * percentile/percentile_rank. To compute multiple percentiles each value must
 * be specified separately (i.e.
 * 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
 * <p>
 * The weighted average statistic requires a weight_attribute to be specified
 * in @a options. The weighted average is then defined as the sum of the
 * products of @a columnName times the weight attribute divided by the sum of
 * the weight attribute.
 * <p>
 * The response includes a list of the statistics requested along with the
 * count of the number of items in the given set.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateStatisticsResponse aggregateStatistics( const AggregateStatisticsRequest& request_ ) const;

/**
 * Calculates the requested statistics of a given column in a given table.
 * <p>
 * The available statistics are count (number of total objects), mean, stdv
 * (standard deviation), variance, skew, kurtosis, sum, sum_of_squares, min,
 * max, weighted_average, cardinality (unique count), estimated cardinality,
 * percentile and percentile_rank.
 * <p>
 * Estimated cardinality is calculated by using the hyperloglog approximation
 * technique.
 * <p>
 * Percentiles and percentile_ranks are approximate and are calculated using
 * the t-digest algorithm. They must include the desired
 * percentile/percentile_rank. To compute multiple percentiles each value must
 * be specified separately (i.e.
 * 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
 * <p>
 * The weighted average statistic requires a weight_attribute to be specified
 * in @a options. The weighted average is then defined as the sum of the
 * products of @a columnName times the weight attribute divided by the sum of
 * the weight attribute.
 * <p>
 * The response includes a list of the statistics requested along with the
 * count of the number of items in the given set.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateStatisticsResponse& aggregateStatistics( const AggregateStatisticsRequest& request_,
                                                  AggregateStatisticsResponse& response_ ) const;

/**
 * Calculates the requested statistics of a given column in a given table.
 * <p>
 * The available statistics are count (number of total objects), mean, stdv
 * (standard deviation), variance, skew, kurtosis, sum, sum_of_squares, min,
 * max, weighted_average, cardinality (unique count), estimated cardinality,
 * percentile and percentile_rank.
 * <p>
 * Estimated cardinality is calculated by using the hyperloglog approximation
 * technique.
 * <p>
 * Percentiles and percentile_ranks are approximate and are calculated using
 * the t-digest algorithm. They must include the desired
 * percentile/percentile_rank. To compute multiple percentiles each value must
 * be specified separately (i.e.
 * 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
 * <p>
 * The weighted average statistic requires a weight_attribute to be specified
 * in @a options. The weighted average is then defined as the sum of the
 * products of @a columnName times the weight attribute divided by the sum of
 * the weight attribute.
 * <p>
 * The response includes a list of the statistics requested along with the
 * count of the number of items in the given set.
 * 
 * @param tableName  Name of the table on which the statistics operation will
 *                   be performed.
 * @param columnName  Name of the column for which the statistics are to be
 *                    calculated.
 * @param stats  Comma separated list of the statistics to calculate, e.g.
 *               "sum,mean".
 *               <ul>
 *                       <li> gpudb::aggregate_statistics_count: Number of
 *               objects (independent of the given column).
 *                       <li> gpudb::aggregate_statistics_mean: Arithmetic mean
 *               (average), equivalent to sum/count.
 *                       <li> gpudb::aggregate_statistics_stdv: Sample standard
 *               deviation (denominator is count-1).
 *                       <li> gpudb::aggregate_statistics_variance: Unbiased
 *               sample variance (denominator is count-1).
 *                       <li> gpudb::aggregate_statistics_skew: Skewness (third
 *               standardized moment).
 *                       <li> gpudb::aggregate_statistics_kurtosis: Kurtosis
 *               (fourth standardized moment).
 *                       <li> gpudb::aggregate_statistics_sum: Sum of all
 *               values in the column.
 *                       <li> gpudb::aggregate_statistics_sum_of_squares: Sum
 *               of the squares of all values in the column.
 *                       <li> gpudb::aggregate_statistics_min: Minimum value of
 *               the column.
 *                       <li> gpudb::aggregate_statistics_max: Maximum value of
 *               the column.
 *                       <li> gpudb::aggregate_statistics_weighted_average:
 *               Weighted arithmetic mean (using the option
 *               'weight_column_name' as the weighting column).
 *                       <li> gpudb::aggregate_statistics_cardinality: Number
 *               of unique values in the column.
 *                       <li>
 *               gpudb::aggregate_statistics_estimated_cardinality: Estimate
 *               (via hyperloglog technique) of the number of unique values in
 *               the column.
 *                       <li> gpudb::aggregate_statistics_percentile: Estimate
 *               (via t-digest) of the given percentile of the column
 *               (percentile(50.0) will be an approximation of the median).
 *                       <li> gpudb::aggregate_statistics_percentile_rank:
 *               Estimate (via t-digest) of the percentile rank of the given
 *               value in the column (if the given value is the median of the
 *               column, percentile_rank([median]) will return approximately
 *               50.0).
 *               </ul>
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li>
 *                 gpudb::aggregate_statistics_additional_column_names: A list
 *                 of comma separated column names over which statistics can be
 *                 accumulated along with the primary column.
 *                         <li> gpudb::aggregate_statistics_weight_column_name:
 *                 Name of column used as weighting attribute for the weighted
 *                 average statistic.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateStatisticsResponse aggregateStatistics( const std::string& tableName,
                                                 const std::string& columnName,
                                                 const std::string& stats,
                                                 const std::map<std::string, std::string>& options ) const;

/**
 * Calculates the requested statistics of a given column in a given table.
 * <p>
 * The available statistics are count (number of total objects), mean, stdv
 * (standard deviation), variance, skew, kurtosis, sum, sum_of_squares, min,
 * max, weighted_average, cardinality (unique count), estimated cardinality,
 * percentile and percentile_rank.
 * <p>
 * Estimated cardinality is calculated by using the hyperloglog approximation
 * technique.
 * <p>
 * Percentiles and percentile_ranks are approximate and are calculated using
 * the t-digest algorithm. They must include the desired
 * percentile/percentile_rank. To compute multiple percentiles each value must
 * be specified separately (i.e.
 * 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
 * <p>
 * The weighted average statistic requires a weight_attribute to be specified
 * in @a options. The weighted average is then defined as the sum of the
 * products of @a columnName times the weight attribute divided by the sum of
 * the weight attribute.
 * <p>
 * The response includes a list of the statistics requested along with the
 * count of the number of items in the given set.
 * 
 * @param tableName  Name of the table on which the statistics operation will
 *                   be performed.
 * @param columnName  Name of the column for which the statistics are to be
 *                    calculated.
 * @param stats  Comma separated list of the statistics to calculate, e.g.
 *               "sum,mean".
 *               <ul>
 *                       <li> gpudb::aggregate_statistics_count: Number of
 *               objects (independent of the given column).
 *                       <li> gpudb::aggregate_statistics_mean: Arithmetic mean
 *               (average), equivalent to sum/count.
 *                       <li> gpudb::aggregate_statistics_stdv: Sample standard
 *               deviation (denominator is count-1).
 *                       <li> gpudb::aggregate_statistics_variance: Unbiased
 *               sample variance (denominator is count-1).
 *                       <li> gpudb::aggregate_statistics_skew: Skewness (third
 *               standardized moment).
 *                       <li> gpudb::aggregate_statistics_kurtosis: Kurtosis
 *               (fourth standardized moment).
 *                       <li> gpudb::aggregate_statistics_sum: Sum of all
 *               values in the column.
 *                       <li> gpudb::aggregate_statistics_sum_of_squares: Sum
 *               of the squares of all values in the column.
 *                       <li> gpudb::aggregate_statistics_min: Minimum value of
 *               the column.
 *                       <li> gpudb::aggregate_statistics_max: Maximum value of
 *               the column.
 *                       <li> gpudb::aggregate_statistics_weighted_average:
 *               Weighted arithmetic mean (using the option
 *               'weight_column_name' as the weighting column).
 *                       <li> gpudb::aggregate_statistics_cardinality: Number
 *               of unique values in the column.
 *                       <li>
 *               gpudb::aggregate_statistics_estimated_cardinality: Estimate
 *               (via hyperloglog technique) of the number of unique values in
 *               the column.
 *                       <li> gpudb::aggregate_statistics_percentile: Estimate
 *               (via t-digest) of the given percentile of the column
 *               (percentile(50.0) will be an approximation of the median).
 *                       <li> gpudb::aggregate_statistics_percentile_rank:
 *               Estimate (via t-digest) of the percentile rank of the given
 *               value in the column (if the given value is the median of the
 *               column, percentile_rank([median]) will return approximately
 *               50.0).
 *               </ul>
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li>
 *                 gpudb::aggregate_statistics_additional_column_names: A list
 *                 of comma separated column names over which statistics can be
 *                 accumulated along with the primary column.
 *                         <li> gpudb::aggregate_statistics_weight_column_name:
 *                 Name of column used as weighting attribute for the weighted
 *                 average statistic.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateStatisticsResponse& aggregateStatistics( const std::string& tableName,
                                                  const std::string& columnName,
                                                  const std::string& stats,
                                                  const std::map<std::string, std::string>& options,
                                                  AggregateStatisticsResponse& response_ ) const;

/**
 * Divides the given set into bins and calculates statistics of the values of a
 * value-column in each bin.  The bins are based on the values of a given
 * binning-column.  The statistics that may be requested are mean, stdv
 * (standard deviation), variance, skew, kurtosis, sum, min, max, first, last
 * and weighted average. In addition to the requested statistics the count of
 * total samples in each bin is returned. This counts vector is just the
 * histogram of the column used to divide the set members into bins. The
 * weighted average statistic requires a weight_column to be specified in @a
 * options. The weighted average is then defined as the sum of the products of
 * the value column times the weight column divided by the sum of the weight
 * column.
 * <p>
 * There are two methods for binning the set members. In the first, which can
 * be used for numeric valued binning-columns, a min, max and interval are
 * specified. The number of bins, nbins, is the integer upper bound of
 * (max-min)/interval. Values that fall in the range
 * [min+n\*interval,min+(n+1)\*interval) are placed in the nth bin where n
 * ranges from 0..nbin-2. The final bin is [min+(nbin-1)\*interval,max]. In the
 * second method, @a options bin_values specifies a list of binning column
 * values. Binning-columns whose value matches the nth member of the bin_values
 * list are placed in the nth bin. When a list is provided the binning-column
 * must be of type string or int.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateStatisticsByRangeResponse aggregateStatisticsByRange( const AggregateStatisticsByRangeRequest& request_ ) const;

/**
 * Divides the given set into bins and calculates statistics of the values of a
 * value-column in each bin.  The bins are based on the values of a given
 * binning-column.  The statistics that may be requested are mean, stdv
 * (standard deviation), variance, skew, kurtosis, sum, min, max, first, last
 * and weighted average. In addition to the requested statistics the count of
 * total samples in each bin is returned. This counts vector is just the
 * histogram of the column used to divide the set members into bins. The
 * weighted average statistic requires a weight_column to be specified in @a
 * options. The weighted average is then defined as the sum of the products of
 * the value column times the weight column divided by the sum of the weight
 * column.
 * <p>
 * There are two methods for binning the set members. In the first, which can
 * be used for numeric valued binning-columns, a min, max and interval are
 * specified. The number of bins, nbins, is the integer upper bound of
 * (max-min)/interval. Values that fall in the range
 * [min+n\*interval,min+(n+1)\*interval) are placed in the nth bin where n
 * ranges from 0..nbin-2. The final bin is [min+(nbin-1)\*interval,max]. In the
 * second method, @a options bin_values specifies a list of binning column
 * values. Binning-columns whose value matches the nth member of the bin_values
 * list are placed in the nth bin. When a list is provided the binning-column
 * must be of type string or int.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateStatisticsByRangeResponse& aggregateStatisticsByRange( const AggregateStatisticsByRangeRequest& request_,
                                                                AggregateStatisticsByRangeResponse& response_ ) const;

/**
 * Divides the given set into bins and calculates statistics of the values of a
 * value-column in each bin.  The bins are based on the values of a given
 * binning-column.  The statistics that may be requested are mean, stdv
 * (standard deviation), variance, skew, kurtosis, sum, min, max, first, last
 * and weighted average. In addition to the requested statistics the count of
 * total samples in each bin is returned. This counts vector is just the
 * histogram of the column used to divide the set members into bins. The
 * weighted average statistic requires a weight_column to be specified in @a
 * options. The weighted average is then defined as the sum of the products of
 * the value column times the weight column divided by the sum of the weight
 * column.
 * <p>
 * There are two methods for binning the set members. In the first, which can
 * be used for numeric valued binning-columns, a min, max and interval are
 * specified. The number of bins, nbins, is the integer upper bound of
 * (max-min)/interval. Values that fall in the range
 * [min+n\*interval,min+(n+1)\*interval) are placed in the nth bin where n
 * ranges from 0..nbin-2. The final bin is [min+(nbin-1)\*interval,max]. In the
 * second method, @a options bin_values specifies a list of binning column
 * values. Binning-columns whose value matches the nth member of the bin_values
 * list are placed in the nth bin. When a list is provided the binning-column
 * must be of type string or int.
 * 
 * @param tableName  Name of the table on which the ranged-statistics operation
 *                   will be performed.
 * @param selectExpression  For a non-empty expression statistics are
 *                          calculated for those records for which the
 *                          expression is true.
 * @param columnName  Name of the binning-column used to divide the set samples
 *                    into bins.
 * @param valueColumnName  Name of the value-column for which statistics are to
 *                         be computed.
 * @param stats  A string of comma separated list of the statistics to
 *               calculate, e.g. 'sum,mean'. Available statistics: mean, stdv
 *               (standard deviation), variance, skew, kurtosis, sum.
 * @param start  The lower bound of the binning-column.
 * @param end  The upper bound of the binning-column.
 * @param interval  The interval of a bin. Set members fall into bin i if the
 *                  binning-column falls in the range [start+interval``*``i,
 *                  start+interval``*``(i+1)).
 * @param options  Map of optional parameters:
 *                 <ul>
 *                         <li>
 *                 gpudb::aggregate_statistics_by_range_additional_column_names:
 *                 A list of comma separated value-column names over which
 *                 statistics can be accumulated along with the primary
 *                 value_column.
 *                         <li>
 *                 gpudb::aggregate_statistics_by_range_bin_values: A list of
 *                 comma separated binning-column values. Values that match the
 *                 nth bin_values value are placed in the nth bin.
 *                         <li>
 *                 gpudb::aggregate_statistics_by_range_weight_column_name:
 *                 Name of the column used as weighting column for the
 *                 weighted_average statistic.
 *                         <li>
 *                 gpudb::aggregate_statistics_by_range_order_column_name: Name
 *                 of the column used for candlestick charting techniques.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateStatisticsByRangeResponse aggregateStatisticsByRange( const std::string& tableName,
                                                               const std::string& selectExpression,
                                                               const std::string& columnName,
                                                               const std::string& valueColumnName,
                                                               const std::string& stats,
                                                               const double start,
                                                               const double end,
                                                               const double interval,
                                                               const std::map<std::string, std::string>& options ) const;

/**
 * Divides the given set into bins and calculates statistics of the values of a
 * value-column in each bin.  The bins are based on the values of a given
 * binning-column.  The statistics that may be requested are mean, stdv
 * (standard deviation), variance, skew, kurtosis, sum, min, max, first, last
 * and weighted average. In addition to the requested statistics the count of
 * total samples in each bin is returned. This counts vector is just the
 * histogram of the column used to divide the set members into bins. The
 * weighted average statistic requires a weight_column to be specified in @a
 * options. The weighted average is then defined as the sum of the products of
 * the value column times the weight column divided by the sum of the weight
 * column.
 * <p>
 * There are two methods for binning the set members. In the first, which can
 * be used for numeric valued binning-columns, a min, max and interval are
 * specified. The number of bins, nbins, is the integer upper bound of
 * (max-min)/interval. Values that fall in the range
 * [min+n\*interval,min+(n+1)\*interval) are placed in the nth bin where n
 * ranges from 0..nbin-2. The final bin is [min+(nbin-1)\*interval,max]. In the
 * second method, @a options bin_values specifies a list of binning column
 * values. Binning-columns whose value matches the nth member of the bin_values
 * list are placed in the nth bin. When a list is provided the binning-column
 * must be of type string or int.
 * 
 * @param tableName  Name of the table on which the ranged-statistics operation
 *                   will be performed.
 * @param selectExpression  For a non-empty expression statistics are
 *                          calculated for those records for which the
 *                          expression is true.
 * @param columnName  Name of the binning-column used to divide the set samples
 *                    into bins.
 * @param valueColumnName  Name of the value-column for which statistics are to
 *                         be computed.
 * @param stats  A string of comma separated list of the statistics to
 *               calculate, e.g. 'sum,mean'. Available statistics: mean, stdv
 *               (standard deviation), variance, skew, kurtosis, sum.
 * @param start  The lower bound of the binning-column.
 * @param end  The upper bound of the binning-column.
 * @param interval  The interval of a bin. Set members fall into bin i if the
 *                  binning-column falls in the range [start+interval``*``i,
 *                  start+interval``*``(i+1)).
 * @param options  Map of optional parameters:
 *                 <ul>
 *                         <li>
 *                 gpudb::aggregate_statistics_by_range_additional_column_names:
 *                 A list of comma separated value-column names over which
 *                 statistics can be accumulated along with the primary
 *                 value_column.
 *                         <li>
 *                 gpudb::aggregate_statistics_by_range_bin_values: A list of
 *                 comma separated binning-column values. Values that match the
 *                 nth bin_values value are placed in the nth bin.
 *                         <li>
 *                 gpudb::aggregate_statistics_by_range_weight_column_name:
 *                 Name of the column used as weighting column for the
 *                 weighted_average statistic.
 *                         <li>
 *                 gpudb::aggregate_statistics_by_range_order_column_name: Name
 *                 of the column used for candlestick charting techniques.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateStatisticsByRangeResponse& aggregateStatisticsByRange( const std::string& tableName,
                                                                const std::string& selectExpression,
                                                                const std::string& columnName,
                                                                const std::string& valueColumnName,
                                                                const std::string& stats,
                                                                const double start,
                                                                const double end,
                                                                const double interval,
                                                                const std::map<std::string, std::string>& options,
                                                                AggregateStatisticsByRangeResponse& response_ ) const;

/**
 * Returns all the unique values from a particular column (specified by @a
 * columnName) of a particular table (specified by @a tableName). If @a
 * columnName is a numeric column the values will be in @a
 * binaryEncodedResponse. Otherwise if @a columnName is a string column the
 * values will be in @a jsonEncodedResponse.  @a offset and @a limit are used
 * to page through the results if there are large numbers of unique values. To
 * get the first 10 unique values sorted in descending order @a options would
 * be::
 * <p>
 * {"limit":"10","sort_order":"descending"}.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * <p>
 * If a @a result_table name is specified in the options, the results are
 * stored in a new table with that name.  No results are returned in the
 * response.  If the source table's <a
 * href="../../concepts/tables.html#shard-keys" target="_top">shard key</a> is
 * used as the @a columnName, the result table will be sharded, in all other
 * cases it will be replicated.  Sorting will properly function only if the
 * result table is replicated or if there is only one processing node and
 * should not be relied upon in other cases.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

RawAggregateUniqueResponse aggregateUniqueRaw( const AggregateUniqueRequest& request_ ) const;

/**
 * Returns all the unique values from a particular column (specified by @a
 * columnName) of a particular table (specified by @a tableName). If @a
 * columnName is a numeric column the values will be in @a
 * binaryEncodedResponse. Otherwise if @a columnName is a string column the
 * values will be in @a jsonEncodedResponse.  @a offset and @a limit are used
 * to page through the results if there are large numbers of unique values. To
 * get the first 10 unique values sorted in descending order @a options would
 * be::
 * <p>
 * {"limit":"10","sort_order":"descending"}.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * <p>
 * If a @a result_table name is specified in the options, the results are
 * stored in a new table with that name.  No results are returned in the
 * response.  If the source table's <a
 * href="../../concepts/tables.html#shard-keys" target="_top">shard key</a> is
 * used as the @a columnName, the result table will be sharded, in all other
 * cases it will be replicated.  Sorting will properly function only if the
 * result table is replicated or if there is only one processing node and
 * should not be relied upon in other cases.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

RawAggregateUniqueResponse& aggregateUniqueRaw( const AggregateUniqueRequest& request_,
                                                RawAggregateUniqueResponse& response_ ) const;

/**
 * Returns all the unique values from a particular column (specified by @a
 * columnName) of a particular table (specified by @a tableName). If @a
 * columnName is a numeric column the values will be in @a
 * binaryEncodedResponse. Otherwise if @a columnName is a string column the
 * values will be in @a jsonEncodedResponse.  @a offset and @a limit are used
 * to page through the results if there are large numbers of unique values. To
 * get the first 10 unique values sorted in descending order @a options would
 * be::
 * <p>
 * {"limit":"10","sort_order":"descending"}.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * <p>
 * If a @a result_table name is specified in the options, the results are
 * stored in a new table with that name.  No results are returned in the
 * response.  If the source table's <a
 * href="../../concepts/tables.html#shard-keys" target="_top">shard key</a> is
 * used as the @a columnName, the result table will be sharded, in all other
 * cases it will be replicated.  Sorting will properly function only if the
 * result table is replicated or if there is only one processing node and
 * should not be relied upon in other cases.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateUniqueResponse aggregateUnique( const AggregateUniqueRequest& request_ ) const;

/**
 * Returns all the unique values from a particular column (specified by @a
 * columnName) of a particular table (specified by @a tableName). If @a
 * columnName is a numeric column the values will be in @a
 * binaryEncodedResponse. Otherwise if @a columnName is a string column the
 * values will be in @a jsonEncodedResponse.  @a offset and @a limit are used
 * to page through the results if there are large numbers of unique values. To
 * get the first 10 unique values sorted in descending order @a options would
 * be::
 * <p>
 * {"limit":"10","sort_order":"descending"}.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * <p>
 * If a @a result_table name is specified in the options, the results are
 * stored in a new table with that name.  No results are returned in the
 * response.  If the source table's <a
 * href="../../concepts/tables.html#shard-keys" target="_top">shard key</a> is
 * used as the @a columnName, the result table will be sharded, in all other
 * cases it will be replicated.  Sorting will properly function only if the
 * result table is replicated or if there is only one processing node and
 * should not be relied upon in other cases.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateUniqueResponse& aggregateUnique( const AggregateUniqueRequest& request_,
                                          AggregateUniqueResponse& response_ ) const;

/**
 * Returns all the unique values from a particular column (specified by @a
 * columnName) of a particular table (specified by @a tableName). If @a
 * columnName is a numeric column the values will be in @a
 * binaryEncodedResponse. Otherwise if @a columnName is a string column the
 * values will be in @a jsonEncodedResponse.  @a offset and @a limit are used
 * to page through the results if there are large numbers of unique values. To
 * get the first 10 unique values sorted in descending order @a options would
 * be::
 * <p>
 * {"limit":"10","sort_order":"descending"}.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * <p>
 * If a @a result_table name is specified in the options, the results are
 * stored in a new table with that name.  No results are returned in the
 * response.  If the source table's <a
 * href="../../concepts/tables.html#shard-keys" target="_top">shard key</a> is
 * used as the @a columnName, the result table will be sharded, in all other
 * cases it will be replicated.  Sorting will properly function only if the
 * result table is replicated or if there is only one processing node and
 * should not be relied upon in other cases.
 * 
 * @param tableName  Name of the table on which the operation will be
 *                   performed. Must be an existing table.
 * @param columnName  Name of the column or an expression containing one or
 *                    more column names on which the unique function would be
 *                    applied.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned. Or END_OF_SET (-9999) to indicate that the max
 *               number of results should be returned.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::aggregate_unique_collection_name: Name
 *                 of a collection which is to contain the table specified in
 *                 'result_table', otherwise the table will be a top-level
 *                 table. If the collection does not allow duplicate types and
 *                 it contains a table of the same type as the given one, then
 *                 this table creation request will fail.
 *                         <li> gpudb::aggregate_unique_expression: Optional
 *                 filter expression to apply to the table.
 *                         <li> gpudb::aggregate_unique_sort_order: String
 *                 indicating how the returned values should be sorted.
 *                 <ul>
 *                         <li> gpudb::aggregate_unique_ascending
 *                         <li> gpudb::aggregate_unique_descending
 *                 </ul>
 *                 The default value is gpudb::aggregate_unique_ascending.
 *                         <li> gpudb::aggregate_unique_result_table: The name
 *                 of the table used to store the results. If present no
 *                 results are returned in the response. Has the same naming
 *                 restrictions as <a href="../../concepts/tables.html"
 *                 target="_top">tables</a>.
 *                         <li> gpudb::aggregate_unique_result_table_persist:
 *                 If @a true then the result table specified in @a
 *                 result_table will be persisted as a regular table (it will
 *                 not be automatically cleared unless a @a ttl is provided,
 *                 and the table data can be modified in subsequent
 *                 operations). If @a false (the default) then the result table
 *                 will be a read-only, memory-only temporary table.
 *                 <ul>
 *                         <li> gpudb::aggregate_unique_true
 *                         <li> gpudb::aggregate_unique_false
 *                 </ul>
 *                 The default value is gpudb::aggregate_unique_false.
 *                         <li>
 *                 gpudb::aggregate_unique_result_table_force_replicated: Force
 *                 the result table to be replicated (ignores any sharding).
 *                 Must be used in combination with the 'result_table' option.
 *                         <li>
 *                 gpudb::aggregate_unique_result_table_generate_pk: If 'true'
 *                 then set a primary key for the result table. Must be used in
 *                 combination with the 'result_table' option.
 *                         <li> gpudb::aggregate_unique_ttl: Sets the TTL of
 *                 the table specified in 'result_table'. The value must be the
 *                 desired TTL in minutes.
 *                         <li> gpudb::aggregate_unique_chunk_size: If provided
 *                 this indicates the chunk size to be used for the result
 *                 table. Must be used in combination with the @a result_table
 *                 option.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateUniqueResponse aggregateUnique( const std::string& tableName,
                                         const std::string& columnName,
                                         const int64_t offset,
                                         const int64_t limit,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Returns all the unique values from a particular column (specified by @a
 * columnName) of a particular table (specified by @a tableName). If @a
 * columnName is a numeric column the values will be in @a
 * binaryEncodedResponse. Otherwise if @a columnName is a string column the
 * values will be in @a jsonEncodedResponse.  @a offset and @a limit are used
 * to page through the results if there are large numbers of unique values. To
 * get the first 10 unique values sorted in descending order @a options would
 * be::
 * <p>
 * {"limit":"10","sort_order":"descending"}.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * <p>
 * If a @a result_table name is specified in the options, the results are
 * stored in a new table with that name.  No results are returned in the
 * response.  If the source table's <a
 * href="../../concepts/tables.html#shard-keys" target="_top">shard key</a> is
 * used as the @a columnName, the result table will be sharded, in all other
 * cases it will be replicated.  Sorting will properly function only if the
 * result table is replicated or if there is only one processing node and
 * should not be relied upon in other cases.
 * 
 * @param tableName  Name of the table on which the operation will be
 *                   performed. Must be an existing table.
 * @param columnName  Name of the column or an expression containing one or
 *                    more column names on which the unique function would be
 *                    applied.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned. Or END_OF_SET (-9999) to indicate that the max
 *               number of results should be returned.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::aggregate_unique_collection_name: Name
 *                 of a collection which is to contain the table specified in
 *                 'result_table', otherwise the table will be a top-level
 *                 table. If the collection does not allow duplicate types and
 *                 it contains a table of the same type as the given one, then
 *                 this table creation request will fail.
 *                         <li> gpudb::aggregate_unique_expression: Optional
 *                 filter expression to apply to the table.
 *                         <li> gpudb::aggregate_unique_sort_order: String
 *                 indicating how the returned values should be sorted.
 *                 <ul>
 *                         <li> gpudb::aggregate_unique_ascending
 *                         <li> gpudb::aggregate_unique_descending
 *                 </ul>
 *                 The default value is gpudb::aggregate_unique_ascending.
 *                         <li> gpudb::aggregate_unique_result_table: The name
 *                 of the table used to store the results. If present no
 *                 results are returned in the response. Has the same naming
 *                 restrictions as <a href="../../concepts/tables.html"
 *                 target="_top">tables</a>.
 *                         <li> gpudb::aggregate_unique_result_table_persist:
 *                 If @a true then the result table specified in @a
 *                 result_table will be persisted as a regular table (it will
 *                 not be automatically cleared unless a @a ttl is provided,
 *                 and the table data can be modified in subsequent
 *                 operations). If @a false (the default) then the result table
 *                 will be a read-only, memory-only temporary table.
 *                 <ul>
 *                         <li> gpudb::aggregate_unique_true
 *                         <li> gpudb::aggregate_unique_false
 *                 </ul>
 *                 The default value is gpudb::aggregate_unique_false.
 *                         <li>
 *                 gpudb::aggregate_unique_result_table_force_replicated: Force
 *                 the result table to be replicated (ignores any sharding).
 *                 Must be used in combination with the 'result_table' option.
 *                         <li>
 *                 gpudb::aggregate_unique_result_table_generate_pk: If 'true'
 *                 then set a primary key for the result table. Must be used in
 *                 combination with the 'result_table' option.
 *                         <li> gpudb::aggregate_unique_ttl: Sets the TTL of
 *                 the table specified in 'result_table'. The value must be the
 *                 desired TTL in minutes.
 *                         <li> gpudb::aggregate_unique_chunk_size: If provided
 *                 this indicates the chunk size to be used for the result
 *                 table. Must be used in combination with the @a result_table
 *                 option.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateUniqueResponse& aggregateUnique( const std::string& tableName,
                                          const std::string& columnName,
                                          const int64_t offset,
                                          const int64_t limit,
                                          const std::map<std::string, std::string>& options,
                                          AggregateUniqueResponse& response_ ) const;

/**
 * Rotate the column values into rows values.
 * <p>
 * The aggregate unpivot is used to normalize tables that are built for cross
 * tabular reporting purposes. The unpivot operator rotates the column values
 * for all the pivoted columns. A variable column, value column and all columns
 * from the source table except the unpivot columns are projected into the
 * result table. The variable column and value columns in the result table
 * indicate the pivoted column name and values respectively.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

RawAggregateUnpivotResponse aggregateUnpivotRaw( const AggregateUnpivotRequest& request_ ) const;

/**
 * Rotate the column values into rows values.
 * <p>
 * The aggregate unpivot is used to normalize tables that are built for cross
 * tabular reporting purposes. The unpivot operator rotates the column values
 * for all the pivoted columns. A variable column, value column and all columns
 * from the source table except the unpivot columns are projected into the
 * result table. The variable column and value columns in the result table
 * indicate the pivoted column name and values respectively.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

RawAggregateUnpivotResponse& aggregateUnpivotRaw( const AggregateUnpivotRequest& request_,
                                                  RawAggregateUnpivotResponse& response_ ) const;

/**
 * Rotate the column values into rows values.
 * <p>
 * The aggregate unpivot is used to normalize tables that are built for cross
 * tabular reporting purposes. The unpivot operator rotates the column values
 * for all the pivoted columns. A variable column, value column and all columns
 * from the source table except the unpivot columns are projected into the
 * result table. The variable column and value columns in the result table
 * indicate the pivoted column name and values respectively.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateUnpivotResponse aggregateUnpivot( const AggregateUnpivotRequest& request_ ) const;

/**
 * Rotate the column values into rows values.
 * <p>
 * The aggregate unpivot is used to normalize tables that are built for cross
 * tabular reporting purposes. The unpivot operator rotates the column values
 * for all the pivoted columns. A variable column, value column and all columns
 * from the source table except the unpivot columns are projected into the
 * result table. The variable column and value columns in the result table
 * indicate the pivoted column name and values respectively.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateUnpivotResponse& aggregateUnpivot( const AggregateUnpivotRequest& request_,
                                            AggregateUnpivotResponse& response_ ) const;

/**
 * Rotate the column values into rows values.
 * <p>
 * The aggregate unpivot is used to normalize tables that are built for cross
 * tabular reporting purposes. The unpivot operator rotates the column values
 * for all the pivoted columns. A variable column, value column and all columns
 * from the source table except the unpivot columns are projected into the
 * result table. The variable column and value columns in the result table
 * indicate the pivoted column name and values respectively.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * 
 * @param tableName  Name of the table on which the operation will be
 *                   performed. Must be an existing table/view.
 * @param variableColumnName  Specifies the variable/parameter column name.
 * @param valueColumnName  Specifies the value column name.
 * @param pivotedColumns  List of one or more values typically the column names
 *                        of the input table. All the columns in the source
 *                        table must have the same data type.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::aggregate_unpivot_collection_name: Name
 *                 of a collection which is to contain the table specified in
 *                 @a result_table, otherwise the table will be a top-level
 *                 table. If the collection does not allow duplicate types and
 *                 it contains a table of the same type as the given one, then
 *                 this table creation request will fail. Additionally this
 *                 option is invalid if @a tableName is a collection.
 *                         <li> gpudb::aggregate_unpivot_result_table: The name
 *                 of the table used to store the results. Has the same naming
 *                 restrictions as <a href="../../concepts/tables.html"
 *                 target="_top">tables</a>. If present, no results are
 *                 returned in the response.
 *                         <li> gpudb::aggregate_unpivot_result_table_persist:
 *                 If @a true then the result table specified in
 *                 {result_table}@{key of input.options} will be persisted as a
 *                 regular table (it will not be automatically cleared unless a
 *                 @a ttl is provided, and the table data can be modified in
 *                 subsequent operations). If @a false (the default) then the
 *                 result table will be a read-only, memory-only temporary
 *                 table.
 *                 <ul>
 *                         <li> gpudb::aggregate_unpivot_true
 *                         <li> gpudb::aggregate_unpivot_false
 *                 </ul>
 *                 The default value is gpudb::aggregate_unpivot_false.
 *                         <li> gpudb::aggregate_unpivot_expression: Filter
 *                 expression to apply to the table prior to unpivot
 *                 processing.
 *                         <li> gpudb::aggregate_unpivot_order_by:
 *                 Comma-separated list of the columns to be sorted by; e.g.
 *                 'timestamp asc, x desc'.  The columns specified must be
 *                 present in input table.  If any alias is given for any
 *                 column name, the alias must be used, rather than the
 *                 original column name.
 *                         <li> gpudb::aggregate_unpivot_chunk_size: If
 *                 provided this indicates the chunk size to be used for the
 *                 result table. Must be used in combination with the @a
 *                 result_table option.
 *                         <li> gpudb::aggregate_unpivot_limit: The number of
 *                 records to keep.
 *                         <li> gpudb::aggregate_unpivot_ttl: Sets the TTL of
 *                 the table specified in @a result_table. The value must be
 *                 the desired TTL in minutes.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AggregateUnpivotResponse aggregateUnpivot( const std::string& tableName,
                                           const std::string& variableColumnName,
                                           const std::string& valueColumnName,
                                           const std::vector<std::string>& pivotedColumns,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Rotate the column values into rows values.
 * <p>
 * The aggregate unpivot is used to normalize tables that are built for cross
 * tabular reporting purposes. The unpivot operator rotates the column values
 * for all the pivoted columns. A variable column, value column and all columns
 * from the source table except the unpivot columns are projected into the
 * result table. The variable column and value columns in the result table
 * indicate the pivoted column name and values respectively.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * 
 * @param tableName  Name of the table on which the operation will be
 *                   performed. Must be an existing table/view.
 * @param variableColumnName  Specifies the variable/parameter column name.
 * @param valueColumnName  Specifies the value column name.
 * @param pivotedColumns  List of one or more values typically the column names
 *                        of the input table. All the columns in the source
 *                        table must have the same data type.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::aggregate_unpivot_collection_name: Name
 *                 of a collection which is to contain the table specified in
 *                 @a result_table, otherwise the table will be a top-level
 *                 table. If the collection does not allow duplicate types and
 *                 it contains a table of the same type as the given one, then
 *                 this table creation request will fail. Additionally this
 *                 option is invalid if @a tableName is a collection.
 *                         <li> gpudb::aggregate_unpivot_result_table: The name
 *                 of the table used to store the results. Has the same naming
 *                 restrictions as <a href="../../concepts/tables.html"
 *                 target="_top">tables</a>. If present, no results are
 *                 returned in the response.
 *                         <li> gpudb::aggregate_unpivot_result_table_persist:
 *                 If @a true then the result table specified in
 *                 {result_table}@{key of input.options} will be persisted as a
 *                 regular table (it will not be automatically cleared unless a
 *                 @a ttl is provided, and the table data can be modified in
 *                 subsequent operations). If @a false (the default) then the
 *                 result table will be a read-only, memory-only temporary
 *                 table.
 *                 <ul>
 *                         <li> gpudb::aggregate_unpivot_true
 *                         <li> gpudb::aggregate_unpivot_false
 *                 </ul>
 *                 The default value is gpudb::aggregate_unpivot_false.
 *                         <li> gpudb::aggregate_unpivot_expression: Filter
 *                 expression to apply to the table prior to unpivot
 *                 processing.
 *                         <li> gpudb::aggregate_unpivot_order_by:
 *                 Comma-separated list of the columns to be sorted by; e.g.
 *                 'timestamp asc, x desc'.  The columns specified must be
 *                 present in input table.  If any alias is given for any
 *                 column name, the alias must be used, rather than the
 *                 original column name.
 *                         <li> gpudb::aggregate_unpivot_chunk_size: If
 *                 provided this indicates the chunk size to be used for the
 *                 result table. Must be used in combination with the @a
 *                 result_table option.
 *                         <li> gpudb::aggregate_unpivot_limit: The number of
 *                 records to keep.
 *                         <li> gpudb::aggregate_unpivot_ttl: Sets the TTL of
 *                 the table specified in @a result_table. The value must be
 *                 the desired TTL in minutes.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AggregateUnpivotResponse& aggregateUnpivot( const std::string& tableName,
                                            const std::string& variableColumnName,
                                            const std::string& valueColumnName,
                                            const std::vector<std::string>& pivotedColumns,
                                            const std::map<std::string, std::string>& options,
                                            AggregateUnpivotResponse& response_ ) const;

/**
 * The {@link
 * #alterSystemProperties(const AlterSystemPropertiesRequest&) const}
 * endpoint is primarily used to simplify the testing of the system and is not
 * expected to be used during normal execution.  Commands are given through the
 * @a propertyUpdatesMap whose keys are commands and values are strings
 * representing integer values (for example '8000') or boolean values ('true'
 * or 'false').
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AlterSystemPropertiesResponse alterSystemProperties( const AlterSystemPropertiesRequest& request_ ) const;

/**
 * The {@link
 * #alterSystemProperties(const AlterSystemPropertiesRequest&,AlterSystemPropertiesResponse&) const}
 * endpoint is primarily used to simplify the testing of the system and is not
 * expected to be used during normal execution.  Commands are given through the
 * @a propertyUpdatesMap whose keys are commands and values are strings
 * representing integer values (for example '8000') or boolean values ('true'
 * or 'false').
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AlterSystemPropertiesResponse& alterSystemProperties( const AlterSystemPropertiesRequest& request_,
                                                      AlterSystemPropertiesResponse& response_ ) const;

/**
 * The {@link
 * #alterSystemProperties(const std::map<std::string, std::string>&,const std::map<std::string, std::string>&) const}
 * endpoint is primarily used to simplify the testing of the system and is not
 * expected to be used during normal execution.  Commands are given through the
 * @a propertyUpdatesMap whose keys are commands and values are strings
 * representing integer values (for example '8000') or boolean values ('true'
 * or 'false').
 * 
 * @param propertyUpdatesMap  Map containing the properties of the system to be
 *                            updated. Error if empty.
 *                            <ul>
 *                                    <li>
 *                            gpudb::alter_system_properties_sm_omp_threads:
 *                            Set the number of OpenMP threads that will be
 *                            used to service filter & aggregation requests
 *                            against collections to the specified integer
 *                            value.
 *                                    <li>
 *                            gpudb::alter_system_properties_kernel_omp_threads:
 *                            Set the number of kernel OpenMP threads to the
 *                            specified integer value.
 *                                    <li>
 *                            gpudb::alter_system_properties_concurrent_kernel_execution:
 *                            Enables concurrent kernel execution if the value
 *                            is @a true and disables it if the value is @a
 *                            false.
 *                            <ul>
 *                                    <li> gpudb::alter_system_properties_true
 *                                    <li> gpudb::alter_system_properties_false
 *                            </ul>
 *                                    <li>
 *                            gpudb::alter_system_properties_chunk_size: Sets
 *                            the chunk size of all new sets to the specified
 *                            integer value.
 *                                    <li>
 *                            gpudb::alter_system_properties_execution_mode:
 *                            Sets the execution_mode for kernel executions to
 *                            the specified string value. Possible values are
 *                            host, device, default (engine decides) or an
 *                            integer value that indicates max chunk size to
 *                            exec on host
 *                                    <li>
 *                            gpudb::alter_system_properties_flush_to_disk:
 *                            Flushes any changes to any tables to the
 *                            persistent store.  These changes include updates
 *                            to the vector store, object store, and text
 *                            search store, Value string is ignored
 *                                    <li>
 *                            gpudb::alter_system_properties_clear_cache:
 *                            Clears cached results.  Useful to allow repeated
 *                            timing of endpoints. Value string is ignored
 *                                    <li>
 *                            gpudb::alter_system_properties_communicator_test:
 *                            Invoke the communicator test and report timing
 *                            results. Value string is is a comma separated
 *                            list of <key>=<value> expressions.  Expressions
 *                            are: num_transactions=<num> where num is the
 *                            number of request reply transactions to invoke
 *                            per test; message_size=<bytes> where bytes is the
 *                            size of the messages to send in bytes;
 *                            check_values=<enabled> where if enabled is true
 *                            the value of the messages received are verified.
 *                                    <li>
 *                            gpudb::alter_system_properties_set_message_timers_enabled:
 *                            Enables the communicator test to collect
 *                            additional timing statistics when the value
 *                            string is @a true. Disables the collection when
 *                            the value string is @a false
 *                            <ul>
 *                                    <li> gpudb::alter_system_properties_true
 *                                    <li> gpudb::alter_system_properties_false
 *                            </ul>
 *                                    <li>
 *                            gpudb::alter_system_properties_bulk_add_test:
 *                            Invoke the bulk add test and report timing
 *                            results. Value string is ignored.
 *                                    <li>
 *                            gpudb::alter_system_properties_network_speed:
 *                            Invoke the network speed test and report timing
 *                            results. Value string is a semicolon-separated
 *                            list of <key>=<value> expressions.  Valid
 *                            expressions are: seconds=<time> where time is the
 *                            time in seconds to run the test; data_size=<size>
 *                            where size is the size in bytes of the block to
 *                            be transferred; threads=<number of threads>;
 *                            to_ranks=<space-separated list of ranks> where
 *                            the list of ranks is the ranks that rank 0 will
 *                            send data to and get data from. If to_ranks is
 *                            unspecified then all worker ranks are used.
 *                                    <li>
 *                            gpudb::alter_system_properties_request_timeout:
 *                            Number of minutes after which filtering (e.g.,
 *                            /filter) and aggregating (e.g.,
 *                            /aggregate/groupby) queries will timeout.
 *                                    <li>
 *                            gpudb::alter_system_properties_max_get_records_size:
 *                            The maximum number of records the database will
 *                            serve for a given data retrieval call
 *                                    <li>
 *                            gpudb::alter_system_properties_memory_allocation_limit_mb:
 *                            Set the memory allocation limit for all rank
 *                            processes in megabytes, 0 means no limit.
 *                            Overrides any individual rank memory allocation
 *                            limits.
 *                                    <li>
 *                            gpudb::alter_system_properties_enable_audit:
 *                            Enable or disable auditing.
 *                                    <li>
 *                            gpudb::alter_system_properties_audit_headers:
 *                            Enable or disable auditing of request headers.
 *                                    <li>
 *                            gpudb::alter_system_properties_audit_body: Enable
 *                            or disable auditing of request bodies.
 *                                    <li>
 *                            gpudb::alter_system_properties_audit_data: Enable
 *                            or disable auditing of request data.
 *                                    <li>
 *                            gpudb::alter_system_properties_enable_job_manager:
 *                            Enable JobManager to enforce processing of
 *                            requests in the order received.
 *                            </ul>
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AlterSystemPropertiesResponse alterSystemProperties( const std::map<std::string, std::string>& propertyUpdatesMap,
                                                     const std::map<std::string, std::string>& options ) const;

/**
 * The {@link
 * #alterSystemProperties(const std::map<std::string, std::string>&,const std::map<std::string, std::string>&,AlterSystemPropertiesResponse&) const}
 * endpoint is primarily used to simplify the testing of the system and is not
 * expected to be used during normal execution.  Commands are given through the
 * @a propertyUpdatesMap whose keys are commands and values are strings
 * representing integer values (for example '8000') or boolean values ('true'
 * or 'false').
 * 
 * @param propertyUpdatesMap  Map containing the properties of the system to be
 *                            updated. Error if empty.
 *                            <ul>
 *                                    <li>
 *                            gpudb::alter_system_properties_sm_omp_threads:
 *                            Set the number of OpenMP threads that will be
 *                            used to service filter & aggregation requests
 *                            against collections to the specified integer
 *                            value.
 *                                    <li>
 *                            gpudb::alter_system_properties_kernel_omp_threads:
 *                            Set the number of kernel OpenMP threads to the
 *                            specified integer value.
 *                                    <li>
 *                            gpudb::alter_system_properties_concurrent_kernel_execution:
 *                            Enables concurrent kernel execution if the value
 *                            is @a true and disables it if the value is @a
 *                            false.
 *                            <ul>
 *                                    <li> gpudb::alter_system_properties_true
 *                                    <li> gpudb::alter_system_properties_false
 *                            </ul>
 *                                    <li>
 *                            gpudb::alter_system_properties_chunk_size: Sets
 *                            the chunk size of all new sets to the specified
 *                            integer value.
 *                                    <li>
 *                            gpudb::alter_system_properties_execution_mode:
 *                            Sets the execution_mode for kernel executions to
 *                            the specified string value. Possible values are
 *                            host, device, default (engine decides) or an
 *                            integer value that indicates max chunk size to
 *                            exec on host
 *                                    <li>
 *                            gpudb::alter_system_properties_flush_to_disk:
 *                            Flushes any changes to any tables to the
 *                            persistent store.  These changes include updates
 *                            to the vector store, object store, and text
 *                            search store, Value string is ignored
 *                                    <li>
 *                            gpudb::alter_system_properties_clear_cache:
 *                            Clears cached results.  Useful to allow repeated
 *                            timing of endpoints. Value string is ignored
 *                                    <li>
 *                            gpudb::alter_system_properties_communicator_test:
 *                            Invoke the communicator test and report timing
 *                            results. Value string is is a comma separated
 *                            list of <key>=<value> expressions.  Expressions
 *                            are: num_transactions=<num> where num is the
 *                            number of request reply transactions to invoke
 *                            per test; message_size=<bytes> where bytes is the
 *                            size of the messages to send in bytes;
 *                            check_values=<enabled> where if enabled is true
 *                            the value of the messages received are verified.
 *                                    <li>
 *                            gpudb::alter_system_properties_set_message_timers_enabled:
 *                            Enables the communicator test to collect
 *                            additional timing statistics when the value
 *                            string is @a true. Disables the collection when
 *                            the value string is @a false
 *                            <ul>
 *                                    <li> gpudb::alter_system_properties_true
 *                                    <li> gpudb::alter_system_properties_false
 *                            </ul>
 *                                    <li>
 *                            gpudb::alter_system_properties_bulk_add_test:
 *                            Invoke the bulk add test and report timing
 *                            results. Value string is ignored.
 *                                    <li>
 *                            gpudb::alter_system_properties_network_speed:
 *                            Invoke the network speed test and report timing
 *                            results. Value string is a semicolon-separated
 *                            list of <key>=<value> expressions.  Valid
 *                            expressions are: seconds=<time> where time is the
 *                            time in seconds to run the test; data_size=<size>
 *                            where size is the size in bytes of the block to
 *                            be transferred; threads=<number of threads>;
 *                            to_ranks=<space-separated list of ranks> where
 *                            the list of ranks is the ranks that rank 0 will
 *                            send data to and get data from. If to_ranks is
 *                            unspecified then all worker ranks are used.
 *                                    <li>
 *                            gpudb::alter_system_properties_request_timeout:
 *                            Number of minutes after which filtering (e.g.,
 *                            /filter) and aggregating (e.g.,
 *                            /aggregate/groupby) queries will timeout.
 *                                    <li>
 *                            gpudb::alter_system_properties_max_get_records_size:
 *                            The maximum number of records the database will
 *                            serve for a given data retrieval call
 *                                    <li>
 *                            gpudb::alter_system_properties_memory_allocation_limit_mb:
 *                            Set the memory allocation limit for all rank
 *                            processes in megabytes, 0 means no limit.
 *                            Overrides any individual rank memory allocation
 *                            limits.
 *                                    <li>
 *                            gpudb::alter_system_properties_enable_audit:
 *                            Enable or disable auditing.
 *                                    <li>
 *                            gpudb::alter_system_properties_audit_headers:
 *                            Enable or disable auditing of request headers.
 *                                    <li>
 *                            gpudb::alter_system_properties_audit_body: Enable
 *                            or disable auditing of request bodies.
 *                                    <li>
 *                            gpudb::alter_system_properties_audit_data: Enable
 *                            or disable auditing of request data.
 *                                    <li>
 *                            gpudb::alter_system_properties_enable_job_manager:
 *                            Enable JobManager to enforce processing of
 *                            requests in the order received.
 *                            </ul>
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AlterSystemPropertiesResponse& alterSystemProperties( const std::map<std::string, std::string>& propertyUpdatesMap,
                                                      const std::map<std::string, std::string>& options,
                                                      AlterSystemPropertiesResponse& response_ ) const;

/**
 * Apply various modifications to a table, view, or collection.  The availble
 * modifications include the following:
 * <p>
 * Create or delete an index on a particular column. This can speed up certain
 * search queries
 * (such as {@link #getRecordsRaw(const GetRecordsRequest&) const}, {@link
 * #deleteRecords(const DeleteRecordsRequest&) const}, {@link
 * #updateRecordsRaw(const RawUpdateRecordsRequest&) const})
 * when using expressions containing equality or relational operators on
 * indexed columns. This
 * only applies to tables.
 * <p>
 * Set the time-to-live (TTL). This can be applied to tables, views, or
 * collections.  When
 * applied to collections, every table & view within the collection will have
 * its TTL set to the
 * given value.
 * <p>
 * Set the global access mode (i.e. locking) for a table. The mode can be set
 * to 'no-access', 'read-only',
 * 'write-only' or 'read-write'.
 * <p>
 * Make a table protected or not. Protected tables have their TTLs set to not
 * automatically
 * expire. This can be applied to tables, views, and collections.
 * <p>
 * Allow homogeneous tables within a collection.
 * <p>
 * Manage a table's columns--a column can be added, removed, or have its
 * <a href="../../concepts/types.html" target="_top">type and properties</a>
 * modified.
 * <p>
 * Set or unset compression for a column.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AlterTableResponse alterTable( const AlterTableRequest& request_ ) const;

/**
 * Apply various modifications to a table, view, or collection.  The availble
 * modifications include the following:
 * <p>
 * Create or delete an index on a particular column. This can speed up certain
 * search queries
 * (such as {@link
 * #getRecordsRaw(const GetRecordsRequest&,RawGetRecordsResponse&) const},
 * {@link
 * #deleteRecords(const DeleteRecordsRequest&,DeleteRecordsResponse&) const},
 * {@link
 * #updateRecordsRaw(const RawUpdateRecordsRequest&,UpdateRecordsResponse&) const})
 * when using expressions containing equality or relational operators on
 * indexed columns. This
 * only applies to tables.
 * <p>
 * Set the time-to-live (TTL). This can be applied to tables, views, or
 * collections.  When
 * applied to collections, every table & view within the collection will have
 * its TTL set to the
 * given value.
 * <p>
 * Set the global access mode (i.e. locking) for a table. The mode can be set
 * to 'no-access', 'read-only',
 * 'write-only' or 'read-write'.
 * <p>
 * Make a table protected or not. Protected tables have their TTLs set to not
 * automatically
 * expire. This can be applied to tables, views, and collections.
 * <p>
 * Allow homogeneous tables within a collection.
 * <p>
 * Manage a table's columns--a column can be added, removed, or have its
 * <a href="../../concepts/types.html" target="_top">type and properties</a>
 * modified.
 * <p>
 * Set or unset compression for a column.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AlterTableResponse& alterTable( const AlterTableRequest& request_,
                                AlterTableResponse& response_ ) const;

/**
 * Apply various modifications to a table, view, or collection.  The availble
 * modifications include the following:
 * <p>
 * Create or delete an index on a particular column. This can speed up certain
 * search queries
 * (such as {@link #getRecordsRaw(const GetRecordsRequest&) const}, {@link
 * #deleteRecords(const std::string&,const std::vector<std::string>&,const std::map<std::string, std::string>&) const},
 * {@link #updateRecordsRaw(const RawUpdateRecordsRequest&) const})
 * when using expressions containing equality or relational operators on
 * indexed columns. This
 * only applies to tables.
 * <p>
 * Set the time-to-live (TTL). This can be applied to tables, views, or
 * collections.  When
 * applied to collections, every table & view within the collection will have
 * its TTL set to the
 * given value.
 * <p>
 * Set the global access mode (i.e. locking) for a table. The mode can be set
 * to 'no-access', 'read-only',
 * 'write-only' or 'read-write'.
 * <p>
 * Make a table protected or not. Protected tables have their TTLs set to not
 * automatically
 * expire. This can be applied to tables, views, and collections.
 * <p>
 * Allow homogeneous tables within a collection.
 * <p>
 * Manage a table's columns--a column can be added, removed, or have its
 * <a href="../../concepts/types.html" target="_top">type and properties</a>
 * modified.
 * <p>
 * Set or unset compression for a column.
 * 
 * @param tableName  Table on which the operation will be performed. Must be an
 *                   existing table, view, or collection.
 * @param action  Modification operation to be applied
 *                <ul>
 *                        <li> gpudb::alter_table_allow_homogeneous_tables:
 *                Sets whether homogeneous tables are allowed in the given
 *                collection. This action is only valid if @a tableName is a
 *                collection. The @a value must be either 'true' or 'false'.
 *                        <li> gpudb::alter_table_create_index: Creates an
 *                index on the column name specified in @a value. If this
 *                column is already indexed, an error will be returned.
 *                        <li> gpudb::alter_table_delete_index: Deletes an
 *                existing index on the column name specified in @a value. If
 *                this column does not have indexing turned on, an error will
 *                be returned.
 *                        <li> gpudb::alter_table_move_to_collection: Move a
 *                table into a collection @a value.
 *                        <li> gpudb::alter_table_protected: Sets whether the
 *                given @a tableName should be protected or not. The @a value
 *                must be either 'true' or 'false'.
 *                        <li> gpudb::alter_table_rename_table: Rename a table,
 *                view or collection to @a value. Has the same naming
 *                restrictions as <a href="../../concepts/tables.html"
 *                target="_top">tables</a>.
 *                        <li> gpudb::alter_table_ttl: Sets the TTL of the
 *                table, view, or collection specified in @a tableName. The @a
 *                value must be the desired TTL in minutes.
 *                        <li> gpudb::alter_table_add_column: Add the column
 *                specified in @a value to the table specified in @a tableName.
 *                Use @a column_type and @a column_properties in @a options to
 *                set the column's type and properties, respectively.
 *                        <li> gpudb::alter_table_change_column: Change type
 *                and properties of the column specified in @a value.  Use @a
 *                column_type and @a column_properties in @a options to set the
 *                column's type and properties, respectively.
 *                        <li> gpudb::alter_table_set_column_compression:
 *                Modify the compression setting on the column specified in @a
 *                value.
 *                        <li> gpudb::alter_table_delete_column: Delete the
 *                column specified in @a value from the table specified in @a
 *                tableName.
 *                        <li> gpudb::alter_table_create_foreign_key: Create a
 *                foreign key using the format 'source_column references
 *                target_table(primary_key_column) [ as <foreign_key_name> ]'.
 *                        <li> gpudb::alter_table_delete_foreign_key: Delete a
 *                foreign key.  The @a value should be the <foreign_key_name>
 *                or the string used to define the foreign key.
 *                        <li> gpudb::alter_table_set_global_access_mode: Set
 *                the global access mode (i.e. locking) for the table specified
 *                in @a tableName. Specify the access mode in @a value. Valid
 *                modes are 'no-access', 'read-only', 'write-only' and
 *                'read-write'.
 *                </ul>
 * @param value  The value of the modification. May be a column name, 'true' or
 *               'false', a TTL, or the global access mode depending on @a
 *               action.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::alter_table_column_default_value: When
 *                 adding a column, set a default value for existing records.
 *                         <li> gpudb::alter_table_column_properties: When
 *                 adding or changing a column, set the column properties
 *                 (strings, separated by a comma: data, store_only,
 *                 text_search, char8, int8 etc).
 *                         <li> gpudb::alter_table_column_type: When adding or
 *                 changing a column, set the column type (strings, separated
 *                 by a comma: int, double, string, null etc).
 *                         <li> gpudb::alter_table_compression_type: When
 *                 setting column compression (@a set_column_compression for @a
 *                 action), compression type to use: @a none (to use no
 *                 compression) or a valid compression type.
 *                 <ul>
 *                         <li> gpudb::alter_table_none
 *                         <li> gpudb::alter_table_snappy
 *                         <li> gpudb::alter_table_lz4
 *                         <li> gpudb::alter_table_lz4hc
 *                 </ul>
 *                 The default value is gpudb::alter_table_snappy.
 *                         <li> gpudb::alter_table_copy_values_from_column:
 *                 When adding or changing a column, enter a column name from
 *                 the same table being altered to use as a source for the
 *                 column being added/changed; values will be copied from this
 *                 source column into the new/modified column.
 *                         <li> gpudb::alter_table_rename_column: When changing
 *                 a column, specify new column name.
 *                         <li> gpudb::alter_table_validate_change_column: When
 *                 changing a column, validate the change before applying it.
 *                 If @a true, then validate all values. A value too large (or
 *                 too long) for the new type will prevent any change. If @a
 *                 false, then when a value is too large or long, it will be
 *                 truncated.
 *                 <ul>
 *                         <li> gpudb::alter_table_true: true
 *                         <li> gpudb::alter_table_false: false
 *                 </ul>
 *                 The default value is gpudb::alter_table_true.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AlterTableResponse alterTable( const std::string& tableName,
                               const std::string& action,
                               const std::string& value,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Apply various modifications to a table, view, or collection.  The availble
 * modifications include the following:
 * <p>
 * Create or delete an index on a particular column. This can speed up certain
 * search queries
 * (such as {@link #getRecordsRaw(const GetRecordsRequest&) const}, {@link
 * #deleteRecords(const std::string&,const std::vector<std::string>&,const std::map<std::string, std::string>&,DeleteRecordsResponse&) const},
 * {@link #updateRecordsRaw(const RawUpdateRecordsRequest&) const})
 * when using expressions containing equality or relational operators on
 * indexed columns. This
 * only applies to tables.
 * <p>
 * Set the time-to-live (TTL). This can be applied to tables, views, or
 * collections.  When
 * applied to collections, every table & view within the collection will have
 * its TTL set to the
 * given value.
 * <p>
 * Set the global access mode (i.e. locking) for a table. The mode can be set
 * to 'no-access', 'read-only',
 * 'write-only' or 'read-write'.
 * <p>
 * Make a table protected or not. Protected tables have their TTLs set to not
 * automatically
 * expire. This can be applied to tables, views, and collections.
 * <p>
 * Allow homogeneous tables within a collection.
 * <p>
 * Manage a table's columns--a column can be added, removed, or have its
 * <a href="../../concepts/types.html" target="_top">type and properties</a>
 * modified.
 * <p>
 * Set or unset compression for a column.
 * 
 * @param tableName  Table on which the operation will be performed. Must be an
 *                   existing table, view, or collection.
 * @param action  Modification operation to be applied
 *                <ul>
 *                        <li> gpudb::alter_table_allow_homogeneous_tables:
 *                Sets whether homogeneous tables are allowed in the given
 *                collection. This action is only valid if @a tableName is a
 *                collection. The @a value must be either 'true' or 'false'.
 *                        <li> gpudb::alter_table_create_index: Creates an
 *                index on the column name specified in @a value. If this
 *                column is already indexed, an error will be returned.
 *                        <li> gpudb::alter_table_delete_index: Deletes an
 *                existing index on the column name specified in @a value. If
 *                this column does not have indexing turned on, an error will
 *                be returned.
 *                        <li> gpudb::alter_table_move_to_collection: Move a
 *                table into a collection @a value.
 *                        <li> gpudb::alter_table_protected: Sets whether the
 *                given @a tableName should be protected or not. The @a value
 *                must be either 'true' or 'false'.
 *                        <li> gpudb::alter_table_rename_table: Rename a table,
 *                view or collection to @a value. Has the same naming
 *                restrictions as <a href="../../concepts/tables.html"
 *                target="_top">tables</a>.
 *                        <li> gpudb::alter_table_ttl: Sets the TTL of the
 *                table, view, or collection specified in @a tableName. The @a
 *                value must be the desired TTL in minutes.
 *                        <li> gpudb::alter_table_add_column: Add the column
 *                specified in @a value to the table specified in @a tableName.
 *                Use @a column_type and @a column_properties in @a options to
 *                set the column's type and properties, respectively.
 *                        <li> gpudb::alter_table_change_column: Change type
 *                and properties of the column specified in @a value.  Use @a
 *                column_type and @a column_properties in @a options to set the
 *                column's type and properties, respectively.
 *                        <li> gpudb::alter_table_set_column_compression:
 *                Modify the compression setting on the column specified in @a
 *                value.
 *                        <li> gpudb::alter_table_delete_column: Delete the
 *                column specified in @a value from the table specified in @a
 *                tableName.
 *                        <li> gpudb::alter_table_create_foreign_key: Create a
 *                foreign key using the format 'source_column references
 *                target_table(primary_key_column) [ as <foreign_key_name> ]'.
 *                        <li> gpudb::alter_table_delete_foreign_key: Delete a
 *                foreign key.  The @a value should be the <foreign_key_name>
 *                or the string used to define the foreign key.
 *                        <li> gpudb::alter_table_set_global_access_mode: Set
 *                the global access mode (i.e. locking) for the table specified
 *                in @a tableName. Specify the access mode in @a value. Valid
 *                modes are 'no-access', 'read-only', 'write-only' and
 *                'read-write'.
 *                </ul>
 * @param value  The value of the modification. May be a column name, 'true' or
 *               'false', a TTL, or the global access mode depending on @a
 *               action.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::alter_table_column_default_value: When
 *                 adding a column, set a default value for existing records.
 *                         <li> gpudb::alter_table_column_properties: When
 *                 adding or changing a column, set the column properties
 *                 (strings, separated by a comma: data, store_only,
 *                 text_search, char8, int8 etc).
 *                         <li> gpudb::alter_table_column_type: When adding or
 *                 changing a column, set the column type (strings, separated
 *                 by a comma: int, double, string, null etc).
 *                         <li> gpudb::alter_table_compression_type: When
 *                 setting column compression (@a set_column_compression for @a
 *                 action), compression type to use: @a none (to use no
 *                 compression) or a valid compression type.
 *                 <ul>
 *                         <li> gpudb::alter_table_none
 *                         <li> gpudb::alter_table_snappy
 *                         <li> gpudb::alter_table_lz4
 *                         <li> gpudb::alter_table_lz4hc
 *                 </ul>
 *                 The default value is gpudb::alter_table_snappy.
 *                         <li> gpudb::alter_table_copy_values_from_column:
 *                 When adding or changing a column, enter a column name from
 *                 the same table being altered to use as a source for the
 *                 column being added/changed; values will be copied from this
 *                 source column into the new/modified column.
 *                         <li> gpudb::alter_table_rename_column: When changing
 *                 a column, specify new column name.
 *                         <li> gpudb::alter_table_validate_change_column: When
 *                 changing a column, validate the change before applying it.
 *                 If @a true, then validate all values. A value too large (or
 *                 too long) for the new type will prevent any change. If @a
 *                 false, then when a value is too large or long, it will be
 *                 truncated.
 *                 <ul>
 *                         <li> gpudb::alter_table_true: true
 *                         <li> gpudb::alter_table_false: false
 *                 </ul>
 *                 The default value is gpudb::alter_table_true.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AlterTableResponse& alterTable( const std::string& tableName,
                                const std::string& action,
                                const std::string& value,
                                const std::map<std::string, std::string>& options,
                                AlterTableResponse& response_ ) const;

/**
 * Updates (adds or changes) metadata for tables. The metadata key and values
 * must both be strings. This is an easy way to annotate whole tables rather
 * than single records within tables.  Some examples of metadata are owner of
 * the table, table creation timestamp etc.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AlterTableMetadataResponse alterTableMetadata( const AlterTableMetadataRequest& request_ ) const;

/**
 * Updates (adds or changes) metadata for tables. The metadata key and values
 * must both be strings. This is an easy way to annotate whole tables rather
 * than single records within tables.  Some examples of metadata are owner of
 * the table, table creation timestamp etc.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AlterTableMetadataResponse& alterTableMetadata( const AlterTableMetadataRequest& request_,
                                                AlterTableMetadataResponse& response_ ) const;

/**
 * Updates (adds or changes) metadata for tables. The metadata key and values
 * must both be strings. This is an easy way to annotate whole tables rather
 * than single records within tables.  Some examples of metadata are owner of
 * the table, table creation timestamp etc.
 * 
 * @param tableNames  Names of the tables whose metadata will be updated. All
 *                    specified tables must exist, or an error will be
 *                    returned.
 * @param metadataMap  A map which contains the metadata of the tables that are
 *                     to be updated. Note that only one map is provided for
 *                     all the tables; so the change will be applied to every
 *                     table. If the provided map is empty, then all existing
 *                     metadata for the table(s) will be cleared.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AlterTableMetadataResponse alterTableMetadata( const std::vector<std::string>& tableNames,
                                               const std::map<std::string, std::string>& metadataMap,
                                               const std::map<std::string, std::string>& options ) const;

/**
 * Updates (adds or changes) metadata for tables. The metadata key and values
 * must both be strings. This is an easy way to annotate whole tables rather
 * than single records within tables.  Some examples of metadata are owner of
 * the table, table creation timestamp etc.
 * 
 * @param tableNames  Names of the tables whose metadata will be updated. All
 *                    specified tables must exist, or an error will be
 *                    returned.
 * @param metadataMap  A map which contains the metadata of the tables that are
 *                     to be updated. Note that only one map is provided for
 *                     all the tables; so the change will be applied to every
 *                     table. If the provided map is empty, then all existing
 *                     metadata for the table(s) will be cleared.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AlterTableMetadataResponse& alterTableMetadata( const std::vector<std::string>& tableNames,
                                                const std::map<std::string, std::string>& metadataMap,
                                                const std::map<std::string, std::string>& options,
                                                AlterTableMetadataResponse& response_ ) const;

/**
 * Alters a user.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AlterUserResponse alterUser( const AlterUserRequest& request_ ) const;

/**
 * Alters a user.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AlterUserResponse& alterUser( const AlterUserRequest& request_,
                              AlterUserResponse& response_ ) const;

/**
 * Alters a user.
 * 
 * @param name  Name of the user to be altered. Must be an existing user.
 * @param action  Modification operation to be applied to the user.
 *                <ul>
 *                        <li> gpudb::alter_user_set_password: Sets the
 *                password of the user. The user must be an internal user.
 *                </ul>
 * @param value  The value of the modification, depending on @a action.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AlterUserResponse alterUser( const std::string& name,
                             const std::string& action,
                             const std::string& value,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Alters a user.
 * 
 * @param name  Name of the user to be altered. Must be an existing user.
 * @param action  Modification operation to be applied to the user.
 *                <ul>
 *                        <li> gpudb::alter_user_set_password: Sets the
 *                password of the user. The user must be an internal user.
 *                </ul>
 * @param value  The value of the modification, depending on @a action.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AlterUserResponse& alterUser( const std::string& name,
                              const std::string& action,
                              const std::string& value,
                              const std::map<std::string, std::string>& options,
                              AlterUserResponse& response_ ) const;

/**
 * Append (or insert) all records from a source table (specified by @a
 * sourceTableName) to a particular target table (specified by @a tableName).
 * The field map (specified by @a fieldMap) holds the user specified map of
 * target table column names with their mapped source column names.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AppendRecordsResponse appendRecords( const AppendRecordsRequest& request_ ) const;

/**
 * Append (or insert) all records from a source table (specified by @a
 * sourceTableName) to a particular target table (specified by @a tableName).
 * The field map (specified by @a fieldMap) holds the user specified map of
 * target table column names with their mapped source column names.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AppendRecordsResponse& appendRecords( const AppendRecordsRequest& request_,
                                      AppendRecordsResponse& response_ ) const;

/**
 * Append (or insert) all records from a source table (specified by @a
 * sourceTableName) to a particular target table (specified by @a tableName).
 * The field map (specified by @a fieldMap) holds the user specified map of
 * target table column names with their mapped source column names.
 * 
 * @param tableName  The table name for the records to be appended. Must be an
 *                   existing table.
 * @param sourceTableName  The source table name to get records from. Must be
 *                         an existing table name.
 * @param fieldMap  Contains the mapping of column names from the target table
 *                  (specified by @a tableName) as the keys, and corresponding
 *                  column names from the source table (specified by @a
 *                  sourceTableName). Must be existing column names in source
 *                  table and target table, and their types must be matched.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::append_records_offset: A positive
 *                 integer indicating the number of initial results to skip
 *                 from source table (specified by @a sourceTableName). Default
 *                 is 0. The minimum allowed value is 0. The maximum allowed
 *                 value is MAX_INT.
 *                         <li> gpudb::append_records_limit: A positive integer
 *                 indicating the maximum number of results to be returned from
 *                 source table (specified by @a sourceTableName). Or
 *                 END_OF_SET (-9999) to indicate that the max number of
 *                 results should be returned. Default value is END_OF_SET
 *                 (-9999).
 *                         <li> gpudb::append_records_expression: Optional
 *                 filter expression to apply to the source table (specified by
 *                 @a sourceTableName). Empty by default.
 *                         <li> gpudb::append_records_order_by: Comma-separated
 *                 list of the columns to be sorted from source table
 *                 (specified by @a sourceTableName) by; e.g. 'timestamp asc, x
 *                 desc'.  The columns specified must be present in @a
 *                 fieldMap.  If any alias is given for any column name, the
 *                 alias must be used, rather than the original column name.
 *                         <li> gpudb::append_records_update_on_existing_pk:
 *                 Specifies the record collision policy for inserting the
 *                 source table records (specified by @a sourceTableName) into
 *                 the target table (specified by @a tableName) table with a <a
 *                 href="../../concepts/tables.html#primary-keys"
 *                 target="_top">primary key</a>.  If set to @a true, any
 *                 existing target table record with primary key values that
 *                 match those of a source table record being inserted will be
 *                 replaced by that new record.  If set to @a false, any
 *                 existing target table record with primary key values that
 *                 match those of a source table record being inserted will
 *                 remain unchanged and the new record discarded.  If the
 *                 specified table does not have a primary key, then this
 *                 option is ignored.
 *                 <ul>
 *                         <li> gpudb::append_records_true
 *                         <li> gpudb::append_records_false
 *                 </ul>
 *                 The default value is gpudb::append_records_false.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AppendRecordsResponse appendRecords( const std::string& tableName,
                                     const std::string& sourceTableName,
                                     const std::map<std::string, std::string>& fieldMap,
                                     const std::map<std::string, std::string>& options ) const;

/**
 * Append (or insert) all records from a source table (specified by @a
 * sourceTableName) to a particular target table (specified by @a tableName).
 * The field map (specified by @a fieldMap) holds the user specified map of
 * target table column names with their mapped source column names.
 * 
 * @param tableName  The table name for the records to be appended. Must be an
 *                   existing table.
 * @param sourceTableName  The source table name to get records from. Must be
 *                         an existing table name.
 * @param fieldMap  Contains the mapping of column names from the target table
 *                  (specified by @a tableName) as the keys, and corresponding
 *                  column names from the source table (specified by @a
 *                  sourceTableName). Must be existing column names in source
 *                  table and target table, and their types must be matched.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::append_records_offset: A positive
 *                 integer indicating the number of initial results to skip
 *                 from source table (specified by @a sourceTableName). Default
 *                 is 0. The minimum allowed value is 0. The maximum allowed
 *                 value is MAX_INT.
 *                         <li> gpudb::append_records_limit: A positive integer
 *                 indicating the maximum number of results to be returned from
 *                 source table (specified by @a sourceTableName). Or
 *                 END_OF_SET (-9999) to indicate that the max number of
 *                 results should be returned. Default value is END_OF_SET
 *                 (-9999).
 *                         <li> gpudb::append_records_expression: Optional
 *                 filter expression to apply to the source table (specified by
 *                 @a sourceTableName). Empty by default.
 *                         <li> gpudb::append_records_order_by: Comma-separated
 *                 list of the columns to be sorted from source table
 *                 (specified by @a sourceTableName) by; e.g. 'timestamp asc, x
 *                 desc'.  The columns specified must be present in @a
 *                 fieldMap.  If any alias is given for any column name, the
 *                 alias must be used, rather than the original column name.
 *                         <li> gpudb::append_records_update_on_existing_pk:
 *                 Specifies the record collision policy for inserting the
 *                 source table records (specified by @a sourceTableName) into
 *                 the target table (specified by @a tableName) table with a <a
 *                 href="../../concepts/tables.html#primary-keys"
 *                 target="_top">primary key</a>.  If set to @a true, any
 *                 existing target table record with primary key values that
 *                 match those of a source table record being inserted will be
 *                 replaced by that new record.  If set to @a false, any
 *                 existing target table record with primary key values that
 *                 match those of a source table record being inserted will
 *                 remain unchanged and the new record discarded.  If the
 *                 specified table does not have a primary key, then this
 *                 option is ignored.
 *                 <ul>
 *                         <li> gpudb::append_records_true
 *                         <li> gpudb::append_records_false
 *                 </ul>
 *                 The default value is gpudb::append_records_false.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AppendRecordsResponse& appendRecords( const std::string& tableName,
                                      const std::string& sourceTableName,
                                      const std::map<std::string, std::string>& fieldMap,
                                      const std::map<std::string, std::string>& options,
                                      AppendRecordsResponse& response_ ) const;

/**
 * Clears (drops) one or all tables in the database cluster. The operation is
 * synchronous meaning that the table will be cleared before the function
 * returns. The response payload returns the status of the operation along with
 * the name of the table that was cleared.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ClearTableResponse clearTable( const ClearTableRequest& request_ ) const;

/**
 * Clears (drops) one or all tables in the database cluster. The operation is
 * synchronous meaning that the table will be cleared before the function
 * returns. The response payload returns the status of the operation along with
 * the name of the table that was cleared.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ClearTableResponse& clearTable( const ClearTableRequest& request_,
                                ClearTableResponse& response_ ) const;

/**
 * Clears (drops) one or all tables in the database cluster. The operation is
 * synchronous meaning that the table will be cleared before the function
 * returns. The response payload returns the status of the operation along with
 * the name of the table that was cleared.
 * 
 * @param tableName  Name of the table to be cleared. Must be an existing
 *                   table. Empty string clears all available tables.
 * @param authorization  No longer used. User can pass an empty string.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::clear_table_no_error_if_not_exists: If
 *                 @a true and if the table specified in @a tableName does not
 *                 exist no error is returned. If @a false and if the table
 *                 specified in @a tableName does not exist then an error is
 *                 returned.
 *                 <ul>
 *                         <li> gpudb::clear_table_true
 *                         <li> gpudb::clear_table_false
 *                 </ul>
 *                 The default value is gpudb::clear_table_false.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ClearTableResponse clearTable( const std::string& tableName,
                               const std::string& authorization,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Clears (drops) one or all tables in the database cluster. The operation is
 * synchronous meaning that the table will be cleared before the function
 * returns. The response payload returns the status of the operation along with
 * the name of the table that was cleared.
 * 
 * @param tableName  Name of the table to be cleared. Must be an existing
 *                   table. Empty string clears all available tables.
 * @param authorization  No longer used. User can pass an empty string.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::clear_table_no_error_if_not_exists: If
 *                 @a true and if the table specified in @a tableName does not
 *                 exist no error is returned. If @a false and if the table
 *                 specified in @a tableName does not exist then an error is
 *                 returned.
 *                 <ul>
 *                         <li> gpudb::clear_table_true
 *                         <li> gpudb::clear_table_false
 *                 </ul>
 *                 The default value is gpudb::clear_table_false.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ClearTableResponse& clearTable( const std::string& tableName,
                                const std::string& authorization,
                                const std::map<std::string, std::string>& options,
                                ClearTableResponse& response_ ) const;

/**
 * Deactivates a table monitor previously created with {@link
 * #createTableMonitor(const CreateTableMonitorRequest&) const}.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ClearTableMonitorResponse clearTableMonitor( const ClearTableMonitorRequest& request_ ) const;

/**
 * Deactivates a table monitor previously created with {@link
 * #createTableMonitor(const CreateTableMonitorRequest&,CreateTableMonitorResponse&) const}.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ClearTableMonitorResponse& clearTableMonitor( const ClearTableMonitorRequest& request_,
                                              ClearTableMonitorResponse& response_ ) const;

/**
 * Deactivates a table monitor previously created with {@link
 * #createTableMonitor(const std::string&,const std::map<std::string, std::string>&) const}.
 * 
 * @param topicId  The topic ID returned by /create/tablemonitor.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ClearTableMonitorResponse clearTableMonitor( const std::string& topicId,
                                             const std::map<std::string, std::string>& options ) const;

/**
 * Deactivates a table monitor previously created with {@link
 * #createTableMonitor(const std::string&,const std::map<std::string, std::string>&,CreateTableMonitorResponse&) const}.
 * 
 * @param topicId  The topic ID returned by /create/tablemonitor.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ClearTableMonitorResponse& clearTableMonitor( const std::string& topicId,
                                              const std::map<std::string, std::string>& options,
                                              ClearTableMonitorResponse& response_ ) const;

/**
 * Clears or cancels the trigger identified by the specified handle. The output
 * returns the handle of the trigger cleared as well as indicating success or
 * failure of the trigger deactivation.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ClearTriggerResponse clearTrigger( const ClearTriggerRequest& request_ ) const;

/**
 * Clears or cancels the trigger identified by the specified handle. The output
 * returns the handle of the trigger cleared as well as indicating success or
 * failure of the trigger deactivation.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ClearTriggerResponse& clearTrigger( const ClearTriggerRequest& request_,
                                    ClearTriggerResponse& response_ ) const;

/**
 * Clears or cancels the trigger identified by the specified handle. The output
 * returns the handle of the trigger cleared as well as indicating success or
 * failure of the trigger deactivation.
 * 
 * @param triggerId  ID for the trigger to be deactivated.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ClearTriggerResponse clearTrigger( const std::string& triggerId,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Clears or cancels the trigger identified by the specified handle. The output
 * returns the handle of the trigger cleared as well as indicating success or
 * failure of the trigger deactivation.
 * 
 * @param triggerId  ID for the trigger to be deactivated.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ClearTriggerResponse& clearTrigger( const std::string& triggerId,
                                    const std::map<std::string, std::string>& options,
                                    ClearTriggerResponse& response_ ) const;

/**
 * Creates a table that is the result of a SQL JOIN.  For details see: <a
 * href="../../concepts/joins.html" target="_top">join concept
 * documentation</a>.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateJoinTableResponse createJoinTable( const CreateJoinTableRequest& request_ ) const;

/**
 * Creates a table that is the result of a SQL JOIN.  For details see: <a
 * href="../../concepts/joins.html" target="_top">join concept
 * documentation</a>.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateJoinTableResponse& createJoinTable( const CreateJoinTableRequest& request_,
                                          CreateJoinTableResponse& response_ ) const;

/**
 * Creates a table that is the result of a SQL JOIN.  For details see: <a
 * href="../../concepts/joins.html" target="_top">join concept
 * documentation</a>.
 * 
 * @param joinTableName  Name of the join table to be created.  Has the same
 *                       naming restrictions as <a
 *                       href="../../concepts/tables.html"
 *                       target="_top">tables</a>.
 * @param tableNames  The list of table names composing the join.  Corresponds
 *                    to a SQL statement FROM clause
 * @param columnNames  List of member table columns or column expressions to be
 *                     included in the join. Columns can be prefixed with
 *                     'table_id.column_name', where 'table_id' is the table
 *                     name or alias.  Columns can be aliased via the syntax
 *                     'column_name as alias'. Wild cards '*' can be used to
 *                     include all columns across member tables or 'table_id.*'
 *                     for all of a single table's columns.  Columns and column
 *                     expressions comprising the join must be uniquely named
 *                     or aliased--therefore, the '*' wild card cannot be used
 *                     if column names aren't unique across all tables.
 * @param expressions  An optional list of expressions to combine and filter
 *                     the joined tables.  Corresponds to a SQL statement WHERE
 *                     clause. For details see: <a
 *                     href="../../concepts/expressions.html"
 *                     target="_top">expressions</a>.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::create_join_table_collection_name: Name
 *                 of a collection which is to contain the join. If the
 *                 collection provided is non-existent, the collection will be
 *                 automatically created. If empty, then the join will be at
 *                 the top level.
 *                         <li> gpudb::create_join_table_max_query_dimensions:
 *                 The maximum number of tables in a join that can be accessed
 *                 by a query and are not equated by a foreign-key to
 *                 primary-key equality predicate
 *                         <li> gpudb::create_join_table_optimize_lookups: Use
 *                 more memory to speed up the joining of tables.
 *                 <ul>
 *                         <li> gpudb::create_join_table_true
 *                         <li> gpudb::create_join_table_false
 *                 </ul>
 *                 The default value is gpudb::create_join_table_false.
 *                         <li> gpudb::create_join_table_refresh_method: Method
 *                 by which the join can be refreshed when the data in
 *                 underlying member tables have changed.
 *                 <ul>
 *                         <li> gpudb::create_join_table_manual: refresh only
 *                 occurs when manually requested by calling this endpoint with
 *                 refresh option set to @a refresh or @a full_refresh
 *                         <li> gpudb::create_join_table_on_query:
 *                 incrementally refresh (refresh just those records added)
 *                 whenever a new query is issued and new data is inserted into
 *                 the base table.  A full refresh of all the records occurs
 *                 when a new query is issued and there have been inserts to
 *                 any non-base-tables since the last query
 *                         <li> gpudb::create_join_table_on_insert:
 *                 incrementally refresh (refresh just those records added)
 *                 whenever new data is inserted into a base table.  A full
 *                 refresh of all the records occurs when a new query is issued
 *                 and there have been inserts to any non-base-tables since the
 *                 last query
 *                 </ul>
 *                 The default value is gpudb::create_join_table_manual.
 *                         <li> gpudb::create_join_table_refresh: Do a manual
 *                 refresh of the join if it exists - throws an error otherwise
 *                 <ul>
 *                         <li> gpudb::create_join_table_no_refresh: don't
 *                 refresh
 *                         <li> gpudb::create_join_table_refresh: incrementally
 *                 refresh (refresh just those records added) if new data has
 *                 been inserted into the base table.  A full refresh of all
 *                 the records occurs if there have been inserts to any
 *                 non-base-tables since the last refresh
 *                         <li> gpudb::create_join_table_full_refresh: always
 *                 refresh even if no new records have been added.  Only
 *                 refresh method guaranteed to do a full refresh (refresh all
 *                 the records) if a delete or update has occurred since the
 *                 last refresh.
 *                 </ul>
 *                 The default value is gpudb::create_join_table_no_refresh.
 *                         <li> gpudb::create_join_table_ttl: Sets the TTL of
 *                 the table specified in @a joinTableName. The value must be
 *                 the desired TTL in minutes.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateJoinTableResponse createJoinTable( const std::string& joinTableName,
                                         const std::vector<std::string>& tableNames,
                                         const std::vector<std::string>& columnNames,
                                         const std::vector<std::string>& expressions,
                                         const std::map<std::string, std::string>& options ) const;

/**
 * Creates a table that is the result of a SQL JOIN.  For details see: <a
 * href="../../concepts/joins.html" target="_top">join concept
 * documentation</a>.
 * 
 * @param joinTableName  Name of the join table to be created.  Has the same
 *                       naming restrictions as <a
 *                       href="../../concepts/tables.html"
 *                       target="_top">tables</a>.
 * @param tableNames  The list of table names composing the join.  Corresponds
 *                    to a SQL statement FROM clause
 * @param columnNames  List of member table columns or column expressions to be
 *                     included in the join. Columns can be prefixed with
 *                     'table_id.column_name', where 'table_id' is the table
 *                     name or alias.  Columns can be aliased via the syntax
 *                     'column_name as alias'. Wild cards '*' can be used to
 *                     include all columns across member tables or 'table_id.*'
 *                     for all of a single table's columns.  Columns and column
 *                     expressions comprising the join must be uniquely named
 *                     or aliased--therefore, the '*' wild card cannot be used
 *                     if column names aren't unique across all tables.
 * @param expressions  An optional list of expressions to combine and filter
 *                     the joined tables.  Corresponds to a SQL statement WHERE
 *                     clause. For details see: <a
 *                     href="../../concepts/expressions.html"
 *                     target="_top">expressions</a>.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::create_join_table_collection_name: Name
 *                 of a collection which is to contain the join. If the
 *                 collection provided is non-existent, the collection will be
 *                 automatically created. If empty, then the join will be at
 *                 the top level.
 *                         <li> gpudb::create_join_table_max_query_dimensions:
 *                 The maximum number of tables in a join that can be accessed
 *                 by a query and are not equated by a foreign-key to
 *                 primary-key equality predicate
 *                         <li> gpudb::create_join_table_optimize_lookups: Use
 *                 more memory to speed up the joining of tables.
 *                 <ul>
 *                         <li> gpudb::create_join_table_true
 *                         <li> gpudb::create_join_table_false
 *                 </ul>
 *                 The default value is gpudb::create_join_table_false.
 *                         <li> gpudb::create_join_table_refresh_method: Method
 *                 by which the join can be refreshed when the data in
 *                 underlying member tables have changed.
 *                 <ul>
 *                         <li> gpudb::create_join_table_manual: refresh only
 *                 occurs when manually requested by calling this endpoint with
 *                 refresh option set to @a refresh or @a full_refresh
 *                         <li> gpudb::create_join_table_on_query:
 *                 incrementally refresh (refresh just those records added)
 *                 whenever a new query is issued and new data is inserted into
 *                 the base table.  A full refresh of all the records occurs
 *                 when a new query is issued and there have been inserts to
 *                 any non-base-tables since the last query
 *                         <li> gpudb::create_join_table_on_insert:
 *                 incrementally refresh (refresh just those records added)
 *                 whenever new data is inserted into a base table.  A full
 *                 refresh of all the records occurs when a new query is issued
 *                 and there have been inserts to any non-base-tables since the
 *                 last query
 *                 </ul>
 *                 The default value is gpudb::create_join_table_manual.
 *                         <li> gpudb::create_join_table_refresh: Do a manual
 *                 refresh of the join if it exists - throws an error otherwise
 *                 <ul>
 *                         <li> gpudb::create_join_table_no_refresh: don't
 *                 refresh
 *                         <li> gpudb::create_join_table_refresh: incrementally
 *                 refresh (refresh just those records added) if new data has
 *                 been inserted into the base table.  A full refresh of all
 *                 the records occurs if there have been inserts to any
 *                 non-base-tables since the last refresh
 *                         <li> gpudb::create_join_table_full_refresh: always
 *                 refresh even if no new records have been added.  Only
 *                 refresh method guaranteed to do a full refresh (refresh all
 *                 the records) if a delete or update has occurred since the
 *                 last refresh.
 *                 </ul>
 *                 The default value is gpudb::create_join_table_no_refresh.
 *                         <li> gpudb::create_join_table_ttl: Sets the TTL of
 *                 the table specified in @a joinTableName. The value must be
 *                 the desired TTL in minutes.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateJoinTableResponse& createJoinTable( const std::string& joinTableName,
                                          const std::vector<std::string>& tableNames,
                                          const std::vector<std::string>& columnNames,
                                          const std::vector<std::string>& expressions,
                                          const std::map<std::string, std::string>& options,
                                          CreateJoinTableResponse& response_ ) const;

/**
 * Creates an instance (proc) of the user-defined function (UDF) specified by
 * the given command, options, and files, and makes it available for execution.
 * For details on UDFs, see: <a href="../../concepts/udf.html"
 * target="_top">User-Defined Functions</a>
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateProcResponse createProc( const CreateProcRequest& request_ ) const;

/**
 * Creates an instance (proc) of the user-defined function (UDF) specified by
 * the given command, options, and files, and makes it available for execution.
 * For details on UDFs, see: <a href="../../concepts/udf.html"
 * target="_top">User-Defined Functions</a>
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateProcResponse& createProc( const CreateProcRequest& request_,
                                CreateProcResponse& response_ ) const;

/**
 * Creates an instance (proc) of the user-defined function (UDF) specified by
 * the given command, options, and files, and makes it available for execution.
 * For details on UDFs, see: <a href="../../concepts/udf.html"
 * target="_top">User-Defined Functions</a>
 * 
 * @param procName  Name of the proc to be created. Must not be the name of a
 *                  currently existing proc.
 * @param executionMode  The execution mode of the proc.
 *                       <ul>
 *                               <li> gpudb::create_proc_distributed: Input
 *                       table data will be divided into data segments that are
 *                       distributed across all nodes in the cluster, and the
 *                       proc command will be invoked once per data segment in
 *                       parallel. Output table data from each invocation will
 *                       be saved to the same node as the corresponding input
 *                       data.
 *                               <li> gpudb::create_proc_nondistributed: The
 *                       proc command will be invoked only once per execution,
 *                       and will not have access to any input or output table
 *                       data.
 *                       </ul>
 *                       The default value is gpudb::create_proc_distributed.
 * @param files  A map of the files that make up the proc. The keys of the map
 *               are file names, and the values are the binary contents of the
 *               files. The file names may include subdirectory names (e.g.
 *               'subdir/file') but must not resolve to a directory above the
 *               root for the proc.
 * @param command  The command (excluding arguments) that will be invoked when
 *                 the proc is executed. It will be invoked from the directory
 *                 containing the proc @a files and may be any command that can
 *                 be resolved from that directory. It need not refer to a file
 *                 actually in that directory; for example, it could be 'java'
 *                 if the proc is a Java application; however, any necessary
 *                 external programs must be preinstalled on every database
 *                 node. If the command refers to a file in that directory, it
 *                 must be preceded with './' as per Linux convention. If not
 *                 specified, and exactly one file is provided in @a files,
 *                 that file will be invoked.
 * @param args  An array of command-line arguments that will be passed to @a
 *              command when the proc is executed.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateProcResponse createProc( const std::string& procName,
                               const std::string& executionMode,
                               const std::map<std::string, std::vector<uint8_t> >& files,
                               const std::string& command,
                               const std::vector<std::string>& args,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Creates an instance (proc) of the user-defined function (UDF) specified by
 * the given command, options, and files, and makes it available for execution.
 * For details on UDFs, see: <a href="../../concepts/udf.html"
 * target="_top">User-Defined Functions</a>
 * 
 * @param procName  Name of the proc to be created. Must not be the name of a
 *                  currently existing proc.
 * @param executionMode  The execution mode of the proc.
 *                       <ul>
 *                               <li> gpudb::create_proc_distributed: Input
 *                       table data will be divided into data segments that are
 *                       distributed across all nodes in the cluster, and the
 *                       proc command will be invoked once per data segment in
 *                       parallel. Output table data from each invocation will
 *                       be saved to the same node as the corresponding input
 *                       data.
 *                               <li> gpudb::create_proc_nondistributed: The
 *                       proc command will be invoked only once per execution,
 *                       and will not have access to any input or output table
 *                       data.
 *                       </ul>
 *                       The default value is gpudb::create_proc_distributed.
 * @param files  A map of the files that make up the proc. The keys of the map
 *               are file names, and the values are the binary contents of the
 *               files. The file names may include subdirectory names (e.g.
 *               'subdir/file') but must not resolve to a directory above the
 *               root for the proc.
 * @param command  The command (excluding arguments) that will be invoked when
 *                 the proc is executed. It will be invoked from the directory
 *                 containing the proc @a files and may be any command that can
 *                 be resolved from that directory. It need not refer to a file
 *                 actually in that directory; for example, it could be 'java'
 *                 if the proc is a Java application; however, any necessary
 *                 external programs must be preinstalled on every database
 *                 node. If the command refers to a file in that directory, it
 *                 must be preceded with './' as per Linux convention. If not
 *                 specified, and exactly one file is provided in @a files,
 *                 that file will be invoked.
 * @param args  An array of command-line arguments that will be passed to @a
 *              command when the proc is executed.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateProcResponse& createProc( const std::string& procName,
                                const std::string& executionMode,
                                const std::map<std::string, std::vector<uint8_t> >& files,
                                const std::string& command,
                                const std::vector<std::string>& args,
                                const std::map<std::string, std::string>& options,
                                CreateProcResponse& response_ ) const;

/**
 * Creates a new <a href="../../concepts/projections.html"
 * target="_top">projection</a> of an existing table. A projection represents a
 * subset of the columns (potentially including derived columns) of a table.
 * <p>
 * Notes:
 * <p>
 * A moving average can be calculated on a given column using the following
 * syntax in the @a columnNames parameter:
 * <p>
 * 'moving_average(column_name,num_points_before,num_points_after) as
 * new_column_name'
 * <p>
 * For each record in the moving_average function's 'column_name' parameter, it
 * computes the average over the previous 'num_points_before' records and the
 * subsequent 'num_points_after' records.
 * <p>
 * Note that moving average relies on @a order_by, and @a order_by requires
 * that all the data being ordered resides on the same processing node, so it
 * won't make sense to use @a order_by without moving average.
 * <p>
 * Also, a projection can be created with a different shard key than the source
 * table.  By specifying @a shard_key, the projection will be sharded according
 * to the specified columns, regardless of how the source table is sharded.
 * The source table can even be unsharded or replicated.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateProjectionResponse createProjection( const CreateProjectionRequest& request_ ) const;

/**
 * Creates a new <a href="../../concepts/projections.html"
 * target="_top">projection</a> of an existing table. A projection represents a
 * subset of the columns (potentially including derived columns) of a table.
 * <p>
 * Notes:
 * <p>
 * A moving average can be calculated on a given column using the following
 * syntax in the @a columnNames parameter:
 * <p>
 * 'moving_average(column_name,num_points_before,num_points_after) as
 * new_column_name'
 * <p>
 * For each record in the moving_average function's 'column_name' parameter, it
 * computes the average over the previous 'num_points_before' records and the
 * subsequent 'num_points_after' records.
 * <p>
 * Note that moving average relies on @a order_by, and @a order_by requires
 * that all the data being ordered resides on the same processing node, so it
 * won't make sense to use @a order_by without moving average.
 * <p>
 * Also, a projection can be created with a different shard key than the source
 * table.  By specifying @a shard_key, the projection will be sharded according
 * to the specified columns, regardless of how the source table is sharded.
 * The source table can even be unsharded or replicated.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateProjectionResponse& createProjection( const CreateProjectionRequest& request_,
                                            CreateProjectionResponse& response_ ) const;

/**
 * Creates a new <a href="../../concepts/projections.html"
 * target="_top">projection</a> of an existing table. A projection represents a
 * subset of the columns (potentially including derived columns) of a table.
 * <p>
 * Notes:
 * <p>
 * A moving average can be calculated on a given column using the following
 * syntax in the @a columnNames parameter:
 * <p>
 * 'moving_average(column_name,num_points_before,num_points_after) as
 * new_column_name'
 * <p>
 * For each record in the moving_average function's 'column_name' parameter, it
 * computes the average over the previous 'num_points_before' records and the
 * subsequent 'num_points_after' records.
 * <p>
 * Note that moving average relies on @a order_by, and @a order_by requires
 * that all the data being ordered resides on the same processing node, so it
 * won't make sense to use @a order_by without moving average.
 * <p>
 * Also, a projection can be created with a different shard key than the source
 * table.  By specifying @a shard_key, the projection will be sharded according
 * to the specified columns, regardless of how the source table is sharded.
 * The source table can even be unsharded or replicated.
 * 
 * @param tableName  Name of the existing table on which the projection is to
 *                   be applied.
 * @param projectionName  Name of the projection to be created. Has the same
 *                        naming restrictions as <a
 *                        href="../../concepts/tables.html"
 *                        target="_top">tables</a>.
 * @param columnNames  List of columns from @a tableName to be included in the
 *                     projection. Can include derived columns. Can be
 *                     specified as aliased via the syntax 'column_name as
 *                     alias'.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::create_projection_collection_name: Name
 *                 of a <a href="../../concepts/collections.html"
 *                 target="_top">collection</a> to which the projection is to
 *                 be assigned as a child. If the collection provided is
 *                 non-existent, the collection will be automatically created.
 *                         <li> gpudb::create_projection_expression: An
 *                 optional filter <a href="../../concepts/expressions.html"
 *                 target="_top">expression</a> to be applied to the source
 *                 table prior to the projection.
 *                         <li> gpudb::create_projection_limit: The number of
 *                 records to keep.
 *                         <li> gpudb::create_projection_order_by:
 *                 Comma-separated list of the columns to be sorted by; e.g.
 *                 'timestamp asc, x desc'.  The columns specified must be
 *                 present in @a columnNames.  If any alias is given for any
 *                 column name, the alias must be used, rather than the
 *                 original column name.
 *                         <li> gpudb::create_projection_materialize_on_gpu: If
 *                 @a true then the columns of the projection will be cached on
 *                 the GPU.
 *                 <ul>
 *                         <li> gpudb::create_projection_true
 *                         <li> gpudb::create_projection_false
 *                 </ul>
 *                 The default value is gpudb::create_projection_false.
 *                         <li> gpudb::create_projection_chunk_size: If
 *                 provided this indicates the chunk size to be used for this
 *                 table.
 *                         <li> gpudb::create_projection_ttl: Sets the TTL of
 *                 the table, view, or collection specified in @a
 *                 projectionName. The value must be the desired TTL in
 *                 minutes.
 *                         <li> gpudb::create_projection_shard_key:
 *                 Comma-separated list of the columns to be sharded on; e.g.
 *                 'column1, column2'.  The columns specified must be present
 *                 in @a columnNames.  If any alias is given for any column
 *                 name, the alias must be used, rather than the original
 *                 column name.
 *                         <li> gpudb::create_projection_persist: If @a true
 *                 then the projection will be persisted as a regular table (it
 *                 will not be automatically cleared unless a @a ttl is
 *                 provided, and the table data can be modified in subsequent
 *                 operations). If @a false then the projection will be a
 *                 read-only, memory-only temporary table.
 *                 <ul>
 *                         <li> gpudb::create_projection_true
 *                         <li> gpudb::create_projection_false
 *                 </ul>
 *                 The default value is gpudb::create_projection_false.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateProjectionResponse createProjection( const std::string& tableName,
                                           const std::string& projectionName,
                                           const std::vector<std::string>& columnNames,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new <a href="../../concepts/projections.html"
 * target="_top">projection</a> of an existing table. A projection represents a
 * subset of the columns (potentially including derived columns) of a table.
 * <p>
 * Notes:
 * <p>
 * A moving average can be calculated on a given column using the following
 * syntax in the @a columnNames parameter:
 * <p>
 * 'moving_average(column_name,num_points_before,num_points_after) as
 * new_column_name'
 * <p>
 * For each record in the moving_average function's 'column_name' parameter, it
 * computes the average over the previous 'num_points_before' records and the
 * subsequent 'num_points_after' records.
 * <p>
 * Note that moving average relies on @a order_by, and @a order_by requires
 * that all the data being ordered resides on the same processing node, so it
 * won't make sense to use @a order_by without moving average.
 * <p>
 * Also, a projection can be created with a different shard key than the source
 * table.  By specifying @a shard_key, the projection will be sharded according
 * to the specified columns, regardless of how the source table is sharded.
 * The source table can even be unsharded or replicated.
 * 
 * @param tableName  Name of the existing table on which the projection is to
 *                   be applied.
 * @param projectionName  Name of the projection to be created. Has the same
 *                        naming restrictions as <a
 *                        href="../../concepts/tables.html"
 *                        target="_top">tables</a>.
 * @param columnNames  List of columns from @a tableName to be included in the
 *                     projection. Can include derived columns. Can be
 *                     specified as aliased via the syntax 'column_name as
 *                     alias'.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::create_projection_collection_name: Name
 *                 of a <a href="../../concepts/collections.html"
 *                 target="_top">collection</a> to which the projection is to
 *                 be assigned as a child. If the collection provided is
 *                 non-existent, the collection will be automatically created.
 *                         <li> gpudb::create_projection_expression: An
 *                 optional filter <a href="../../concepts/expressions.html"
 *                 target="_top">expression</a> to be applied to the source
 *                 table prior to the projection.
 *                         <li> gpudb::create_projection_limit: The number of
 *                 records to keep.
 *                         <li> gpudb::create_projection_order_by:
 *                 Comma-separated list of the columns to be sorted by; e.g.
 *                 'timestamp asc, x desc'.  The columns specified must be
 *                 present in @a columnNames.  If any alias is given for any
 *                 column name, the alias must be used, rather than the
 *                 original column name.
 *                         <li> gpudb::create_projection_materialize_on_gpu: If
 *                 @a true then the columns of the projection will be cached on
 *                 the GPU.
 *                 <ul>
 *                         <li> gpudb::create_projection_true
 *                         <li> gpudb::create_projection_false
 *                 </ul>
 *                 The default value is gpudb::create_projection_false.
 *                         <li> gpudb::create_projection_chunk_size: If
 *                 provided this indicates the chunk size to be used for this
 *                 table.
 *                         <li> gpudb::create_projection_ttl: Sets the TTL of
 *                 the table, view, or collection specified in @a
 *                 projectionName. The value must be the desired TTL in
 *                 minutes.
 *                         <li> gpudb::create_projection_shard_key:
 *                 Comma-separated list of the columns to be sharded on; e.g.
 *                 'column1, column2'.  The columns specified must be present
 *                 in @a columnNames.  If any alias is given for any column
 *                 name, the alias must be used, rather than the original
 *                 column name.
 *                         <li> gpudb::create_projection_persist: If @a true
 *                 then the projection will be persisted as a regular table (it
 *                 will not be automatically cleared unless a @a ttl is
 *                 provided, and the table data can be modified in subsequent
 *                 operations). If @a false then the projection will be a
 *                 read-only, memory-only temporary table.
 *                 <ul>
 *                         <li> gpudb::create_projection_true
 *                         <li> gpudb::create_projection_false
 *                 </ul>
 *                 The default value is gpudb::create_projection_false.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateProjectionResponse& createProjection( const std::string& tableName,
                                            const std::string& projectionName,
                                            const std::vector<std::string>& columnNames,
                                            const std::map<std::string, std::string>& options,
                                            CreateProjectionResponse& response_ ) const;

/**
 * Creates a new role.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateRoleResponse createRole( const CreateRoleRequest& request_ ) const;

/**
 * Creates a new role.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateRoleResponse& createRole( const CreateRoleRequest& request_,
                                CreateRoleResponse& response_ ) const;

/**
 * Creates a new role.
 * 
 * @param name  Name of the role to be created. Must contain only lowercase
 *              letters, digits, and underscores, and cannot begin with a
 *              digit. Must not be the same name as an existing user or role.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateRoleResponse createRole( const std::string& name,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new role.
 * 
 * @param name  Name of the role to be created. Must contain only lowercase
 *              letters, digits, and underscores, and cannot begin with a
 *              digit. Must not be the same name as an existing user or role.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateRoleResponse& createRole( const std::string& name,
                                const std::map<std::string, std::string>& options,
                                CreateRoleResponse& response_ ) const;

/**
 * Creates a new table or collection. If a new table is being created, the type
 * of the table is given by @a typeId, which must the be the ID of a currently
 * registered type (i.e. one created via {@link
 * #createType(const CreateTypeRequest&) const}). The table will be created
 * inside a collection if the option @a collection_name is specified. If that
 * collection does not already exist, it will be created.
 * <p>
 * To create a new collection, specify the name of the collection in @a
 * tableName and set the @a is_collection option to @a true; @a typeId will be
 * ignored.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateTableResponse createTable( const CreateTableRequest& request_ ) const;

/**
 * Creates a new table or collection. If a new table is being created, the type
 * of the table is given by @a typeId, which must the be the ID of a currently
 * registered type (i.e. one created via {@link
 * #createType(const CreateTypeRequest&,CreateTypeResponse&) const}). The
 * table will be created inside a collection if the option @a collection_name
 * is specified. If that collection does not already exist, it will be created.
 * <p>
 * To create a new collection, specify the name of the collection in @a
 * tableName and set the @a is_collection option to @a true; @a typeId will be
 * ignored.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateTableResponse& createTable( const CreateTableRequest& request_,
                                  CreateTableResponse& response_ ) const;

/**
 * Creates a new table or collection. If a new table is being created, the type
 * of the table is given by @a typeId, which must the be the ID of a currently
 * registered type (i.e. one created via {@link
 * #createType(const std::string&,const std::string&,const std::map<std::string, std::vector<std::string> >&,const std::map<std::string, std::string>&) const}).
 * The table will be created inside a collection if the option @a
 * collection_name is specified. If that collection does not already exist, it
 * will be created.
 * <p>
 * To create a new collection, specify the name of the collection in @a
 * tableName and set the @a is_collection option to @a true; @a typeId will be
 * ignored.
 * 
 * @param tableName  Name of the table to be created. Error for requests with
 *                   existing table of the same name and type id may be
 *                   suppressed by using the @a no_error_if_exists option.  See
 *                   <a href="../../concepts/tables.html"
 *                   target="_top">Tables</a> for naming restrictions.
 * @param typeId  ID of a currently registered type. All objects added to the
 *                newly created table will be of this type.  Ignored if @a
 *                is_collection is @a true.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::create_table_no_error_if_exists: If @a
 *                 true, prevents an error from occurring if the table already
 *                 exists and is of the given type.  If a table with the same
 *                 ID but a different type exists, it is still an error.
 *                 <ul>
 *                         <li> gpudb::create_table_true
 *                         <li> gpudb::create_table_false
 *                 </ul>
 *                 The default value is gpudb::create_table_false.
 *                         <li> gpudb::create_table_collection_name: Name of a
 *                 collection which is to contain the newly created table. If
 *                 empty, then the newly created table will be a top-level
 *                 table. If the collection does not allow duplicate types and
 *                 it contains a table of the same type as the given one, then
 *                 this table creation request will fail.
 *                         <li> gpudb::create_table_is_collection: Indicates
 *                 whether the new table to be created will be a collection.
 *                 <ul>
 *                         <li> gpudb::create_table_true
 *                         <li> gpudb::create_table_false
 *                 </ul>
 *                 The default value is gpudb::create_table_false.
 *                         <li>
 *                 gpudb::create_table_disallow_homogeneous_tables: For a
 *                 collection, indicates whether the collection prohibits
 *                 containment of multiple tables of exactly the same data
 *                 type.
 *                 <ul>
 *                         <li> gpudb::create_table_true
 *                         <li> gpudb::create_table_false
 *                 </ul>
 *                 The default value is gpudb::create_table_false.
 *                         <li> gpudb::create_table_is_replicated: For a table,
 *                 indicates whether the table is to be replicated to all the
 *                 database ranks. This may be necessary when the table is to
 *                 be joined with other tables in a query.
 *                 <ul>
 *                         <li> gpudb::create_table_true
 *                         <li> gpudb::create_table_false
 *                 </ul>
 *                 The default value is gpudb::create_table_false.
 *                         <li> gpudb::create_table_foreign_keys:
 *                 Semicolon-separated list of foreign key constraints, of the
 *                 format 'source_column references
 *                 target_table(primary_key_column) [ as <foreign_key_name> ]'.
 *                         <li> gpudb::create_table_foreign_shard_key: Foreign
 *                 shard key description of the format: <fk_foreign_key>
 *                 references <pk_column_name> from
 *                 <pk_table_name>(<pk_primary_key>)
 *                         <li> gpudb::create_table_ttl: Sets the TTL of the
 *                 table or collection specified in @a tableName. The value
 *                 must be the desired TTL in minutes.
 *                         <li> gpudb::create_table_chunk_size: If provided
 *                 this indicates the chunk size to be used for this table.
 *                         <li> gpudb::create_table_is_result_table: For a
 *                 table, indicates whether the table is a non-persistent,
 *                 memory-only table that will store the output of a proc
 *                 executed with /execute/proc. A result table cannot contain
 *                 store_only, text_search, or string columns (char columns are
 *                 acceptable), records cannot be inserted into it directly,
 *                 and it will not be retained if the server is restarted.
 *                 <ul>
 *                         <li> gpudb::create_table_true
 *                         <li> gpudb::create_table_false
 *                 </ul>
 *                 The default value is gpudb::create_table_false.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateTableResponse createTable( const std::string& tableName,
                                 const std::string& typeId,
                                 const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new table or collection. If a new table is being created, the type
 * of the table is given by @a typeId, which must the be the ID of a currently
 * registered type (i.e. one created via {@link
 * #createType(const std::string&,const std::string&,const std::map<std::string, std::vector<std::string> >&,const std::map<std::string, std::string>&,CreateTypeResponse&) const}).
 * The table will be created inside a collection if the option @a
 * collection_name is specified. If that collection does not already exist, it
 * will be created.
 * <p>
 * To create a new collection, specify the name of the collection in @a
 * tableName and set the @a is_collection option to @a true; @a typeId will be
 * ignored.
 * 
 * @param tableName  Name of the table to be created. Error for requests with
 *                   existing table of the same name and type id may be
 *                   suppressed by using the @a no_error_if_exists option.  See
 *                   <a href="../../concepts/tables.html"
 *                   target="_top">Tables</a> for naming restrictions.
 * @param typeId  ID of a currently registered type. All objects added to the
 *                newly created table will be of this type.  Ignored if @a
 *                is_collection is @a true.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::create_table_no_error_if_exists: If @a
 *                 true, prevents an error from occurring if the table already
 *                 exists and is of the given type.  If a table with the same
 *                 ID but a different type exists, it is still an error.
 *                 <ul>
 *                         <li> gpudb::create_table_true
 *                         <li> gpudb::create_table_false
 *                 </ul>
 *                 The default value is gpudb::create_table_false.
 *                         <li> gpudb::create_table_collection_name: Name of a
 *                 collection which is to contain the newly created table. If
 *                 empty, then the newly created table will be a top-level
 *                 table. If the collection does not allow duplicate types and
 *                 it contains a table of the same type as the given one, then
 *                 this table creation request will fail.
 *                         <li> gpudb::create_table_is_collection: Indicates
 *                 whether the new table to be created will be a collection.
 *                 <ul>
 *                         <li> gpudb::create_table_true
 *                         <li> gpudb::create_table_false
 *                 </ul>
 *                 The default value is gpudb::create_table_false.
 *                         <li>
 *                 gpudb::create_table_disallow_homogeneous_tables: For a
 *                 collection, indicates whether the collection prohibits
 *                 containment of multiple tables of exactly the same data
 *                 type.
 *                 <ul>
 *                         <li> gpudb::create_table_true
 *                         <li> gpudb::create_table_false
 *                 </ul>
 *                 The default value is gpudb::create_table_false.
 *                         <li> gpudb::create_table_is_replicated: For a table,
 *                 indicates whether the table is to be replicated to all the
 *                 database ranks. This may be necessary when the table is to
 *                 be joined with other tables in a query.
 *                 <ul>
 *                         <li> gpudb::create_table_true
 *                         <li> gpudb::create_table_false
 *                 </ul>
 *                 The default value is gpudb::create_table_false.
 *                         <li> gpudb::create_table_foreign_keys:
 *                 Semicolon-separated list of foreign key constraints, of the
 *                 format 'source_column references
 *                 target_table(primary_key_column) [ as <foreign_key_name> ]'.
 *                         <li> gpudb::create_table_foreign_shard_key: Foreign
 *                 shard key description of the format: <fk_foreign_key>
 *                 references <pk_column_name> from
 *                 <pk_table_name>(<pk_primary_key>)
 *                         <li> gpudb::create_table_ttl: Sets the TTL of the
 *                 table or collection specified in @a tableName. The value
 *                 must be the desired TTL in minutes.
 *                         <li> gpudb::create_table_chunk_size: If provided
 *                 this indicates the chunk size to be used for this table.
 *                         <li> gpudb::create_table_is_result_table: For a
 *                 table, indicates whether the table is a non-persistent,
 *                 memory-only table that will store the output of a proc
 *                 executed with /execute/proc. A result table cannot contain
 *                 store_only, text_search, or string columns (char columns are
 *                 acceptable), records cannot be inserted into it directly,
 *                 and it will not be retained if the server is restarted.
 *                 <ul>
 *                         <li> gpudb::create_table_true
 *                         <li> gpudb::create_table_false
 *                 </ul>
 *                 The default value is gpudb::create_table_false.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateTableResponse& createTable( const std::string& tableName,
                                  const std::string& typeId,
                                  const std::map<std::string, std::string>& options,
                                  CreateTableResponse& response_ ) const;

/**
 * Creates a monitor that watches for new records inserted into a particular
 * table (identified by @a tableName) and forwards copies to subscribers via
 * ZMQ. After this call completes, subscribe to the returned @a topicId on the
 * ZMQ table monitor port (default 9002). Each time an insert operation on the
 * table completes, a multipart message is published for that topic; the first
 * part contains only the topic ID, and each subsequent part contains one
 * binary-encoded Avro object that was inserted. The monitor will continue to
 * run (regardless of whether or not there are any subscribers) until
 * deactivated with {@link
 * #clearTableMonitor(const ClearTableMonitorRequest&) const}.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateTableMonitorResponse createTableMonitor( const CreateTableMonitorRequest& request_ ) const;

/**
 * Creates a monitor that watches for new records inserted into a particular
 * table (identified by @a tableName) and forwards copies to subscribers via
 * ZMQ. After this call completes, subscribe to the returned @a topicId on the
 * ZMQ table monitor port (default 9002). Each time an insert operation on the
 * table completes, a multipart message is published for that topic; the first
 * part contains only the topic ID, and each subsequent part contains one
 * binary-encoded Avro object that was inserted. The monitor will continue to
 * run (regardless of whether or not there are any subscribers) until
 * deactivated with {@link
 * #clearTableMonitor(const ClearTableMonitorRequest&,ClearTableMonitorResponse&) const}.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateTableMonitorResponse& createTableMonitor( const CreateTableMonitorRequest& request_,
                                                CreateTableMonitorResponse& response_ ) const;

/**
 * Creates a monitor that watches for new records inserted into a particular
 * table (identified by @a tableName) and forwards copies to subscribers via
 * ZMQ. After this call completes, subscribe to the returned @a topicId on the
 * ZMQ table monitor port (default 9002). Each time an insert operation on the
 * table completes, a multipart message is published for that topic; the first
 * part contains only the topic ID, and each subsequent part contains one
 * binary-encoded Avro object that was inserted. The monitor will continue to
 * run (regardless of whether or not there are any subscribers) until
 * deactivated with {@link
 * #clearTableMonitor(const std::string&,const std::map<std::string, std::string>&) const}.
 * 
 * @param tableName  Name of the table to monitor. Must not refer to a
 *                   collection.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateTableMonitorResponse createTableMonitor( const std::string& tableName,
                                               const std::map<std::string, std::string>& options ) const;

/**
 * Creates a monitor that watches for new records inserted into a particular
 * table (identified by @a tableName) and forwards copies to subscribers via
 * ZMQ. After this call completes, subscribe to the returned @a topicId on the
 * ZMQ table monitor port (default 9002). Each time an insert operation on the
 * table completes, a multipart message is published for that topic; the first
 * part contains only the topic ID, and each subsequent part contains one
 * binary-encoded Avro object that was inserted. The monitor will continue to
 * run (regardless of whether or not there are any subscribers) until
 * deactivated with {@link
 * #clearTableMonitor(const std::string&,const std::map<std::string, std::string>&,ClearTableMonitorResponse&) const}.
 * 
 * @param tableName  Name of the table to monitor. Must not refer to a
 *                   collection.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateTableMonitorResponse& createTableMonitor( const std::string& tableName,
                                                const std::map<std::string, std::string>& options,
                                                CreateTableMonitorResponse& response_ ) const;

/**
 * Sets up an area trigger mechanism for two column_names for one or more
 * tables. (This function is essentially the two-dimensional version of {@link
 * #createTriggerByRange(const CreateTriggerByRangeRequest&) const}.) Once
 * the trigger has been activated, any record added to the listed tables(s) via
 * {@link #insertRecordsRaw(const RawInsertRecordsRequest&) const} with the
 * chosen columns' values falling within the specified region will trip the
 * trigger. All such records will be queued at the trigger port (by default
 * '9001', but able to be retrieved via {@link
 * #showSystemStatus(const ShowSystemStatusRequest&) const}) for any
 * listening client to collect. Active triggers can be cancelled by using the
 * {@link #clearTrigger(const ClearTriggerRequest&) const} endpoint or by
 * clearing all relevant tables.
 * <p>
 * The output returns the trigger handle as well as indicating success or
 * failure of the trigger activation.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateTriggerByAreaResponse createTriggerByArea( const CreateTriggerByAreaRequest& request_ ) const;

/**
 * Sets up an area trigger mechanism for two column_names for one or more
 * tables. (This function is essentially the two-dimensional version of {@link
 * #createTriggerByRange(const CreateTriggerByRangeRequest&,CreateTriggerByRangeResponse&) const}.)
 * Once the trigger has been activated, any record added to the listed
 * tables(s) via {@link
 * #insertRecordsRaw(const RawInsertRecordsRequest&,InsertRecordsResponse&) const}
 * with the chosen columns' values falling within the specified region will
 * trip the trigger. All such records will be queued at the trigger port (by
 * default '9001', but able to be retrieved via {@link
 * #showSystemStatus(const ShowSystemStatusRequest&,ShowSystemStatusResponse&) const})
 * for any listening client to collect. Active triggers can be cancelled by
 * using the {@link
 * #clearTrigger(const ClearTriggerRequest&,ClearTriggerResponse&) const}
 * endpoint or by clearing all relevant tables.
 * <p>
 * The output returns the trigger handle as well as indicating success or
 * failure of the trigger activation.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateTriggerByAreaResponse& createTriggerByArea( const CreateTriggerByAreaRequest& request_,
                                                  CreateTriggerByAreaResponse& response_ ) const;

/**
 * Sets up an area trigger mechanism for two column_names for one or more
 * tables. (This function is essentially the two-dimensional version of {@link
 * #createTriggerByRange(const std::string&,const std::vector<std::string>&,const std::string&,const double,const double,const std::map<std::string, std::string>&) const}.)
 * Once the trigger has been activated, any record added to the listed
 * tables(s) via {@link
 * #insertRecordsRaw(const RawInsertRecordsRequest&) const} with the chosen
 * columns' values falling within the specified region will trip the trigger.
 * All such records will be queued at the trigger port (by default '9001', but
 * able to be retrieved via {@link
 * #showSystemStatus(const std::map<std::string, std::string>&) const})
 * for any listening client to collect. Active triggers can be cancelled by
 * using the {@link
 * #clearTrigger(const std::string&,const std::map<std::string, std::string>&) const}
 * endpoint or by clearing all relevant tables.
 * <p>
 * The output returns the trigger handle as well as indicating success or
 * failure of the trigger activation.
 * 
 * @param requestId  User-created ID for the trigger. The ID can be
 *                   alphanumeric, contain symbols, and must contain at least
 *                   one character.
 * @param tableNames  Names of the tables on which the trigger will be
 *                    activated and maintained.
 * @param xColumnName  Name of a numeric column on which the trigger is
 *                     activated. Usually 'x' for geospatial data points.
 * @param xVector  The respective coordinate values for the region on which the
 *                 trigger is activated. This usually translates to the
 *                 x-coordinates of a geospatial region.
 * @param yColumnName  Name of a second numeric column on which the trigger is
 *                     activated. Usually 'y' for geospatial data points.
 * @param yVector  The respective coordinate values for the region on which the
 *                 trigger is activated. This usually translates to the
 *                 y-coordinates of a geospatial region. Must be the same
 *                 length as xvals.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateTriggerByAreaResponse createTriggerByArea( const std::string& requestId,
                                                 const std::vector<std::string>& tableNames,
                                                 const std::string& xColumnName,
                                                 const std::vector<double>& xVector,
                                                 const std::string& yColumnName,
                                                 const std::vector<double>& yVector,
                                                 const std::map<std::string, std::string>& options ) const;

/**
 * Sets up an area trigger mechanism for two column_names for one or more
 * tables. (This function is essentially the two-dimensional version of {@link
 * #createTriggerByRange(const std::string&,const std::vector<std::string>&,const std::string&,const double,const double,const std::map<std::string, std::string>&,CreateTriggerByRangeResponse&) const}.)
 * Once the trigger has been activated, any record added to the listed
 * tables(s) via {@link
 * #insertRecordsRaw(const RawInsertRecordsRequest&) const} with the chosen
 * columns' values falling within the specified region will trip the trigger.
 * All such records will be queued at the trigger port (by default '9001', but
 * able to be retrieved via {@link
 * #showSystemStatus(const std::map<std::string, std::string>&,ShowSystemStatusResponse&) const})
 * for any listening client to collect. Active triggers can be cancelled by
 * using the {@link
 * #clearTrigger(const std::string&,const std::map<std::string, std::string>&,ClearTriggerResponse&) const}
 * endpoint or by clearing all relevant tables.
 * <p>
 * The output returns the trigger handle as well as indicating success or
 * failure of the trigger activation.
 * 
 * @param requestId  User-created ID for the trigger. The ID can be
 *                   alphanumeric, contain symbols, and must contain at least
 *                   one character.
 * @param tableNames  Names of the tables on which the trigger will be
 *                    activated and maintained.
 * @param xColumnName  Name of a numeric column on which the trigger is
 *                     activated. Usually 'x' for geospatial data points.
 * @param xVector  The respective coordinate values for the region on which the
 *                 trigger is activated. This usually translates to the
 *                 x-coordinates of a geospatial region.
 * @param yColumnName  Name of a second numeric column on which the trigger is
 *                     activated. Usually 'y' for geospatial data points.
 * @param yVector  The respective coordinate values for the region on which the
 *                 trigger is activated. This usually translates to the
 *                 y-coordinates of a geospatial region. Must be the same
 *                 length as xvals.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateTriggerByAreaResponse& createTriggerByArea( const std::string& requestId,
                                                  const std::vector<std::string>& tableNames,
                                                  const std::string& xColumnName,
                                                  const std::vector<double>& xVector,
                                                  const std::string& yColumnName,
                                                  const std::vector<double>& yVector,
                                                  const std::map<std::string, std::string>& options,
                                                  CreateTriggerByAreaResponse& response_ ) const;

/**
 * Sets up a simple range trigger for a column_name for one or more tables.
 * Once the trigger has been activated, any record added to the listed
 * tables(s) via {@link
 * #insertRecordsRaw(const RawInsertRecordsRequest&) const} with the chosen
 * column_name's value falling within the specified range will trip the
 * trigger. All such records will be queued at the trigger port (by default
 * '9001', but able to be retrieved via {@link
 * #showSystemStatus(const ShowSystemStatusRequest&) const}) for any
 * listening client to collect. Active triggers can be cancelled by using the
 * {@link #clearTrigger(const ClearTriggerRequest&) const} endpoint or by
 * clearing all relevant tables.
 * <p>
 * The output returns the trigger handle as well as indicating success or
 * failure of the trigger activation.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateTriggerByRangeResponse createTriggerByRange( const CreateTriggerByRangeRequest& request_ ) const;

/**
 * Sets up a simple range trigger for a column_name for one or more tables.
 * Once the trigger has been activated, any record added to the listed
 * tables(s) via {@link
 * #insertRecordsRaw(const RawInsertRecordsRequest&,InsertRecordsResponse&) const}
 * with the chosen column_name's value falling within the specified range will
 * trip the trigger. All such records will be queued at the trigger port (by
 * default '9001', but able to be retrieved via {@link
 * #showSystemStatus(const ShowSystemStatusRequest&,ShowSystemStatusResponse&) const})
 * for any listening client to collect. Active triggers can be cancelled by
 * using the {@link
 * #clearTrigger(const ClearTriggerRequest&,ClearTriggerResponse&) const}
 * endpoint or by clearing all relevant tables.
 * <p>
 * The output returns the trigger handle as well as indicating success or
 * failure of the trigger activation.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateTriggerByRangeResponse& createTriggerByRange( const CreateTriggerByRangeRequest& request_,
                                                    CreateTriggerByRangeResponse& response_ ) const;

/**
 * Sets up a simple range trigger for a column_name for one or more tables.
 * Once the trigger has been activated, any record added to the listed
 * tables(s) via {@link
 * #insertRecordsRaw(const RawInsertRecordsRequest&) const} with the chosen
 * column_name's value falling within the specified range will trip the
 * trigger. All such records will be queued at the trigger port (by default
 * '9001', but able to be retrieved via {@link
 * #showSystemStatus(const std::map<std::string, std::string>&) const})
 * for any listening client to collect. Active triggers can be cancelled by
 * using the {@link
 * #clearTrigger(const std::string&,const std::map<std::string, std::string>&) const}
 * endpoint or by clearing all relevant tables.
 * <p>
 * The output returns the trigger handle as well as indicating success or
 * failure of the trigger activation.
 * 
 * @param requestId  User-created ID for the trigger. The ID can be
 *                   alphanumeric, contain symbols, and must contain at least
 *                   one character.
 * @param tableNames  Tables on which the trigger will be active.
 * @param columnName  Name of a numeric column_name on which the trigger is
 *                    activated.
 * @param min  The lower bound (inclusive) for the trigger range.
 * @param max  The upper bound (inclusive) for the trigger range.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateTriggerByRangeResponse createTriggerByRange( const std::string& requestId,
                                                   const std::vector<std::string>& tableNames,
                                                   const std::string& columnName,
                                                   const double min,
                                                   const double max,
                                                   const std::map<std::string, std::string>& options ) const;

/**
 * Sets up a simple range trigger for a column_name for one or more tables.
 * Once the trigger has been activated, any record added to the listed
 * tables(s) via {@link
 * #insertRecordsRaw(const RawInsertRecordsRequest&) const} with the chosen
 * column_name's value falling within the specified range will trip the
 * trigger. All such records will be queued at the trigger port (by default
 * '9001', but able to be retrieved via {@link
 * #showSystemStatus(const std::map<std::string, std::string>&,ShowSystemStatusResponse&) const})
 * for any listening client to collect. Active triggers can be cancelled by
 * using the {@link
 * #clearTrigger(const std::string&,const std::map<std::string, std::string>&,ClearTriggerResponse&) const}
 * endpoint or by clearing all relevant tables.
 * <p>
 * The output returns the trigger handle as well as indicating success or
 * failure of the trigger activation.
 * 
 * @param requestId  User-created ID for the trigger. The ID can be
 *                   alphanumeric, contain symbols, and must contain at least
 *                   one character.
 * @param tableNames  Tables on which the trigger will be active.
 * @param columnName  Name of a numeric column_name on which the trigger is
 *                    activated.
 * @param min  The lower bound (inclusive) for the trigger range.
 * @param max  The upper bound (inclusive) for the trigger range.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateTriggerByRangeResponse& createTriggerByRange( const std::string& requestId,
                                                    const std::vector<std::string>& tableNames,
                                                    const std::string& columnName,
                                                    const double min,
                                                    const double max,
                                                    const std::map<std::string, std::string>& options,
                                                    CreateTriggerByRangeResponse& response_ ) const;

/**
 * Creates a new type describing the layout or schema of a table. The type
 * definition is a JSON string describing the fields (i.e. columns) of the
 * type. Each field consists of a name and a data type. Supported data types
 * are: double, float, int, long, string, and bytes. In addition one or more
 * properties can be specified for each column which customize the memory usage
 * and query availability of that column.  Note that some properties are
 * mutually exclusive--i.e. they cannot be specified for any given column
 * simultaneously.  One example of mutually exclusive properties are @a data
 * and @a store_only.
 * <p>
 * To set a *primary key* on one or more columns include the property
 * 'primary_key' on the desired column_names. If a primary key is specified,
 * then a uniqueness constraint is enforced, in that only a single object can
 * exist with a given primary key. When {@link
 * #insertRecordsRaw(const RawInsertRecordsRequest&) const inserting} data
 * into a table with a primary key, depending on the parameters in the request,
 * incoming objects with primary keys that match existing objects will either
 * overwrite (i.e. update) the existing object or will be skipped and not added
 * into the set.
 * <p>
 * Example of a type definition with some of the parameters::
 * <p>
 *         {"type":"record",
 *         "name":"point",
 *         "fields":[{"name":"msg_id","type":"string"},
 *                         {"name":"x","type":"double"},
 *                         {"name":"y","type":"double"},
 *                         {"name":"TIMESTAMP","type":"double"},
 *                         {"name":"source","type":"string"},
 *                         {"name":"group_id","type":"string"},
 *                         {"name":"OBJECT_ID","type":"string"}]
 *         }
 * <p>
 * Properties::
 * <p>
 *         {"group_id":["store_only"],
 *         "msg_id":["store_only","text_search"]
 *         }
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateTypeResponse createType( const CreateTypeRequest& request_ ) const;

/**
 * Creates a new type describing the layout or schema of a table. The type
 * definition is a JSON string describing the fields (i.e. columns) of the
 * type. Each field consists of a name and a data type. Supported data types
 * are: double, float, int, long, string, and bytes. In addition one or more
 * properties can be specified for each column which customize the memory usage
 * and query availability of that column.  Note that some properties are
 * mutually exclusive--i.e. they cannot be specified for any given column
 * simultaneously.  One example of mutually exclusive properties are @a data
 * and @a store_only.
 * <p>
 * To set a *primary key* on one or more columns include the property
 * 'primary_key' on the desired column_names. If a primary key is specified,
 * then a uniqueness constraint is enforced, in that only a single object can
 * exist with a given primary key. When {@link
 * #insertRecordsRaw(const RawInsertRecordsRequest&,InsertRecordsResponse&) const
 * inserting} data into a table with a primary key, depending on the parameters
 * in the request, incoming objects with primary keys that match existing
 * objects will either overwrite (i.e. update) the existing object or will be
 * skipped and not added into the set.
 * <p>
 * Example of a type definition with some of the parameters::
 * <p>
 *         {"type":"record",
 *         "name":"point",
 *         "fields":[{"name":"msg_id","type":"string"},
 *                         {"name":"x","type":"double"},
 *                         {"name":"y","type":"double"},
 *                         {"name":"TIMESTAMP","type":"double"},
 *                         {"name":"source","type":"string"},
 *                         {"name":"group_id","type":"string"},
 *                         {"name":"OBJECT_ID","type":"string"}]
 *         }
 * <p>
 * Properties::
 * <p>
 *         {"group_id":["store_only"],
 *         "msg_id":["store_only","text_search"]
 *         }
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateTypeResponse& createType( const CreateTypeRequest& request_,
                                CreateTypeResponse& response_ ) const;

/**
 * Creates a new type describing the layout or schema of a table. The type
 * definition is a JSON string describing the fields (i.e. columns) of the
 * type. Each field consists of a name and a data type. Supported data types
 * are: double, float, int, long, string, and bytes. In addition one or more
 * properties can be specified for each column which customize the memory usage
 * and query availability of that column.  Note that some properties are
 * mutually exclusive--i.e. they cannot be specified for any given column
 * simultaneously.  One example of mutually exclusive properties are @a data
 * and @a store_only.
 * <p>
 * To set a *primary key* on one or more columns include the property
 * 'primary_key' on the desired column_names. If a primary key is specified,
 * then a uniqueness constraint is enforced, in that only a single object can
 * exist with a given primary key. When {@link
 * #insertRecordsRaw(const RawInsertRecordsRequest&) const inserting} data
 * into a table with a primary key, depending on the parameters in the request,
 * incoming objects with primary keys that match existing objects will either
 * overwrite (i.e. update) the existing object or will be skipped and not added
 * into the set.
 * <p>
 * Example of a type definition with some of the parameters::
 * <p>
 *         {"type":"record",
 *         "name":"point",
 *         "fields":[{"name":"msg_id","type":"string"},
 *                         {"name":"x","type":"double"},
 *                         {"name":"y","type":"double"},
 *                         {"name":"TIMESTAMP","type":"double"},
 *                         {"name":"source","type":"string"},
 *                         {"name":"group_id","type":"string"},
 *                         {"name":"OBJECT_ID","type":"string"}]
 *         }
 * <p>
 * Properties::
 * <p>
 *         {"group_id":["store_only"],
 *         "msg_id":["store_only","text_search"]
 *         }
 * 
 * @param typeDefinition  a JSON string describing the columns of the type to
 *                        be registered.
 * @param label  A user-defined description string which can be used to
 *               differentiate between tables and types with otherwise
 *               identical schemas.
 * @param properties  Each key-value pair specifies the properties to use for a
 *                    given column where the key is the column name.  All keys
 *                    used must be relevant column names for the given table.
 *                    Specifying any property overrides the default properties
 *                    for that column (which is based on the column's data
 *                    type).
 *                    <ul>
 *                            <li> gpudb::create_type_data: Default property
 *                    for all numeric and string type columns; makes the column
 *                    available for GPU queries.
 *                            <li> gpudb::create_type_text_search: Valid only
 *                    for 'string' columns. Enables full text search for string
 *                    columns. Can be set independently of *data* and
 *                    *store_only*.
 *                            <li> gpudb::create_type_store_only: Persist the
 *                    column value but do not make it available to queries
 *                    (e.g. /filter/bybox)-i.e. it is mutually exclusive to the
 *                    'data' property. Any 'bytes' type column must have a
 *                    'store_only' property. This property reduces system
 *                    memory usage.
 *                            <li> gpudb::create_type_disk_optimized: Works in
 *                    conjunction with the 'data' property for string columns.
 *                    This property reduces system disk usage by disabling
 *                    reverse string lookups. Queries like /filter,
 *                    /filter/bylist, and /filter/byvalue work as usual but
 *                    /aggregate/unique, /aggregate/groupby and
 *                    /get/records/bycolumn are not allowed on columns with
 *                    this property.
 *                            <li> gpudb::create_type_timestamp: Valid only for
 *                    'long' columns. Indicates that this field represents a
 *                    timestamp and will be provided in milliseconds since the
 *                    Unix epoch: 00:00:00 Jan 1 1970.  Dates represented by a
 *                    timestamp must fall between the year 1000 and the year
 *                    2900.
 *                            <li> gpudb::create_type_decimal: Valid only for
 *                    'string' columns.  It represents a SQL type NUMERIC(19,
 *                    4) data type.  There can be up to 15 digits before the
 *                    decimal point and up to four digits in the fractional
 *                    part.  The value can be positive or negative (indicated
 *                    by a minus sign at the beginning).  This property is
 *                    mutually exclusive with the 'text_search' property.
 *                            <li> gpudb::create_type_date: Valid only for
 *                    'string' columns.  Indicates that this field represents a
 *                    date and will be provided in the format 'YYYY-MM-DD'.
 *                    The allowable range is 1000-01-01 through 2900-01-01.
 *                    This property is mutually exclusive with the
 *                    *text_search* property.
 *                            <li> gpudb::create_type_time: Valid only for
 *                    'string' columns.  Indicates that this field represents a
 *                    time-of-day and will be provided in the format
 *                    'HH:MM:SS.mmm'.  The allowable range is 00:00:00.000
 *                    through 23:59:59.999.  This property is mutually
 *                    exclusive with the *text_search* property.
 *                            <li> gpudb::create_type_datetime: Valid only for
 *                    'string' columns.  Indicates that this field represents a
 *                    datetime and will be provided in the format 'YYYY-MM-DD
 *                    HH:MM:SS.mmm'.  The allowable range is 1000-01-01
 *                    00:00:00.000 through 2900-01-01 23:59:59.999.  This
 *                    property is mutually exclusive with the *text_search*
 *                    property.
 *                            <li> gpudb::create_type_char1: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 1 character. This property cannot be combined
 *                    with *text_search*
 *                            <li> gpudb::create_type_char2: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 2 characters. This property cannot be
 *                    combined with *text_search*
 *                            <li> gpudb::create_type_char4: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 4 characters. This property cannot be
 *                    combined with *text_search*
 *                            <li> gpudb::create_type_char8: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 8 characters. This property cannot be
 *                    combined with *text_search*
 *                            <li> gpudb::create_type_char16: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 16 characters. This property cannot be
 *                    combined with *text_search*
 *                            <li> gpudb::create_type_char32: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 32 characters. This property cannot be
 *                    combined with *text_search*
 *                            <li> gpudb::create_type_char64: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 64 characters. This property cannot be
 *                    combined with *text_search*
 *                            <li> gpudb::create_type_char128: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 128 characters. This property cannot be
 *                    combined with *text_search*
 *                            <li> gpudb::create_type_char256: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 256 characters. This property cannot be
 *                    combined with *text_search*
 *                            <li> gpudb::create_type_int8: This property
 *                    provides optimized memory and query performance for int
 *                    columns. Ints with this property must be between -128 and
 *                    +127 (inclusive)
 *                            <li> gpudb::create_type_int16: This property
 *                    provides optimized memory and query performance for int
 *                    columns. Ints with this property must be between -32768
 *                    and +32767 (inclusive)
 *                            <li> gpudb::create_type_ipv4: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns representing IPv4 addresses (i.e.
 *                    192.168.1.1). Strings with this property must be of the
 *                    form: A.B.C.D where A, B, C and D are in the range of
 *                    0-255.
 *                            <li> gpudb::create_type_wkt: Valid only for
 *                    'string' and 'bytes' columns. Indicates that this field
 *                    contains geospatial geometry objects in Well-Known Text
 *                    (WKT) or Well-Known Binary (WKB) format.
 *                            <li> gpudb::create_type_primary_key: This
 *                    property indicates that this column will be part of (or
 *                    the entire) primary key.
 *                            <li> gpudb::create_type_shard_key: This property
 *                    indicates that this column will be part of (or the
 *                    entire) shard key.
 *                            <li> gpudb::create_type_nullable: This property
 *                    indicates that this column is nullable.  However, setting
 *                    this property is insufficient for making the column
 *                    nullable.  The user must declare the type of the column
 *                    as a union between its regular type and 'null' in the
 *                    avro schema for the record type in @a typeDefinition.
 *                    For example, if a column is of type integer and is
 *                    nullable, then the entry for the column in the avro
 *                    schema must be: ['int', 'null'].
 *                    The C++, C#, Java, and Python APIs have built-in
 *                    convenience for bypassing setting the avro schema by
 *                    hand.  For those two languages, one can use this property
 *                    as usual and not have to worry about the avro schema for
 *                    the record.
 *                            <li> gpudb::create_type_dict: This property
 *                    indicates that this column should be dictionary encoded.
 *                    It can only be used in conjunction with string columns
 *                    marked with a charN property. This property is
 *                    appropriate for columns where the cardinality (the number
 *                    of unique values) is expected to be low, and can save a
 *                    large amount of memory.
 *                    </ul>
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateTypeResponse createType( const std::string& typeDefinition,
                               const std::string& label,
                               const std::map<std::string, std::vector<std::string> >& properties,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new type describing the layout or schema of a table. The type
 * definition is a JSON string describing the fields (i.e. columns) of the
 * type. Each field consists of a name and a data type. Supported data types
 * are: double, float, int, long, string, and bytes. In addition one or more
 * properties can be specified for each column which customize the memory usage
 * and query availability of that column.  Note that some properties are
 * mutually exclusive--i.e. they cannot be specified for any given column
 * simultaneously.  One example of mutually exclusive properties are @a data
 * and @a store_only.
 * <p>
 * To set a *primary key* on one or more columns include the property
 * 'primary_key' on the desired column_names. If a primary key is specified,
 * then a uniqueness constraint is enforced, in that only a single object can
 * exist with a given primary key. When {@link
 * #insertRecordsRaw(const RawInsertRecordsRequest&) const inserting} data
 * into a table with a primary key, depending on the parameters in the request,
 * incoming objects with primary keys that match existing objects will either
 * overwrite (i.e. update) the existing object or will be skipped and not added
 * into the set.
 * <p>
 * Example of a type definition with some of the parameters::
 * <p>
 *         {"type":"record",
 *         "name":"point",
 *         "fields":[{"name":"msg_id","type":"string"},
 *                         {"name":"x","type":"double"},
 *                         {"name":"y","type":"double"},
 *                         {"name":"TIMESTAMP","type":"double"},
 *                         {"name":"source","type":"string"},
 *                         {"name":"group_id","type":"string"},
 *                         {"name":"OBJECT_ID","type":"string"}]
 *         }
 * <p>
 * Properties::
 * <p>
 *         {"group_id":["store_only"],
 *         "msg_id":["store_only","text_search"]
 *         }
 * 
 * @param typeDefinition  a JSON string describing the columns of the type to
 *                        be registered.
 * @param label  A user-defined description string which can be used to
 *               differentiate between tables and types with otherwise
 *               identical schemas.
 * @param properties  Each key-value pair specifies the properties to use for a
 *                    given column where the key is the column name.  All keys
 *                    used must be relevant column names for the given table.
 *                    Specifying any property overrides the default properties
 *                    for that column (which is based on the column's data
 *                    type).
 *                    <ul>
 *                            <li> gpudb::create_type_data: Default property
 *                    for all numeric and string type columns; makes the column
 *                    available for GPU queries.
 *                            <li> gpudb::create_type_text_search: Valid only
 *                    for 'string' columns. Enables full text search for string
 *                    columns. Can be set independently of *data* and
 *                    *store_only*.
 *                            <li> gpudb::create_type_store_only: Persist the
 *                    column value but do not make it available to queries
 *                    (e.g. /filter/bybox)-i.e. it is mutually exclusive to the
 *                    'data' property. Any 'bytes' type column must have a
 *                    'store_only' property. This property reduces system
 *                    memory usage.
 *                            <li> gpudb::create_type_disk_optimized: Works in
 *                    conjunction with the 'data' property for string columns.
 *                    This property reduces system disk usage by disabling
 *                    reverse string lookups. Queries like /filter,
 *                    /filter/bylist, and /filter/byvalue work as usual but
 *                    /aggregate/unique, /aggregate/groupby and
 *                    /get/records/bycolumn are not allowed on columns with
 *                    this property.
 *                            <li> gpudb::create_type_timestamp: Valid only for
 *                    'long' columns. Indicates that this field represents a
 *                    timestamp and will be provided in milliseconds since the
 *                    Unix epoch: 00:00:00 Jan 1 1970.  Dates represented by a
 *                    timestamp must fall between the year 1000 and the year
 *                    2900.
 *                            <li> gpudb::create_type_decimal: Valid only for
 *                    'string' columns.  It represents a SQL type NUMERIC(19,
 *                    4) data type.  There can be up to 15 digits before the
 *                    decimal point and up to four digits in the fractional
 *                    part.  The value can be positive or negative (indicated
 *                    by a minus sign at the beginning).  This property is
 *                    mutually exclusive with the 'text_search' property.
 *                            <li> gpudb::create_type_date: Valid only for
 *                    'string' columns.  Indicates that this field represents a
 *                    date and will be provided in the format 'YYYY-MM-DD'.
 *                    The allowable range is 1000-01-01 through 2900-01-01.
 *                    This property is mutually exclusive with the
 *                    *text_search* property.
 *                            <li> gpudb::create_type_time: Valid only for
 *                    'string' columns.  Indicates that this field represents a
 *                    time-of-day and will be provided in the format
 *                    'HH:MM:SS.mmm'.  The allowable range is 00:00:00.000
 *                    through 23:59:59.999.  This property is mutually
 *                    exclusive with the *text_search* property.
 *                            <li> gpudb::create_type_datetime: Valid only for
 *                    'string' columns.  Indicates that this field represents a
 *                    datetime and will be provided in the format 'YYYY-MM-DD
 *                    HH:MM:SS.mmm'.  The allowable range is 1000-01-01
 *                    00:00:00.000 through 2900-01-01 23:59:59.999.  This
 *                    property is mutually exclusive with the *text_search*
 *                    property.
 *                            <li> gpudb::create_type_char1: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 1 character. This property cannot be combined
 *                    with *text_search*
 *                            <li> gpudb::create_type_char2: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 2 characters. This property cannot be
 *                    combined with *text_search*
 *                            <li> gpudb::create_type_char4: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 4 characters. This property cannot be
 *                    combined with *text_search*
 *                            <li> gpudb::create_type_char8: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 8 characters. This property cannot be
 *                    combined with *text_search*
 *                            <li> gpudb::create_type_char16: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 16 characters. This property cannot be
 *                    combined with *text_search*
 *                            <li> gpudb::create_type_char32: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 32 characters. This property cannot be
 *                    combined with *text_search*
 *                            <li> gpudb::create_type_char64: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 64 characters. This property cannot be
 *                    combined with *text_search*
 *                            <li> gpudb::create_type_char128: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 128 characters. This property cannot be
 *                    combined with *text_search*
 *                            <li> gpudb::create_type_char256: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns. Strings with this property must be no
 *                    longer than 256 characters. This property cannot be
 *                    combined with *text_search*
 *                            <li> gpudb::create_type_int8: This property
 *                    provides optimized memory and query performance for int
 *                    columns. Ints with this property must be between -128 and
 *                    +127 (inclusive)
 *                            <li> gpudb::create_type_int16: This property
 *                    provides optimized memory and query performance for int
 *                    columns. Ints with this property must be between -32768
 *                    and +32767 (inclusive)
 *                            <li> gpudb::create_type_ipv4: This property
 *                    provides optimized memory, disk and query performance for
 *                    string columns representing IPv4 addresses (i.e.
 *                    192.168.1.1). Strings with this property must be of the
 *                    form: A.B.C.D where A, B, C and D are in the range of
 *                    0-255.
 *                            <li> gpudb::create_type_wkt: Valid only for
 *                    'string' and 'bytes' columns. Indicates that this field
 *                    contains geospatial geometry objects in Well-Known Text
 *                    (WKT) or Well-Known Binary (WKB) format.
 *                            <li> gpudb::create_type_primary_key: This
 *                    property indicates that this column will be part of (or
 *                    the entire) primary key.
 *                            <li> gpudb::create_type_shard_key: This property
 *                    indicates that this column will be part of (or the
 *                    entire) shard key.
 *                            <li> gpudb::create_type_nullable: This property
 *                    indicates that this column is nullable.  However, setting
 *                    this property is insufficient for making the column
 *                    nullable.  The user must declare the type of the column
 *                    as a union between its regular type and 'null' in the
 *                    avro schema for the record type in @a typeDefinition.
 *                    For example, if a column is of type integer and is
 *                    nullable, then the entry for the column in the avro
 *                    schema must be: ['int', 'null'].
 *                    The C++, C#, Java, and Python APIs have built-in
 *                    convenience for bypassing setting the avro schema by
 *                    hand.  For those two languages, one can use this property
 *                    as usual and not have to worry about the avro schema for
 *                    the record.
 *                            <li> gpudb::create_type_dict: This property
 *                    indicates that this column should be dictionary encoded.
 *                    It can only be used in conjunction with string columns
 *                    marked with a charN property. This property is
 *                    appropriate for columns where the cardinality (the number
 *                    of unique values) is expected to be low, and can save a
 *                    large amount of memory.
 *                    </ul>
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateTypeResponse& createType( const std::string& typeDefinition,
                                const std::string& label,
                                const std::map<std::string, std::vector<std::string> >& properties,
                                const std::map<std::string, std::string>& options,
                                CreateTypeResponse& response_ ) const;

/**
 * Performs a <a href="../../concepts/unions.html" target="_top">union</a>
 * (concatenation) of one or more existing tables or views, the results of
 * which are stored in a new view. It is equivalent to the SQL UNION ALL
 * operator.  Non-charN 'string' and 'bytes' column types cannot be included in
 * a union, neither can columns with the property 'store_only'. Though not
 * explicitly unions, <a href="../../concepts/intersect.html"
 * target="_top">intersect</a> and <a href="../../concepts/except.html"
 * target="_top">except</a> are also available from this endpoint.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateUnionResponse createUnion( const CreateUnionRequest& request_ ) const;

/**
 * Performs a <a href="../../concepts/unions.html" target="_top">union</a>
 * (concatenation) of one or more existing tables or views, the results of
 * which are stored in a new view. It is equivalent to the SQL UNION ALL
 * operator.  Non-charN 'string' and 'bytes' column types cannot be included in
 * a union, neither can columns with the property 'store_only'. Though not
 * explicitly unions, <a href="../../concepts/intersect.html"
 * target="_top">intersect</a> and <a href="../../concepts/except.html"
 * target="_top">except</a> are also available from this endpoint.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateUnionResponse& createUnion( const CreateUnionRequest& request_,
                                  CreateUnionResponse& response_ ) const;

/**
 * Performs a <a href="../../concepts/unions.html" target="_top">union</a>
 * (concatenation) of one or more existing tables or views, the results of
 * which are stored in a new view. It is equivalent to the SQL UNION ALL
 * operator.  Non-charN 'string' and 'bytes' column types cannot be included in
 * a union, neither can columns with the property 'store_only'. Though not
 * explicitly unions, <a href="../../concepts/intersect.html"
 * target="_top">intersect</a> and <a href="../../concepts/except.html"
 * target="_top">except</a> are also available from this endpoint.
 * 
 * @param tableName  Name of the table to be created. Has the same naming
 *                   restrictions as <a href="../../concepts/tables.html"
 *                   target="_top">tables</a>.
 * @param tableNames  The list of table names making up the union. Must contain
 *                    the names of one or more existing tables.
 * @param inputColumnNames  The list of columns from each of the corresponding
 *                          input tables.
 * @param outputColumnNames  The list of names of the columns to be stored in
 *                           the union.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::create_union_collection_name: Name of a
 *                 collection which is to contain the union. If the collection
 *                 provided is non-existent, the collection will be
 *                 automatically created. If empty, then the union will be a
 *                 top-level table.
 *                         <li> gpudb::create_union_materialize_on_gpu: If
 *                 'true' then the columns of the union will be cached on the
 *                 GPU.
 *                 <ul>
 *                         <li> gpudb::create_union_true
 *                         <li> gpudb::create_union_false
 *                 </ul>
 *                 The default value is gpudb::create_union_false.
 *                         <li> gpudb::create_union_mode: If 'merge_views' then
 *                 this operation will merge (i.e. union) the provided views.
 *                 All 'table_names' must be views from the same underlying
 *                 base table.
 *                 <ul>
 *                         <li> gpudb::create_union_union_all: Retains all rows
 *                 from the specified tables.
 *                         <li> gpudb::create_union_union: Retains all unique
 *                 rows from the specified tables (synonym for
 *                 'union_distinct').
 *                         <li> gpudb::create_union_union_distinct: Retains all
 *                 unique rows from the specified tables.
 *                         <li> gpudb::create_union_except: Retains all unique
 *                 rows from the first table that do not appear in the second
 *                 table (only works on 2 tables).
 *                         <li> gpudb::create_union_intersect: Retains all
 *                 unique rows that appear in both of the specified tables
 *                 (only works on 2 tables).
 *                         <li> gpudb::create_union_merge_views: Merge two or
 *                 more views (or views of views) of the same base data set
 *                 into a new view. The resulting view would match the results
 *                 of a SQL OR operation, e.g., if filter 1 creates a view
 *                 using the expression 'x = 10' and filter 2 creates a view
 *                 using the expression 'x <= 10', then the merge views
 *                 operation creates a new view using the expression 'x = 10 OR
 *                 x <= 10'.
 *                 </ul>
 *                 The default value is gpudb::create_union_union_all.
 *                         <li> gpudb::create_union_chunk_size: If provided
 *                 this indicates the chunk size to be used for this table.
 *                         <li> gpudb::create_union_ttl: Sets the TTL of the
 *                 table specified in @a tableName. The value must be the
 *                 desired TTL in minutes.
 *                         <li> gpudb::create_union_persist: If @a true then
 *                 the union will be persisted as a regular table (it will not
 *                 be automatically cleared unless a @a ttl is provided, and
 *                 the table data can be modified in subsequent operations). If
 *                 @a false (the default) then the union will be a read-only,
 *                 memory-only temporary table.
 *                 <ul>
 *                         <li> gpudb::create_union_true
 *                         <li> gpudb::create_union_false
 *                 </ul>
 *                 The default value is gpudb::create_union_false.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateUnionResponse createUnion( const std::string& tableName,
                                 const std::vector<std::string>& tableNames,
                                 const std::vector<std::vector<std::string> >& inputColumnNames,
                                 const std::vector<std::string>& outputColumnNames,
                                 const std::map<std::string, std::string>& options ) const;

/**
 * Performs a <a href="../../concepts/unions.html" target="_top">union</a>
 * (concatenation) of one or more existing tables or views, the results of
 * which are stored in a new view. It is equivalent to the SQL UNION ALL
 * operator.  Non-charN 'string' and 'bytes' column types cannot be included in
 * a union, neither can columns with the property 'store_only'. Though not
 * explicitly unions, <a href="../../concepts/intersect.html"
 * target="_top">intersect</a> and <a href="../../concepts/except.html"
 * target="_top">except</a> are also available from this endpoint.
 * 
 * @param tableName  Name of the table to be created. Has the same naming
 *                   restrictions as <a href="../../concepts/tables.html"
 *                   target="_top">tables</a>.
 * @param tableNames  The list of table names making up the union. Must contain
 *                    the names of one or more existing tables.
 * @param inputColumnNames  The list of columns from each of the corresponding
 *                          input tables.
 * @param outputColumnNames  The list of names of the columns to be stored in
 *                           the union.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::create_union_collection_name: Name of a
 *                 collection which is to contain the union. If the collection
 *                 provided is non-existent, the collection will be
 *                 automatically created. If empty, then the union will be a
 *                 top-level table.
 *                         <li> gpudb::create_union_materialize_on_gpu: If
 *                 'true' then the columns of the union will be cached on the
 *                 GPU.
 *                 <ul>
 *                         <li> gpudb::create_union_true
 *                         <li> gpudb::create_union_false
 *                 </ul>
 *                 The default value is gpudb::create_union_false.
 *                         <li> gpudb::create_union_mode: If 'merge_views' then
 *                 this operation will merge (i.e. union) the provided views.
 *                 All 'table_names' must be views from the same underlying
 *                 base table.
 *                 <ul>
 *                         <li> gpudb::create_union_union_all: Retains all rows
 *                 from the specified tables.
 *                         <li> gpudb::create_union_union: Retains all unique
 *                 rows from the specified tables (synonym for
 *                 'union_distinct').
 *                         <li> gpudb::create_union_union_distinct: Retains all
 *                 unique rows from the specified tables.
 *                         <li> gpudb::create_union_except: Retains all unique
 *                 rows from the first table that do not appear in the second
 *                 table (only works on 2 tables).
 *                         <li> gpudb::create_union_intersect: Retains all
 *                 unique rows that appear in both of the specified tables
 *                 (only works on 2 tables).
 *                         <li> gpudb::create_union_merge_views: Merge two or
 *                 more views (or views of views) of the same base data set
 *                 into a new view. The resulting view would match the results
 *                 of a SQL OR operation, e.g., if filter 1 creates a view
 *                 using the expression 'x = 10' and filter 2 creates a view
 *                 using the expression 'x <= 10', then the merge views
 *                 operation creates a new view using the expression 'x = 10 OR
 *                 x <= 10'.
 *                 </ul>
 *                 The default value is gpudb::create_union_union_all.
 *                         <li> gpudb::create_union_chunk_size: If provided
 *                 this indicates the chunk size to be used for this table.
 *                         <li> gpudb::create_union_ttl: Sets the TTL of the
 *                 table specified in @a tableName. The value must be the
 *                 desired TTL in minutes.
 *                         <li> gpudb::create_union_persist: If @a true then
 *                 the union will be persisted as a regular table (it will not
 *                 be automatically cleared unless a @a ttl is provided, and
 *                 the table data can be modified in subsequent operations). If
 *                 @a false (the default) then the union will be a read-only,
 *                 memory-only temporary table.
 *                 <ul>
 *                         <li> gpudb::create_union_true
 *                         <li> gpudb::create_union_false
 *                 </ul>
 *                 The default value is gpudb::create_union_false.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateUnionResponse& createUnion( const std::string& tableName,
                                  const std::vector<std::string>& tableNames,
                                  const std::vector<std::vector<std::string> >& inputColumnNames,
                                  const std::vector<std::string>& outputColumnNames,
                                  const std::map<std::string, std::string>& options,
                                  CreateUnionResponse& response_ ) const;

/**
 * Creates a new external user (a user whose credentials are managed by an
 * external LDAP).
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateUserExternalResponse createUserExternal( const CreateUserExternalRequest& request_ ) const;

/**
 * Creates a new external user (a user whose credentials are managed by an
 * external LDAP).
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateUserExternalResponse& createUserExternal( const CreateUserExternalRequest& request_,
                                                CreateUserExternalResponse& response_ ) const;

/**
 * Creates a new external user (a user whose credentials are managed by an
 * external LDAP).
 * 
 * @param name  Name of the user to be created. Must exactly match the user's
 *              name in the external LDAP, prefixed with a @. Must not be the
 *              same name as an existing user.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateUserExternalResponse createUserExternal( const std::string& name,
                                               const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new external user (a user whose credentials are managed by an
 * external LDAP).
 * 
 * @param name  Name of the user to be created. Must exactly match the user's
 *              name in the external LDAP, prefixed with a @. Must not be the
 *              same name as an existing user.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateUserExternalResponse& createUserExternal( const std::string& name,
                                                const std::map<std::string, std::string>& options,
                                                CreateUserExternalResponse& response_ ) const;

/**
 * Creates a new internal user (a user whose credentials are managed by the
 * database system).
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateUserInternalResponse createUserInternal( const CreateUserInternalRequest& request_ ) const;

/**
 * Creates a new internal user (a user whose credentials are managed by the
 * database system).
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateUserInternalResponse& createUserInternal( const CreateUserInternalRequest& request_,
                                                CreateUserInternalResponse& response_ ) const;

/**
 * Creates a new internal user (a user whose credentials are managed by the
 * database system).
 * 
 * @param name  Name of the user to be created. Must contain only lowercase
 *              letters, digits, and underscores, and cannot begin with a
 *              digit. Must not be the same name as an existing user or role.
 * @param password  Initial password of the user to be created. May be an empty
 *                  string for no password.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

CreateUserInternalResponse createUserInternal( const std::string& name,
                                               const std::string& password,
                                               const std::map<std::string, std::string>& options ) const;

/**
 * Creates a new internal user (a user whose credentials are managed by the
 * database system).
 * 
 * @param name  Name of the user to be created. Must contain only lowercase
 *              letters, digits, and underscores, and cannot begin with a
 *              digit. Must not be the same name as an existing user or role.
 * @param password  Initial password of the user to be created. May be an empty
 *                  string for no password.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

CreateUserInternalResponse& createUserInternal( const std::string& name,
                                                const std::string& password,
                                                const std::map<std::string, std::string>& options,
                                                CreateUserInternalResponse& response_ ) const;

/**
 * Deletes a proc. Any currently running instances of the proc will be killed.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

DeleteProcResponse deleteProc( const DeleteProcRequest& request_ ) const;

/**
 * Deletes a proc. Any currently running instances of the proc will be killed.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

DeleteProcResponse& deleteProc( const DeleteProcRequest& request_,
                                DeleteProcResponse& response_ ) const;

/**
 * Deletes a proc. Any currently running instances of the proc will be killed.
 * 
 * @param procName  Name of the proc to be deleted. Must be the name of a
 *                  currently existing proc.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

DeleteProcResponse deleteProc( const std::string& procName,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Deletes a proc. Any currently running instances of the proc will be killed.
 * 
 * @param procName  Name of the proc to be deleted. Must be the name of a
 *                  currently existing proc.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

DeleteProcResponse& deleteProc( const std::string& procName,
                                const std::map<std::string, std::string>& options,
                                DeleteProcResponse& response_ ) const;

/**
 * Deletes record(s) matching the provided criteria from the given table. The
 * record selection criteria can either be one or more  @a expressions
 * (matching multiple records) or a single record identified by @a record_id
 * options.  Note that the two selection criteria are mutually exclusive.  This
 * operation cannot be run on a collection or a view.  The operation is
 * synchronous meaning that a response will not be available until the request
 * is completely processed and all the matching records are deleted.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

DeleteRecordsResponse deleteRecords( const DeleteRecordsRequest& request_ ) const;

/**
 * Deletes record(s) matching the provided criteria from the given table. The
 * record selection criteria can either be one or more  @a expressions
 * (matching multiple records) or a single record identified by @a record_id
 * options.  Note that the two selection criteria are mutually exclusive.  This
 * operation cannot be run on a collection or a view.  The operation is
 * synchronous meaning that a response will not be available until the request
 * is completely processed and all the matching records are deleted.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

DeleteRecordsResponse& deleteRecords( const DeleteRecordsRequest& request_,
                                      DeleteRecordsResponse& response_ ) const;

/**
 * Deletes record(s) matching the provided criteria from the given table. The
 * record selection criteria can either be one or more  @a expressions
 * (matching multiple records) or a single record identified by @a record_id
 * options.  Note that the two selection criteria are mutually exclusive.  This
 * operation cannot be run on a collection or a view.  The operation is
 * synchronous meaning that a response will not be available until the request
 * is completely processed and all the matching records are deleted.
 * 
 * @param tableName  Name of the table from which to delete records. The set
 *                   must be a currently existing table and not a collection or
 *                   a view.
 * @param expressions  A list of the actual predicates, one for each select;
 *                     format should follow the guidelines provided /filter.
 *                     Specifying one or more @a expressions is mutually
 *                     exclusive to specifying @a record_id in the @a options.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::delete_records_global_expression: An
 *                 optional global expression to reduce the search space of the
 *                 @a expressions.
 *                         <li> gpudb::delete_records_record_id: A record id
 *                 identifying a single record, obtained at the time of
 *                 /insert/records or by calling /get/records/fromcollection
 *                 with the *return_record_ids* option.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

DeleteRecordsResponse deleteRecords( const std::string& tableName,
                                     const std::vector<std::string>& expressions,
                                     const std::map<std::string, std::string>& options ) const;

/**
 * Deletes record(s) matching the provided criteria from the given table. The
 * record selection criteria can either be one or more  @a expressions
 * (matching multiple records) or a single record identified by @a record_id
 * options.  Note that the two selection criteria are mutually exclusive.  This
 * operation cannot be run on a collection or a view.  The operation is
 * synchronous meaning that a response will not be available until the request
 * is completely processed and all the matching records are deleted.
 * 
 * @param tableName  Name of the table from which to delete records. The set
 *                   must be a currently existing table and not a collection or
 *                   a view.
 * @param expressions  A list of the actual predicates, one for each select;
 *                     format should follow the guidelines provided /filter.
 *                     Specifying one or more @a expressions is mutually
 *                     exclusive to specifying @a record_id in the @a options.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::delete_records_global_expression: An
 *                 optional global expression to reduce the search space of the
 *                 @a expressions.
 *                         <li> gpudb::delete_records_record_id: A record id
 *                 identifying a single record, obtained at the time of
 *                 /insert/records or by calling /get/records/fromcollection
 *                 with the *return_record_ids* option.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

DeleteRecordsResponse& deleteRecords( const std::string& tableName,
                                      const std::vector<std::string>& expressions,
                                      const std::map<std::string, std::string>& options,
                                      DeleteRecordsResponse& response_ ) const;

/**
 * Deletes an existing role.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

DeleteRoleResponse deleteRole( const DeleteRoleRequest& request_ ) const;

/**
 * Deletes an existing role.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

DeleteRoleResponse& deleteRole( const DeleteRoleRequest& request_,
                                DeleteRoleResponse& response_ ) const;

/**
 * Deletes an existing role.
 * 
 * @param name  Name of the role to be deleted. Must be an existing role.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

DeleteRoleResponse deleteRole( const std::string& name,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Deletes an existing role.
 * 
 * @param name  Name of the role to be deleted. Must be an existing role.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

DeleteRoleResponse& deleteRole( const std::string& name,
                                const std::map<std::string, std::string>& options,
                                DeleteRoleResponse& response_ ) const;

/**
 * Deletes an existing user.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

DeleteUserResponse deleteUser( const DeleteUserRequest& request_ ) const;

/**
 * Deletes an existing user.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

DeleteUserResponse& deleteUser( const DeleteUserRequest& request_,
                                DeleteUserResponse& response_ ) const;

/**
 * Deletes an existing user.
 * 
 * @param name  Name of the user to be deleted. Must be an existing user.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

DeleteUserResponse deleteUser( const std::string& name,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Deletes an existing user.
 * 
 * @param name  Name of the user to be deleted. Must be an existing user.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

DeleteUserResponse& deleteUser( const std::string& name,
                                const std::map<std::string, std::string>& options,
                                DeleteUserResponse& response_ ) const;

/**
 * Executes a proc. This endpoint is asynchronous and does not wait for the
 * proc to complete before returning.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ExecuteProcResponse executeProc( const ExecuteProcRequest& request_ ) const;

/**
 * Executes a proc. This endpoint is asynchronous and does not wait for the
 * proc to complete before returning.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ExecuteProcResponse& executeProc( const ExecuteProcRequest& request_,
                                  ExecuteProcResponse& response_ ) const;

/**
 * Executes a proc. This endpoint is asynchronous and does not wait for the
 * proc to complete before returning.
 * 
 * @param procName  Name of the proc to execute. Must be the name of a
 *                  currently existing proc.
 * @param params  A map containing named parameters to pass to the proc. Each
 *                key/value pair specifies the name of a parameter and its
 *                value.
 * @param binParams  A map containing named binary parameters to pass to the
 *                   proc. Each key/value pair specifies the name of a
 *                   parameter and its value.
 * @param inputTableNames  Names of the tables containing data to be passed to
 *                         the proc. Each name specified must be the name of a
 *                         currently existing table. If no table names are
 *                         specified, no data will be passed to the proc.
 * @param inputColumnNames  Map of table names from @a inputTableNames to lists
 *                          of names of columns from those tables that will be
 *                          passed to the proc. Each column name specified must
 *                          be the name of an existing column in the
 *                          corresponding table. If a table name from @a
 *                          inputTableNames is not included, all columns from
 *                          that table will be passed to the proc.
 * @param outputTableNames  Names of the tables to which output data from the
 *                          proc will be written. If a specified table does not
 *                          exist, it will automatically be created with the
 *                          same schema as the corresponding table (by order)
 *                          from @a inputTableNames, excluding any primary and
 *                          shard keys. If a specified table is a
 *                          non-persistent result table, it must not have
 *                          primary or shard keys. If no table names are
 *                          specified, no output data can be returned from the
 *                          proc.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::execute_proc_cache_input: A
 *                 comma-delimited list of table names from @a inputTableNames
 *                 from which input data will be cached for use in subsequent
 *                 calls to /execute/proc with the @a use_cached_input option.
 *                 Cached input data will be retained until the proc status is
 *                 cleared with the /show/proc/status option of
 *                 /show/proc/status and all proc instances using the cached
 *                 data have completed.
 *                         <li> gpudb::execute_proc_use_cached_input: A
 *                 comma-delimited list of run IDs (as returned from prior
 *                 calls to /execute/proc) of running or completed proc
 *                 instances from which input data cached using the @a
 *                 cache_input option will be used. Cached input data will not
 *                 be used for any tables specified in @a inputTableNames, but
 *                 data from all other tables cached for the specified run IDs
 *                 will be passed to the proc. If the same table was cached for
 *                 multiple specified run IDs, the cached data from the first
 *                 run ID specified in the list that includes that table will
 *                 be used.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ExecuteProcResponse executeProc( const std::string& procName,
                                 const std::map<std::string, std::string>& params,
                                 const std::map<std::string, std::vector<uint8_t> >& binParams,
                                 const std::vector<std::string>& inputTableNames,
                                 const std::map<std::string, std::vector<std::string> >& inputColumnNames,
                                 const std::vector<std::string>& outputTableNames,
                                 const std::map<std::string, std::string>& options ) const;

/**
 * Executes a proc. This endpoint is asynchronous and does not wait for the
 * proc to complete before returning.
 * 
 * @param procName  Name of the proc to execute. Must be the name of a
 *                  currently existing proc.
 * @param params  A map containing named parameters to pass to the proc. Each
 *                key/value pair specifies the name of a parameter and its
 *                value.
 * @param binParams  A map containing named binary parameters to pass to the
 *                   proc. Each key/value pair specifies the name of a
 *                   parameter and its value.
 * @param inputTableNames  Names of the tables containing data to be passed to
 *                         the proc. Each name specified must be the name of a
 *                         currently existing table. If no table names are
 *                         specified, no data will be passed to the proc.
 * @param inputColumnNames  Map of table names from @a inputTableNames to lists
 *                          of names of columns from those tables that will be
 *                          passed to the proc. Each column name specified must
 *                          be the name of an existing column in the
 *                          corresponding table. If a table name from @a
 *                          inputTableNames is not included, all columns from
 *                          that table will be passed to the proc.
 * @param outputTableNames  Names of the tables to which output data from the
 *                          proc will be written. If a specified table does not
 *                          exist, it will automatically be created with the
 *                          same schema as the corresponding table (by order)
 *                          from @a inputTableNames, excluding any primary and
 *                          shard keys. If a specified table is a
 *                          non-persistent result table, it must not have
 *                          primary or shard keys. If no table names are
 *                          specified, no output data can be returned from the
 *                          proc.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::execute_proc_cache_input: A
 *                 comma-delimited list of table names from @a inputTableNames
 *                 from which input data will be cached for use in subsequent
 *                 calls to /execute/proc with the @a use_cached_input option.
 *                 Cached input data will be retained until the proc status is
 *                 cleared with the /show/proc/status option of
 *                 /show/proc/status and all proc instances using the cached
 *                 data have completed.
 *                         <li> gpudb::execute_proc_use_cached_input: A
 *                 comma-delimited list of run IDs (as returned from prior
 *                 calls to /execute/proc) of running or completed proc
 *                 instances from which input data cached using the @a
 *                 cache_input option will be used. Cached input data will not
 *                 be used for any tables specified in @a inputTableNames, but
 *                 data from all other tables cached for the specified run IDs
 *                 will be passed to the proc. If the same table was cached for
 *                 multiple specified run IDs, the cached data from the first
 *                 run ID specified in the list that includes that table will
 *                 be used.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ExecuteProcResponse& executeProc( const std::string& procName,
                                  const std::map<std::string, std::string>& params,
                                  const std::map<std::string, std::vector<uint8_t> >& binParams,
                                  const std::vector<std::string>& inputTableNames,
                                  const std::map<std::string, std::vector<std::string> >& inputColumnNames,
                                  const std::vector<std::string>& outputTableNames,
                                  const std::map<std::string, std::string>& options,
                                  ExecuteProcResponse& response_ ) const;

/**
 * Filters data based on the specified expression.  The results are stored in a
 * result set with the given @a viewName.
 * <p>
 * For details see <a href="../../concepts/expressions.html"
 * target="_top">concepts</a>.
 * <p>
 * The response message contains the number of points for which the expression
 * evaluated to be true, which is equivalent to the size of the result view.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterResponse filter( const FilterRequest& request_ ) const;

/**
 * Filters data based on the specified expression.  The results are stored in a
 * result set with the given @a viewName.
 * <p>
 * For details see <a href="../../concepts/expressions.html"
 * target="_top">concepts</a>.
 * <p>
 * The response message contains the number of points for which the expression
 * evaluated to be true, which is equivalent to the size of the result view.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterResponse& filter( const FilterRequest& request_,
                        FilterResponse& response_ ) const;

/**
 * Filters data based on the specified expression.  The results are stored in a
 * result set with the given @a viewName.
 * <p>
 * For details see <a href="../../concepts/expressions.html"
 * target="_top">concepts</a>.
 * <p>
 * The response message contains the number of points for which the expression
 * evaluated to be true, which is equivalent to the size of the result view.
 * 
 * @param tableName  Name of the table to filter.  This may be the ID of a
 *                   collection, table or a result set (for chaining queries).
 *                   Collections may be filtered only if all tables within the
 *                   collection have the same type ID.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param expression  The select expression to filter the specified table.  For
 *                    details see <a href="../../concepts/expressions.html"
 *                    target="_top">concepts</a>.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::filter_collection_name: Name of a
 *                 collection which is to contain the newly created view,
 *                 otherwise the view will be a top-level table. If the
 *                 collection does not allow duplicate types and it contains a
 *                 table of the same type as the given one, then this table
 *                 creation request will fail.
 *                         <li> gpudb::filter_ttl: Sets the TTL of the view
 *                 specified in @a viewName. The value must be the desired TTL
 *                 in minutes.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterResponse filter( const std::string& tableName,
                       const std::string& viewName,
                       const std::string& expression,
                       const std::map<std::string, std::string>& options ) const;

/**
 * Filters data based on the specified expression.  The results are stored in a
 * result set with the given @a viewName.
 * <p>
 * For details see <a href="../../concepts/expressions.html"
 * target="_top">concepts</a>.
 * <p>
 * The response message contains the number of points for which the expression
 * evaluated to be true, which is equivalent to the size of the result view.
 * 
 * @param tableName  Name of the table to filter.  This may be the ID of a
 *                   collection, table or a result set (for chaining queries).
 *                   Collections may be filtered only if all tables within the
 *                   collection have the same type ID.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param expression  The select expression to filter the specified table.  For
 *                    details see <a href="../../concepts/expressions.html"
 *                    target="_top">concepts</a>.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::filter_collection_name: Name of a
 *                 collection which is to contain the newly created view,
 *                 otherwise the view will be a top-level table. If the
 *                 collection does not allow duplicate types and it contains a
 *                 table of the same type as the given one, then this table
 *                 creation request will fail.
 *                         <li> gpudb::filter_ttl: Sets the TTL of the view
 *                 specified in @a viewName. The value must be the desired TTL
 *                 in minutes.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterResponse& filter( const std::string& tableName,
                        const std::string& viewName,
                        const std::string& expression,
                        const std::map<std::string, std::string>& options,
                        FilterResponse& response_ ) const;

/**
 * Calculates which objects from a table are within a named area of interest
 * (NAI/polygon). The operation is synchronous, meaning that a response will
 * not be returned until all the matching objects are fully available. The
 * response payload provides the count of the resulting set. A new resultant
 * set (view) which satisfies the input NAI restriction specification is
 * created with the name @a viewName passed in as part of the input.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByAreaResponse filterByArea( const FilterByAreaRequest& request_ ) const;

/**
 * Calculates which objects from a table are within a named area of interest
 * (NAI/polygon). The operation is synchronous, meaning that a response will
 * not be returned until all the matching objects are fully available. The
 * response payload provides the count of the resulting set. A new resultant
 * set (view) which satisfies the input NAI restriction specification is
 * created with the name @a viewName passed in as part of the input.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByAreaResponse& filterByArea( const FilterByAreaRequest& request_,
                                    FilterByAreaResponse& response_ ) const;

/**
 * Calculates which objects from a table are within a named area of interest
 * (NAI/polygon). The operation is synchronous, meaning that a response will
 * not be returned until all the matching objects are fully available. The
 * response payload provides the count of the resulting set. A new resultant
 * set (view) which satisfies the input NAI restriction specification is
 * created with the name @a viewName passed in as part of the input.
 * 
 * @param tableName  Name of the table to filter.  This may be the name of a
 *                   collection, a table or a view (when chaining queries).
 *                   Collections may be filtered only if all tables within the
 *                   collection have the same type ID.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param xColumnName  Name of the column containing the x values to be
 *                     filtered.
 * @param xVector  List of x coordinates of the vertices of the polygon
 *                 representing the area to be filtered.
 * @param yColumnName  Name of the column containing the y values to be
 *                     filtered.
 * @param yVector  List of y coordinates of the vertices of the polygon
 *                 representing the area to be filtered.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByAreaResponse filterByArea( const std::string& tableName,
                                   const std::string& viewName,
                                   const std::string& xColumnName,
                                   const std::vector<double>& xVector,
                                   const std::string& yColumnName,
                                   const std::vector<double>& yVector,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which objects from a table are within a named area of interest
 * (NAI/polygon). The operation is synchronous, meaning that a response will
 * not be returned until all the matching objects are fully available. The
 * response payload provides the count of the resulting set. A new resultant
 * set (view) which satisfies the input NAI restriction specification is
 * created with the name @a viewName passed in as part of the input.
 * 
 * @param tableName  Name of the table to filter.  This may be the name of a
 *                   collection, a table or a view (when chaining queries).
 *                   Collections may be filtered only if all tables within the
 *                   collection have the same type ID.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param xColumnName  Name of the column containing the x values to be
 *                     filtered.
 * @param xVector  List of x coordinates of the vertices of the polygon
 *                 representing the area to be filtered.
 * @param yColumnName  Name of the column containing the y values to be
 *                     filtered.
 * @param yVector  List of y coordinates of the vertices of the polygon
 *                 representing the area to be filtered.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByAreaResponse& filterByArea( const std::string& tableName,
                                    const std::string& viewName,
                                    const std::string& xColumnName,
                                    const std::vector<double>& xVector,
                                    const std::string& yColumnName,
                                    const std::vector<double>& yVector,
                                    const std::map<std::string, std::string>& options,
                                    FilterByAreaResponse& response_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a named
 * area of interest (NAI/polygon). The operation is synchronous, meaning that a
 * response will not be returned until all the matching objects are fully
 * available. The response payload provides the count of the resulting set. A
 * new resultant set (view) which satisfies the input NAI restriction
 * specification is created with the name @a viewName passed in as part of the
 * input.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByAreaGeometryResponse filterByAreaGeometry( const FilterByAreaGeometryRequest& request_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a named
 * area of interest (NAI/polygon). The operation is synchronous, meaning that a
 * response will not be returned until all the matching objects are fully
 * available. The response payload provides the count of the resulting set. A
 * new resultant set (view) which satisfies the input NAI restriction
 * specification is created with the name @a viewName passed in as part of the
 * input.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByAreaGeometryResponse& filterByAreaGeometry( const FilterByAreaGeometryRequest& request_,
                                                    FilterByAreaGeometryResponse& response_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a named
 * area of interest (NAI/polygon). The operation is synchronous, meaning that a
 * response will not be returned until all the matching objects are fully
 * available. The response payload provides the count of the resulting set. A
 * new resultant set (view) which satisfies the input NAI restriction
 * specification is created with the name @a viewName passed in as part of the
 * input.
 * 
 * @param tableName  Name of the table to filter.  This may be the name of a
 *                   collection, a table or a view (when chaining queries).
 *                   Collections may be filtered only if all tables within the
 *                   collection have the same type ID.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Must not be an already existing
 *                  collection, table or view.
 * @param columnName  Name of the geospatial geometry column to be filtered.
 * @param xVector  List of x coordinates of the vertices of the polygon
 *                 representing the area to be filtered.
 * @param yVector  List of y coordinates of the vertices of the polygon
 *                 representing the area to be filtered.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByAreaGeometryResponse filterByAreaGeometry( const std::string& tableName,
                                                   const std::string& viewName,
                                                   const std::string& columnName,
                                                   const std::vector<double>& xVector,
                                                   const std::vector<double>& yVector,
                                                   const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a named
 * area of interest (NAI/polygon). The operation is synchronous, meaning that a
 * response will not be returned until all the matching objects are fully
 * available. The response payload provides the count of the resulting set. A
 * new resultant set (view) which satisfies the input NAI restriction
 * specification is created with the name @a viewName passed in as part of the
 * input.
 * 
 * @param tableName  Name of the table to filter.  This may be the name of a
 *                   collection, a table or a view (when chaining queries).
 *                   Collections may be filtered only if all tables within the
 *                   collection have the same type ID.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Must not be an already existing
 *                  collection, table or view.
 * @param columnName  Name of the geospatial geometry column to be filtered.
 * @param xVector  List of x coordinates of the vertices of the polygon
 *                 representing the area to be filtered.
 * @param yVector  List of y coordinates of the vertices of the polygon
 *                 representing the area to be filtered.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByAreaGeometryResponse& filterByAreaGeometry( const std::string& tableName,
                                                    const std::string& viewName,
                                                    const std::string& columnName,
                                                    const std::vector<double>& xVector,
                                                    const std::vector<double>& yVector,
                                                    const std::map<std::string, std::string>& options,
                                                    FilterByAreaGeometryResponse& response_ ) const;

/**
 * Calculates how many objects within the given table lie in a rectangular box.
 * The operation is synchronous, meaning that a response will not be returned
 * until all the objects are fully available. The response payload provides the
 * count of the resulting set. A new resultant set which satisfies the input
 * NAI restriction specification is also created when a @a viewName is passed
 * in as part of the input payload.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByBoxResponse filterByBox( const FilterByBoxRequest& request_ ) const;

/**
 * Calculates how many objects within the given table lie in a rectangular box.
 * The operation is synchronous, meaning that a response will not be returned
 * until all the objects are fully available. The response payload provides the
 * count of the resulting set. A new resultant set which satisfies the input
 * NAI restriction specification is also created when a @a viewName is passed
 * in as part of the input payload.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByBoxResponse& filterByBox( const FilterByBoxRequest& request_,
                                  FilterByBoxResponse& response_ ) const;

/**
 * Calculates how many objects within the given table lie in a rectangular box.
 * The operation is synchronous, meaning that a response will not be returned
 * until all the objects are fully available. The response payload provides the
 * count of the resulting set. A new resultant set which satisfies the input
 * NAI restriction specification is also created when a @a viewName is passed
 * in as part of the input payload.
 * 
 * @param tableName  Name of the table on which the bounding box operation will
 *                   be performed. Must be an existing table.
 * @param viewName  Optional name of the result view that will be created
 *                  containing the results of the query. Has the same naming
 *                  restrictions as <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param xColumnName  Name of the column on which to perform the bounding box
 *                     query. Must be a valid numeric column.
 * @param minX  Lower bound for the column chosen by @a xColumnName.  Must be
 *              less than or equal to @a maxX.
 * @param maxX  Upper bound for @a xColumnName.  Must be greater than or equal
 *              to @a minX.
 * @param yColumnName  Name of a column on which to perform the bounding box
 *                     query. Must be a valid numeric column.
 * @param minY  Lower bound for @a yColumnName. Must be less than or equal to
 *              @a maxY.
 * @param maxY  Upper bound for @a yColumnName. Must be greater than or equal
 *              to @a minY.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByBoxResponse filterByBox( const std::string& tableName,
                                 const std::string& viewName,
                                 const std::string& xColumnName,
                                 const double minX,
                                 const double maxX,
                                 const std::string& yColumnName,
                                 const double minY,
                                 const double maxY,
                                 const std::map<std::string, std::string>& options ) const;

/**
 * Calculates how many objects within the given table lie in a rectangular box.
 * The operation is synchronous, meaning that a response will not be returned
 * until all the objects are fully available. The response payload provides the
 * count of the resulting set. A new resultant set which satisfies the input
 * NAI restriction specification is also created when a @a viewName is passed
 * in as part of the input payload.
 * 
 * @param tableName  Name of the table on which the bounding box operation will
 *                   be performed. Must be an existing table.
 * @param viewName  Optional name of the result view that will be created
 *                  containing the results of the query. Has the same naming
 *                  restrictions as <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param xColumnName  Name of the column on which to perform the bounding box
 *                     query. Must be a valid numeric column.
 * @param minX  Lower bound for the column chosen by @a xColumnName.  Must be
 *              less than or equal to @a maxX.
 * @param maxX  Upper bound for @a xColumnName.  Must be greater than or equal
 *              to @a minX.
 * @param yColumnName  Name of a column on which to perform the bounding box
 *                     query. Must be a valid numeric column.
 * @param minY  Lower bound for @a yColumnName. Must be less than or equal to
 *              @a maxY.
 * @param maxY  Upper bound for @a yColumnName. Must be greater than or equal
 *              to @a minY.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByBoxResponse& filterByBox( const std::string& tableName,
                                  const std::string& viewName,
                                  const std::string& xColumnName,
                                  const double minX,
                                  const double maxX,
                                  const std::string& yColumnName,
                                  const double minY,
                                  const double maxY,
                                  const std::map<std::string, std::string>& options,
                                  FilterByBoxResponse& response_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a
 * rectangular box. The operation is synchronous, meaning that a response will
 * not be returned until all the objects are fully available. The response
 * payload provides the count of the resulting set. A new resultant set which
 * satisfies the input NAI restriction specification is also created when a @a
 * viewName is passed in as part of the input payload.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByBoxGeometryResponse filterByBoxGeometry( const FilterByBoxGeometryRequest& request_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a
 * rectangular box. The operation is synchronous, meaning that a response will
 * not be returned until all the objects are fully available. The response
 * payload provides the count of the resulting set. A new resultant set which
 * satisfies the input NAI restriction specification is also created when a @a
 * viewName is passed in as part of the input payload.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByBoxGeometryResponse& filterByBoxGeometry( const FilterByBoxGeometryRequest& request_,
                                                  FilterByBoxGeometryResponse& response_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a
 * rectangular box. The operation is synchronous, meaning that a response will
 * not be returned until all the objects are fully available. The response
 * payload provides the count of the resulting set. A new resultant set which
 * satisfies the input NAI restriction specification is also created when a @a
 * viewName is passed in as part of the input payload.
 * 
 * @param tableName  Name of the table on which the bounding box operation will
 *                   be performed. Must be an existing table.
 * @param viewName  Optional name of the result view that will be created
 *                  containing the results of the query. Must not be an already
 *                  existing collection, table or view.
 * @param columnName  Name of the geospatial geometry column to be filtered.
 * @param minX  Lower bound for the x-coordinate of the rectangular box.  Must
 *              be less than or equal to @a maxX.
 * @param maxX  Upper bound for the x-coordinate of the rectangular box.  Must
 *              be greater than or equal to @a minX.
 * @param minY  Lower bound for the y-coordinate of the rectangular box. Must
 *              be less than or equal to @a maxY.
 * @param maxY  Upper bound for the y-coordinate of the rectangular box. Must
 *              be greater than or equal to @a minY.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByBoxGeometryResponse filterByBoxGeometry( const std::string& tableName,
                                                 const std::string& viewName,
                                                 const std::string& columnName,
                                                 const double minX,
                                                 const double maxX,
                                                 const double minY,
                                                 const double maxY,
                                                 const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a
 * rectangular box. The operation is synchronous, meaning that a response will
 * not be returned until all the objects are fully available. The response
 * payload provides the count of the resulting set. A new resultant set which
 * satisfies the input NAI restriction specification is also created when a @a
 * viewName is passed in as part of the input payload.
 * 
 * @param tableName  Name of the table on which the bounding box operation will
 *                   be performed. Must be an existing table.
 * @param viewName  Optional name of the result view that will be created
 *                  containing the results of the query. Must not be an already
 *                  existing collection, table or view.
 * @param columnName  Name of the geospatial geometry column to be filtered.
 * @param minX  Lower bound for the x-coordinate of the rectangular box.  Must
 *              be less than or equal to @a maxX.
 * @param maxX  Upper bound for the x-coordinate of the rectangular box.  Must
 *              be greater than or equal to @a minX.
 * @param minY  Lower bound for the y-coordinate of the rectangular box. Must
 *              be less than or equal to @a maxY.
 * @param maxY  Upper bound for the y-coordinate of the rectangular box. Must
 *              be greater than or equal to @a minY.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByBoxGeometryResponse& filterByBoxGeometry( const std::string& tableName,
                                                  const std::string& viewName,
                                                  const std::string& columnName,
                                                  const double minX,
                                                  const double maxX,
                                                  const double minY,
                                                  const double maxY,
                                                  const std::map<std::string, std::string>& options,
                                                  FilterByBoxGeometryResponse& response_ ) const;

/**
 * Applies a geometry filter against a geospatial geometry column in a given
 * table, collection or view. The filtering geometry is provided by @a
 * inputWkt.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByGeometryResponse filterByGeometry( const FilterByGeometryRequest& request_ ) const;

/**
 * Applies a geometry filter against a geospatial geometry column in a given
 * table, collection or view. The filtering geometry is provided by @a
 * inputWkt.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByGeometryResponse& filterByGeometry( const FilterByGeometryRequest& request_,
                                            FilterByGeometryResponse& response_ ) const;

/**
 * Applies a geometry filter against a geospatial geometry column in a given
 * table, collection or view. The filtering geometry is provided by @a
 * inputWkt.
 * 
 * @param tableName  Name of the table on which the filter by geometry will be
 *                   performed.  Must be an existing table, collection or view
 *                   containing a geospatial geometry column.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param columnName  Name of the column to be used in the filter. Must be a
 *                    geospatial geometry column.
 * @param inputWkt  A geometry in WKT format that will be used to filter the
 *                  objects in @a tableName.
 * @param operation  The geometric filtering operation to perform
 *                   <ul>
 *                           <li> gpudb::filter_by_geometry_contains: Matches
 *                   records that contain the given WKT in @a inputWkt, i.e.
 *                   the given WKT is within the bounds of a record's geometry.
 *                           <li> gpudb::filter_by_geometry_crosses: Matches
 *                   records that cross the given WKT.
 *                           <li> gpudb::filter_by_geometry_disjoint: Matches
 *                   records that are disjoint from the given WKT.
 *                           <li> gpudb::filter_by_geometry_equals: Matches
 *                   records that are the same as the given WKT.
 *                           <li> gpudb::filter_by_geometry_intersects: Matches
 *                   records that intersect the given WKT.
 *                           <li> gpudb::filter_by_geometry_overlaps: Matches
 *                   records that overlap the given WKT.
 *                           <li> gpudb::filter_by_geometry_touches: Matches
 *                   records that touch the given WKT.
 *                           <li> gpudb::filter_by_geometry_within: Matches
 *                   records that are within the given WKT.
 *                   </ul>
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByGeometryResponse filterByGeometry( const std::string& tableName,
                                           const std::string& viewName,
                                           const std::string& columnName,
                                           const std::string& inputWkt,
                                           const std::string& operation,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Applies a geometry filter against a geospatial geometry column in a given
 * table, collection or view. The filtering geometry is provided by @a
 * inputWkt.
 * 
 * @param tableName  Name of the table on which the filter by geometry will be
 *                   performed.  Must be an existing table, collection or view
 *                   containing a geospatial geometry column.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param columnName  Name of the column to be used in the filter. Must be a
 *                    geospatial geometry column.
 * @param inputWkt  A geometry in WKT format that will be used to filter the
 *                  objects in @a tableName.
 * @param operation  The geometric filtering operation to perform
 *                   <ul>
 *                           <li> gpudb::filter_by_geometry_contains: Matches
 *                   records that contain the given WKT in @a inputWkt, i.e.
 *                   the given WKT is within the bounds of a record's geometry.
 *                           <li> gpudb::filter_by_geometry_crosses: Matches
 *                   records that cross the given WKT.
 *                           <li> gpudb::filter_by_geometry_disjoint: Matches
 *                   records that are disjoint from the given WKT.
 *                           <li> gpudb::filter_by_geometry_equals: Matches
 *                   records that are the same as the given WKT.
 *                           <li> gpudb::filter_by_geometry_intersects: Matches
 *                   records that intersect the given WKT.
 *                           <li> gpudb::filter_by_geometry_overlaps: Matches
 *                   records that overlap the given WKT.
 *                           <li> gpudb::filter_by_geometry_touches: Matches
 *                   records that touch the given WKT.
 *                           <li> gpudb::filter_by_geometry_within: Matches
 *                   records that are within the given WKT.
 *                   </ul>
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByGeometryResponse& filterByGeometry( const std::string& tableName,
                                            const std::string& viewName,
                                            const std::string& columnName,
                                            const std::string& inputWkt,
                                            const std::string& operation,
                                            const std::map<std::string, std::string>& options,
                                            FilterByGeometryResponse& response_ ) const;

/**
 * Calculates which records from a table have values in the given list for the
 * corresponding column. The operation is synchronous, meaning that a response
 * will not be returned until all the objects are fully available. The response
 * payload provides the count of the resulting set. A new resultant set (view)
 * which satisfies the input filter specification is also created if a @a
 * viewName is passed in as part of the request.
 * <p>
 * For example, if a type definition has the columns 'x' and 'y', then a filter
 * by list query with the column map {"x":["10.1", "2.3"], "y":["0.0", "-31.5",
 * "42.0"]} will return the count of all data points whose x and y values match
 * both in the respective x- and y-lists, e.g., "x = 10.1 and y = 0.0", "x =
 * 2.3 and y = -31.5", etc. However, a record with "x = 10.1 and y = -31.5" or
 * "x = 2.3 and y = 0.0" would not be returned because the values in the given
 * lists do not correspond.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByListResponse filterByList( const FilterByListRequest& request_ ) const;

/**
 * Calculates which records from a table have values in the given list for the
 * corresponding column. The operation is synchronous, meaning that a response
 * will not be returned until all the objects are fully available. The response
 * payload provides the count of the resulting set. A new resultant set (view)
 * which satisfies the input filter specification is also created if a @a
 * viewName is passed in as part of the request.
 * <p>
 * For example, if a type definition has the columns 'x' and 'y', then a filter
 * by list query with the column map {"x":["10.1", "2.3"], "y":["0.0", "-31.5",
 * "42.0"]} will return the count of all data points whose x and y values match
 * both in the respective x- and y-lists, e.g., "x = 10.1 and y = 0.0", "x =
 * 2.3 and y = -31.5", etc. However, a record with "x = 10.1 and y = -31.5" or
 * "x = 2.3 and y = 0.0" would not be returned because the values in the given
 * lists do not correspond.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByListResponse& filterByList( const FilterByListRequest& request_,
                                    FilterByListResponse& response_ ) const;

/**
 * Calculates which records from a table have values in the given list for the
 * corresponding column. The operation is synchronous, meaning that a response
 * will not be returned until all the objects are fully available. The response
 * payload provides the count of the resulting set. A new resultant set (view)
 * which satisfies the input filter specification is also created if a @a
 * viewName is passed in as part of the request.
 * <p>
 * For example, if a type definition has the columns 'x' and 'y', then a filter
 * by list query with the column map {"x":["10.1", "2.3"], "y":["0.0", "-31.5",
 * "42.0"]} will return the count of all data points whose x and y values match
 * both in the respective x- and y-lists, e.g., "x = 10.1 and y = 0.0", "x =
 * 2.3 and y = -31.5", etc. However, a record with "x = 10.1 and y = -31.5" or
 * "x = 2.3 and y = 0.0" would not be returned because the values in the given
 * lists do not correspond.
 * 
 * @param tableName  Name of the table to filter.  This may be the ID of a
 *                   collection, table or a result set (for chaining queries).
 *                   Collections may be filtered only if all tables within the
 *                   collection have the same type ID.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param columnValuesMap  List of values for the corresponding column in the
 *                         table
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::filter_by_list_filter_mode: String
 *                 indicating the filter mode, either 'in_list' or
 *                 'not_in_list'.
 *                 <ul>
 *                         <li> gpudb::filter_by_list_in_list: The filter will
 *                 match all items that are in the provided list(s).
 *                         <li> gpudb::filter_by_list_not_in_list: The filter
 *                 will match all items that are not in the provided list(s).
 *                 </ul>
 *                 The default value is gpudb::filter_by_list_in_list.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByListResponse filterByList( const std::string& tableName,
                                   const std::string& viewName,
                                   const std::map<std::string, std::vector<std::string> >& columnValuesMap,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which records from a table have values in the given list for the
 * corresponding column. The operation is synchronous, meaning that a response
 * will not be returned until all the objects are fully available. The response
 * payload provides the count of the resulting set. A new resultant set (view)
 * which satisfies the input filter specification is also created if a @a
 * viewName is passed in as part of the request.
 * <p>
 * For example, if a type definition has the columns 'x' and 'y', then a filter
 * by list query with the column map {"x":["10.1", "2.3"], "y":["0.0", "-31.5",
 * "42.0"]} will return the count of all data points whose x and y values match
 * both in the respective x- and y-lists, e.g., "x = 10.1 and y = 0.0", "x =
 * 2.3 and y = -31.5", etc. However, a record with "x = 10.1 and y = -31.5" or
 * "x = 2.3 and y = 0.0" would not be returned because the values in the given
 * lists do not correspond.
 * 
 * @param tableName  Name of the table to filter.  This may be the ID of a
 *                   collection, table or a result set (for chaining queries).
 *                   Collections may be filtered only if all tables within the
 *                   collection have the same type ID.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param columnValuesMap  List of values for the corresponding column in the
 *                         table
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::filter_by_list_filter_mode: String
 *                 indicating the filter mode, either 'in_list' or
 *                 'not_in_list'.
 *                 <ul>
 *                         <li> gpudb::filter_by_list_in_list: The filter will
 *                 match all items that are in the provided list(s).
 *                         <li> gpudb::filter_by_list_not_in_list: The filter
 *                 will match all items that are not in the provided list(s).
 *                 </ul>
 *                 The default value is gpudb::filter_by_list_in_list.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByListResponse& filterByList( const std::string& tableName,
                                    const std::string& viewName,
                                    const std::map<std::string, std::vector<std::string> >& columnValuesMap,
                                    const std::map<std::string, std::string>& options,
                                    FilterByListResponse& response_ ) const;

/**
 * Calculates which objects from a table lie within a circle with the given
 * radius and center point (i.e. circular NAI). The operation is synchronous,
 * meaning that a response will not be returned until all the objects are fully
 * available. The response payload provides the count of the resulting set. A
 * new resultant set (view) which satisfies the input circular NAI restriction
 * specification is also created if a @a viewName is passed in as part of the
 * request.
 * <p>
 * For track data, all track points that lie within the circle plus one point
 * on either side of the circle (if the track goes beyond the circle) will be
 * included in the result.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByRadiusResponse filterByRadius( const FilterByRadiusRequest& request_ ) const;

/**
 * Calculates which objects from a table lie within a circle with the given
 * radius and center point (i.e. circular NAI). The operation is synchronous,
 * meaning that a response will not be returned until all the objects are fully
 * available. The response payload provides the count of the resulting set. A
 * new resultant set (view) which satisfies the input circular NAI restriction
 * specification is also created if a @a viewName is passed in as part of the
 * request.
 * <p>
 * For track data, all track points that lie within the circle plus one point
 * on either side of the circle (if the track goes beyond the circle) will be
 * included in the result.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByRadiusResponse& filterByRadius( const FilterByRadiusRequest& request_,
                                        FilterByRadiusResponse& response_ ) const;

/**
 * Calculates which objects from a table lie within a circle with the given
 * radius and center point (i.e. circular NAI). The operation is synchronous,
 * meaning that a response will not be returned until all the objects are fully
 * available. The response payload provides the count of the resulting set. A
 * new resultant set (view) which satisfies the input circular NAI restriction
 * specification is also created if a @a viewName is passed in as part of the
 * request.
 * <p>
 * For track data, all track points that lie within the circle plus one point
 * on either side of the circle (if the track goes beyond the circle) will be
 * included in the result.
 * 
 * @param tableName  Name of the table on which the filter by radius operation
 *                   will be performed.  Must be an existing table.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param xColumnName  Name of the column to be used for the x-coordinate (the
 *                     longitude) of the center.
 * @param xCenter  Value of the longitude of the center. Must be within
 *                 [-180.0, 180.0].  The minimum allowed value is -180. The
 *                 maximum allowed value is 180.
 * @param yColumnName  Name of the column to be used for the y-coordinate-the
 *                     latitude-of the center.
 * @param yCenter  Value of the latitude of the center. Must be within [-90.0,
 *                 90.0].  The minimum allowed value is -90. The maximum
 *                 allowed value is 90.
 * @param radius  The radius of the circle within which the search will be
 *                performed. Must be a non-zero positive value. It is in
 *                meters; so, for example, a value of '42000' means 42 km.  The
 *                minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByRadiusResponse filterByRadius( const std::string& tableName,
                                       const std::string& viewName,
                                       const std::string& xColumnName,
                                       const double xCenter,
                                       const std::string& yColumnName,
                                       const double yCenter,
                                       const double radius,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which objects from a table lie within a circle with the given
 * radius and center point (i.e. circular NAI). The operation is synchronous,
 * meaning that a response will not be returned until all the objects are fully
 * available. The response payload provides the count of the resulting set. A
 * new resultant set (view) which satisfies the input circular NAI restriction
 * specification is also created if a @a viewName is passed in as part of the
 * request.
 * <p>
 * For track data, all track points that lie within the circle plus one point
 * on either side of the circle (if the track goes beyond the circle) will be
 * included in the result.
 * 
 * @param tableName  Name of the table on which the filter by radius operation
 *                   will be performed.  Must be an existing table.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param xColumnName  Name of the column to be used for the x-coordinate (the
 *                     longitude) of the center.
 * @param xCenter  Value of the longitude of the center. Must be within
 *                 [-180.0, 180.0].  The minimum allowed value is -180. The
 *                 maximum allowed value is 180.
 * @param yColumnName  Name of the column to be used for the y-coordinate-the
 *                     latitude-of the center.
 * @param yCenter  Value of the latitude of the center. Must be within [-90.0,
 *                 90.0].  The minimum allowed value is -90. The maximum
 *                 allowed value is 90.
 * @param radius  The radius of the circle within which the search will be
 *                performed. Must be a non-zero positive value. It is in
 *                meters; so, for example, a value of '42000' means 42 km.  The
 *                minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByRadiusResponse& filterByRadius( const std::string& tableName,
                                        const std::string& viewName,
                                        const std::string& xColumnName,
                                        const double xCenter,
                                        const std::string& yColumnName,
                                        const double yCenter,
                                        const double radius,
                                        const std::map<std::string, std::string>& options,
                                        FilterByRadiusResponse& response_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a circle
 * with the given radius and center point (i.e. circular NAI). The operation is
 * synchronous, meaning that a response will not be returned until all the
 * objects are fully available. The response payload provides the count of the
 * resulting set. A new resultant set (view) which satisfies the input circular
 * NAI restriction specification is also created if a @a viewName is passed in
 * as part of the request.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByRadiusGeometryResponse filterByRadiusGeometry( const FilterByRadiusGeometryRequest& request_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a circle
 * with the given radius and center point (i.e. circular NAI). The operation is
 * synchronous, meaning that a response will not be returned until all the
 * objects are fully available. The response payload provides the count of the
 * resulting set. A new resultant set (view) which satisfies the input circular
 * NAI restriction specification is also created if a @a viewName is passed in
 * as part of the request.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByRadiusGeometryResponse& filterByRadiusGeometry( const FilterByRadiusGeometryRequest& request_,
                                                        FilterByRadiusGeometryResponse& response_ ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a circle
 * with the given radius and center point (i.e. circular NAI). The operation is
 * synchronous, meaning that a response will not be returned until all the
 * objects are fully available. The response payload provides the count of the
 * resulting set. A new resultant set (view) which satisfies the input circular
 * NAI restriction specification is also created if a @a viewName is passed in
 * as part of the request.
 * 
 * @param tableName  Name of the table on which the filter by radius operation
 *                   will be performed.  Must be an existing table.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Must not be an already existing
 *                  collection, table or view.
 * @param columnName  Name of the geospatial geometry column to be filtered.
 * @param xCenter  Value of the longitude of the center. Must be within
 *                 [-180.0, 180.0].  The minimum allowed value is -180. The
 *                 maximum allowed value is 180.
 * @param yCenter  Value of the latitude of the center. Must be within [-90.0,
 *                 90.0].  The minimum allowed value is -90. The maximum
 *                 allowed value is 90.
 * @param radius  The radius of the circle within which the search will be
 *                performed. Must be a non-zero positive value. It is in
 *                meters; so, for example, a value of '42000' means 42 km.  The
 *                minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByRadiusGeometryResponse filterByRadiusGeometry( const std::string& tableName,
                                                       const std::string& viewName,
                                                       const std::string& columnName,
                                                       const double xCenter,
                                                       const double yCenter,
                                                       const double radius,
                                                       const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which geospatial geometry objects from a table intersect a circle
 * with the given radius and center point (i.e. circular NAI). The operation is
 * synchronous, meaning that a response will not be returned until all the
 * objects are fully available. The response payload provides the count of the
 * resulting set. A new resultant set (view) which satisfies the input circular
 * NAI restriction specification is also created if a @a viewName is passed in
 * as part of the request.
 * 
 * @param tableName  Name of the table on which the filter by radius operation
 *                   will be performed.  Must be an existing table.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Must not be an already existing
 *                  collection, table or view.
 * @param columnName  Name of the geospatial geometry column to be filtered.
 * @param xCenter  Value of the longitude of the center. Must be within
 *                 [-180.0, 180.0].  The minimum allowed value is -180. The
 *                 maximum allowed value is 180.
 * @param yCenter  Value of the latitude of the center. Must be within [-90.0,
 *                 90.0].  The minimum allowed value is -90. The maximum
 *                 allowed value is 90.
 * @param radius  The radius of the circle within which the search will be
 *                performed. Must be a non-zero positive value. It is in
 *                meters; so, for example, a value of '42000' means 42 km.  The
 *                minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByRadiusGeometryResponse& filterByRadiusGeometry( const std::string& tableName,
                                                        const std::string& viewName,
                                                        const std::string& columnName,
                                                        const double xCenter,
                                                        const double yCenter,
                                                        const double radius,
                                                        const std::map<std::string, std::string>& options,
                                                        FilterByRadiusGeometryResponse& response_ ) const;

/**
 * Calculates which objects from a table have a column that is within the given
 * bounds. An object from the table identified by @a tableName is added to the
 * view @a viewName if its column is within [@a lowerBound, @a upperBound]
 * (inclusive). The operation is synchronous. The response provides a count of
 * the number of objects which passed the bound filter.  Although this
 * functionality can also be accomplished with the standard filter function, it
 * is more efficient.
 * <p>
 * For track objects, the count reflects how many points fall within the given
 * bounds (which may not include all the track points of any given track).
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByRangeResponse filterByRange( const FilterByRangeRequest& request_ ) const;

/**
 * Calculates which objects from a table have a column that is within the given
 * bounds. An object from the table identified by @a tableName is added to the
 * view @a viewName if its column is within [@a lowerBound, @a upperBound]
 * (inclusive). The operation is synchronous. The response provides a count of
 * the number of objects which passed the bound filter.  Although this
 * functionality can also be accomplished with the standard filter function, it
 * is more efficient.
 * <p>
 * For track objects, the count reflects how many points fall within the given
 * bounds (which may not include all the track points of any given track).
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByRangeResponse& filterByRange( const FilterByRangeRequest& request_,
                                      FilterByRangeResponse& response_ ) const;

/**
 * Calculates which objects from a table have a column that is within the given
 * bounds. An object from the table identified by @a tableName is added to the
 * view @a viewName if its column is within [@a lowerBound, @a upperBound]
 * (inclusive). The operation is synchronous. The response provides a count of
 * the number of objects which passed the bound filter.  Although this
 * functionality can also be accomplished with the standard filter function, it
 * is more efficient.
 * <p>
 * For track objects, the count reflects how many points fall within the given
 * bounds (which may not include all the track points of any given track).
 * 
 * @param tableName  Name of the table on which the filter by range operation
 *                   will be performed.  Must be an existing table.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param columnName  Name of a column on which the operation would be applied.
 * @param lowerBound  Value of the lower bound (inclusive).
 * @param upperBound  Value of the upper bound (inclusive).
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByRangeResponse filterByRange( const std::string& tableName,
                                     const std::string& viewName,
                                     const std::string& columnName,
                                     const double lowerBound,
                                     const double upperBound,
                                     const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which objects from a table have a column that is within the given
 * bounds. An object from the table identified by @a tableName is added to the
 * view @a viewName if its column is within [@a lowerBound, @a upperBound]
 * (inclusive). The operation is synchronous. The response provides a count of
 * the number of objects which passed the bound filter.  Although this
 * functionality can also be accomplished with the standard filter function, it
 * is more efficient.
 * <p>
 * For track objects, the count reflects how many points fall within the given
 * bounds (which may not include all the track points of any given track).
 * 
 * @param tableName  Name of the table on which the filter by range operation
 *                   will be performed.  Must be an existing table.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param columnName  Name of a column on which the operation would be applied.
 * @param lowerBound  Value of the lower bound (inclusive).
 * @param upperBound  Value of the upper bound (inclusive).
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByRangeResponse& filterByRange( const std::string& tableName,
                                      const std::string& viewName,
                                      const std::string& columnName,
                                      const double lowerBound,
                                      const double upperBound,
                                      const std::map<std::string, std::string>& options,
                                      FilterByRangeResponse& response_ ) const;

/**
 * Filters objects matching all points of the given track (works only on track
 * type data).  It allows users to specify a particular track to find all other
 * points in the table that fall within specified ranges-spatial and
 * temporal-of all points of the given track. Additionally, the user can
 * specify another track to see if the two intersect (or go close to each other
 * within the specified ranges). The user also has the flexibility of using
 * different metrics for the spatial distance calculation: Euclidean (flat
 * geometry) or Great Circle (spherical geometry to approximate the Earth's
 * surface distances). The filtered points are stored in a newly created result
 * set. The return value of the function is the number of points in the
 * resultant set (view).
 * <p>
 * This operation is synchronous, meaning that a response will not be returned
 * until all the objects are fully available.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterBySeriesResponse filterBySeries( const FilterBySeriesRequest& request_ ) const;

/**
 * Filters objects matching all points of the given track (works only on track
 * type data).  It allows users to specify a particular track to find all other
 * points in the table that fall within specified ranges-spatial and
 * temporal-of all points of the given track. Additionally, the user can
 * specify another track to see if the two intersect (or go close to each other
 * within the specified ranges). The user also has the flexibility of using
 * different metrics for the spatial distance calculation: Euclidean (flat
 * geometry) or Great Circle (spherical geometry to approximate the Earth's
 * surface distances). The filtered points are stored in a newly created result
 * set. The return value of the function is the number of points in the
 * resultant set (view).
 * <p>
 * This operation is synchronous, meaning that a response will not be returned
 * until all the objects are fully available.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterBySeriesResponse& filterBySeries( const FilterBySeriesRequest& request_,
                                        FilterBySeriesResponse& response_ ) const;

/**
 * Filters objects matching all points of the given track (works only on track
 * type data).  It allows users to specify a particular track to find all other
 * points in the table that fall within specified ranges-spatial and
 * temporal-of all points of the given track. Additionally, the user can
 * specify another track to see if the two intersect (or go close to each other
 * within the specified ranges). The user also has the flexibility of using
 * different metrics for the spatial distance calculation: Euclidean (flat
 * geometry) or Great Circle (spherical geometry to approximate the Earth's
 * surface distances). The filtered points are stored in a newly created result
 * set. The return value of the function is the number of points in the
 * resultant set (view).
 * <p>
 * This operation is synchronous, meaning that a response will not be returned
 * until all the objects are fully available.
 * 
 * @param tableName  Name of the table on which the filter by track operation
 *                   will be performed. Must be a currently existing table with
 *                   track semantic type.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param trackId  The ID of the track which will act as the filtering points.
 *                 Must be an existing track within the given table.
 * @param targetTrackIds  Up to one track ID to intersect with the "filter"
 *                        track. If any provided, it must be an valid track ID
 *                        within the given set.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::filter_by_series_spatial_radius: A
 *                 positive number passed as a string representing the radius
 *                 of the search area centered around each track point's
 *                 geospatial coordinates. The value is interpreted in meters.
 *                 Required parameter.
 *                         <li> gpudb::filter_by_series_time_radius: A positive
 *                 number passed as a string representing the maximum allowable
 *                 time difference between the timestamps of a filtered object
 *                 and the given track's points. The value is interpreted in
 *                 seconds. Required parameter.
 *                         <li>
 *                 gpudb::filter_by_series_spatial_distance_metric: A string
 *                 representing the coordinate system to use for the spatial
 *                 search criteria. Acceptable values are 'euclidean' and
 *                 'great_circle'. Optional parameter; default is 'euclidean'.
 *                 <ul>
 *                         <li> gpudb::filter_by_series_euclidean
 *                         <li> gpudb::filter_by_series_great_circle
 *                 </ul>
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterBySeriesResponse filterBySeries( const std::string& tableName,
                                       const std::string& viewName,
                                       const std::string& trackId,
                                       const std::vector<std::string>& targetTrackIds,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Filters objects matching all points of the given track (works only on track
 * type data).  It allows users to specify a particular track to find all other
 * points in the table that fall within specified ranges-spatial and
 * temporal-of all points of the given track. Additionally, the user can
 * specify another track to see if the two intersect (or go close to each other
 * within the specified ranges). The user also has the flexibility of using
 * different metrics for the spatial distance calculation: Euclidean (flat
 * geometry) or Great Circle (spherical geometry to approximate the Earth's
 * surface distances). The filtered points are stored in a newly created result
 * set. The return value of the function is the number of points in the
 * resultant set (view).
 * <p>
 * This operation is synchronous, meaning that a response will not be returned
 * until all the objects are fully available.
 * 
 * @param tableName  Name of the table on which the filter by track operation
 *                   will be performed. Must be a currently existing table with
 *                   track semantic type.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param trackId  The ID of the track which will act as the filtering points.
 *                 Must be an existing track within the given table.
 * @param targetTrackIds  Up to one track ID to intersect with the "filter"
 *                        track. If any provided, it must be an valid track ID
 *                        within the given set.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::filter_by_series_spatial_radius: A
 *                 positive number passed as a string representing the radius
 *                 of the search area centered around each track point's
 *                 geospatial coordinates. The value is interpreted in meters.
 *                 Required parameter.
 *                         <li> gpudb::filter_by_series_time_radius: A positive
 *                 number passed as a string representing the maximum allowable
 *                 time difference between the timestamps of a filtered object
 *                 and the given track's points. The value is interpreted in
 *                 seconds. Required parameter.
 *                         <li>
 *                 gpudb::filter_by_series_spatial_distance_metric: A string
 *                 representing the coordinate system to use for the spatial
 *                 search criteria. Acceptable values are 'euclidean' and
 *                 'great_circle'. Optional parameter; default is 'euclidean'.
 *                 <ul>
 *                         <li> gpudb::filter_by_series_euclidean
 *                         <li> gpudb::filter_by_series_great_circle
 *                 </ul>
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterBySeriesResponse& filterBySeries( const std::string& tableName,
                                        const std::string& viewName,
                                        const std::string& trackId,
                                        const std::vector<std::string>& targetTrackIds,
                                        const std::map<std::string, std::string>& options,
                                        FilterBySeriesResponse& response_ ) const;

/**
 * Calculates which objects from a table, collection, or view match a string
 * expression for the given string columns. The options 'case_sensitive' can be
 * used to modify the behavior for all modes except 'search'. For 'search' mode
 * details and limitations, see <a href="../../concepts/full_text_search.html"
 * target="_top">Full Text Search</a>.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByStringResponse filterByString( const FilterByStringRequest& request_ ) const;

/**
 * Calculates which objects from a table, collection, or view match a string
 * expression for the given string columns. The options 'case_sensitive' can be
 * used to modify the behavior for all modes except 'search'. For 'search' mode
 * details and limitations, see <a href="../../concepts/full_text_search.html"
 * target="_top">Full Text Search</a>.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByStringResponse& filterByString( const FilterByStringRequest& request_,
                                        FilterByStringResponse& response_ ) const;

/**
 * Calculates which objects from a table, collection, or view match a string
 * expression for the given string columns. The options 'case_sensitive' can be
 * used to modify the behavior for all modes except 'search'. For 'search' mode
 * details and limitations, see <a href="../../concepts/full_text_search.html"
 * target="_top">Full Text Search</a>.
 * 
 * @param tableName  Name of the table on which the filter operation will be
 *                   performed.  Must be an existing table, collection or view.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param expression  The expression with which to filter the table.
 * @param mode  The string filtering mode to apply. See below for details.
 *              <ul>
 *                      <li> gpudb::filter_by_string_search: Full text search
 *              query with wildcards and boolean operators. Note that for this
 *              mode, no column can be specified in @a columnNames; all string
 *              columns of the table that have text search enabled will be
 *              searched.
 *                      <li> gpudb::filter_by_string_equals: Exact whole-string
 *              match (accelerated).
 *                      <li> gpudb::filter_by_string_contains: Partial
 *              substring match (not accelerated).  If the column is a string
 *              type (non-charN) and the number of records is too large, it
 *              will return 0.
 *                      <li> gpudb::filter_by_string_starts_with: Strings that
 *              start with the given expression (not accelerated). If the
 *              column is a string type (non-charN) and the number of records
 *              is too large, it will return 0.
 *                      <li> gpudb::filter_by_string_regex: Full regular
 *              expression search (not accelerated). If the column is a string
 *              type (non-charN) and the number of records is too large, it
 *              will return 0.
 *              </ul>
 * @param columnNames  List of columns on which to apply the filter. Ignored
 *                     for 'search' mode.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::filter_by_string_case_sensitive: If
 *                 'false' then string filtering will ignore case. Does not
 *                 apply to 'search' mode.
 *                 <ul>
 *                         <li> gpudb::filter_by_string_true
 *                         <li> gpudb::filter_by_string_false
 *                 </ul>
 *                 The default value is gpudb::filter_by_string_true.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByStringResponse filterByString( const std::string& tableName,
                                       const std::string& viewName,
                                       const std::string& expression,
                                       const std::string& mode,
                                       const std::vector<std::string>& columnNames,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which objects from a table, collection, or view match a string
 * expression for the given string columns. The options 'case_sensitive' can be
 * used to modify the behavior for all modes except 'search'. For 'search' mode
 * details and limitations, see <a href="../../concepts/full_text_search.html"
 * target="_top">Full Text Search</a>.
 * 
 * @param tableName  Name of the table on which the filter operation will be
 *                   performed.  Must be an existing table, collection or view.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param expression  The expression with which to filter the table.
 * @param mode  The string filtering mode to apply. See below for details.
 *              <ul>
 *                      <li> gpudb::filter_by_string_search: Full text search
 *              query with wildcards and boolean operators. Note that for this
 *              mode, no column can be specified in @a columnNames; all string
 *              columns of the table that have text search enabled will be
 *              searched.
 *                      <li> gpudb::filter_by_string_equals: Exact whole-string
 *              match (accelerated).
 *                      <li> gpudb::filter_by_string_contains: Partial
 *              substring match (not accelerated).  If the column is a string
 *              type (non-charN) and the number of records is too large, it
 *              will return 0.
 *                      <li> gpudb::filter_by_string_starts_with: Strings that
 *              start with the given expression (not accelerated). If the
 *              column is a string type (non-charN) and the number of records
 *              is too large, it will return 0.
 *                      <li> gpudb::filter_by_string_regex: Full regular
 *              expression search (not accelerated). If the column is a string
 *              type (non-charN) and the number of records is too large, it
 *              will return 0.
 *              </ul>
 * @param columnNames  List of columns on which to apply the filter. Ignored
 *                     for 'search' mode.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::filter_by_string_case_sensitive: If
 *                 'false' then string filtering will ignore case. Does not
 *                 apply to 'search' mode.
 *                 <ul>
 *                         <li> gpudb::filter_by_string_true
 *                         <li> gpudb::filter_by_string_false
 *                 </ul>
 *                 The default value is gpudb::filter_by_string_true.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByStringResponse& filterByString( const std::string& tableName,
                                        const std::string& viewName,
                                        const std::string& expression,
                                        const std::string& mode,
                                        const std::vector<std::string>& columnNames,
                                        const std::map<std::string, std::string>& options,
                                        FilterByStringResponse& response_ ) const;

/**
 * Filters objects in one table based on objects in another table. The user
 * must specify matching column types from the two tables (i.e. the target
 * table from which objects will be filtered and the source table based on
 * which the filter will be created); the column names need not be the same. If
 * a @a viewName is specified, then the filtered objects will then be put in a
 * newly created view. The operation is synchronous, meaning that a response
 * will not be returned until all objects are fully available in the result
 * view. The return value contains the count (i.e. the size) of the resulting
 * view.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByTableResponse filterByTable( const FilterByTableRequest& request_ ) const;

/**
 * Filters objects in one table based on objects in another table. The user
 * must specify matching column types from the two tables (i.e. the target
 * table from which objects will be filtered and the source table based on
 * which the filter will be created); the column names need not be the same. If
 * a @a viewName is specified, then the filtered objects will then be put in a
 * newly created view. The operation is synchronous, meaning that a response
 * will not be returned until all objects are fully available in the result
 * view. The return value contains the count (i.e. the size) of the resulting
 * view.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByTableResponse& filterByTable( const FilterByTableRequest& request_,
                                      FilterByTableResponse& response_ ) const;

/**
 * Filters objects in one table based on objects in another table. The user
 * must specify matching column types from the two tables (i.e. the target
 * table from which objects will be filtered and the source table based on
 * which the filter will be created); the column names need not be the same. If
 * a @a viewName is specified, then the filtered objects will then be put in a
 * newly created view. The operation is synchronous, meaning that a response
 * will not be returned until all objects are fully available in the result
 * view. The return value contains the count (i.e. the size) of the resulting
 * view.
 * 
 * @param tableName  Name of the table whose data will be filtered. Must be an
 *                   existing table.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param columnName  Name of the column by whose value the data will be
 *                    filtered from the table designated by @a tableName.
 * @param sourceTableName  Name of the table whose data will be compared
 *                         against in the table called @a tableName. Must be an
 *                         existing table.
 * @param sourceTableColumnName  Name of the column in the @a sourceTableName
 *                               whose values will be used as the filter for
 *                               table @a tableName. Must be a geospatial
 *                               geometry column if in 'spatial' mode;
 *                               otherwise, Must match the type of the @a
 *                               columnName.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::filter_by_table_filter_mode: String
 *                 indicating the filter mode, either @a in_table or @a
 *                 not_in_table.
 *                 <ul>
 *                         <li> gpudb::filter_by_table_in_table
 *                         <li> gpudb::filter_by_table_not_in_table
 *                 </ul>
 *                 The default value is gpudb::filter_by_table_in_table.
 *                         <li> gpudb::filter_by_table_mode: Mode - should be
 *                 either @a spatial or @a normal.
 *                 <ul>
 *                         <li> gpudb::filter_by_table_normal
 *                         <li> gpudb::filter_by_table_spatial
 *                 </ul>
 *                 The default value is gpudb::filter_by_table_normal.
 *                         <li> gpudb::filter_by_table_buffer: Buffer size, in
 *                 meters. Only relevant for @a spatial mode.
 *                         <li> gpudb::filter_by_table_buffer_method: Method
 *                 used to buffer polygons.  Only relevant for @a spatial mode.
 *                 <ul>
 *                         <li> gpudb::filter_by_table_normal
 *                         <li> gpudb::filter_by_table_geos: Use geos 1 edge
 *                 per corner algorithm
 *                 </ul>
 *                 The default value is gpudb::filter_by_table_normal.
 *                         <li> gpudb::filter_by_table_max_partition_size:
 *                 Maximum number of points in a partition. Only relevant for
 *                 @a spatial mode.
 *                         <li> gpudb::filter_by_table_max_partition_score:
 *                 Maximum number of points * edges in a partition. Only
 *                 relevant for @a spatial mode.
 *                         <li> gpudb::filter_by_table_x_column_name: Name of
 *                 column containing x value of point being filtered in @a
 *                 spatial mode.
 *                         <li> gpudb::filter_by_table_y_column_name: Name of
 *                 column containing y value of point being filtered in @a
 *                 spatial mode.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByTableResponse filterByTable( const std::string& tableName,
                                     const std::string& viewName,
                                     const std::string& columnName,
                                     const std::string& sourceTableName,
                                     const std::string& sourceTableColumnName,
                                     const std::map<std::string, std::string>& options ) const;

/**
 * Filters objects in one table based on objects in another table. The user
 * must specify matching column types from the two tables (i.e. the target
 * table from which objects will be filtered and the source table based on
 * which the filter will be created); the column names need not be the same. If
 * a @a viewName is specified, then the filtered objects will then be put in a
 * newly created view. The operation is synchronous, meaning that a response
 * will not be returned until all objects are fully available in the result
 * view. The return value contains the count (i.e. the size) of the resulting
 * view.
 * 
 * @param tableName  Name of the table whose data will be filtered. Must be an
 *                   existing table.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param columnName  Name of the column by whose value the data will be
 *                    filtered from the table designated by @a tableName.
 * @param sourceTableName  Name of the table whose data will be compared
 *                         against in the table called @a tableName. Must be an
 *                         existing table.
 * @param sourceTableColumnName  Name of the column in the @a sourceTableName
 *                               whose values will be used as the filter for
 *                               table @a tableName. Must be a geospatial
 *                               geometry column if in 'spatial' mode;
 *                               otherwise, Must match the type of the @a
 *                               columnName.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::filter_by_table_filter_mode: String
 *                 indicating the filter mode, either @a in_table or @a
 *                 not_in_table.
 *                 <ul>
 *                         <li> gpudb::filter_by_table_in_table
 *                         <li> gpudb::filter_by_table_not_in_table
 *                 </ul>
 *                 The default value is gpudb::filter_by_table_in_table.
 *                         <li> gpudb::filter_by_table_mode: Mode - should be
 *                 either @a spatial or @a normal.
 *                 <ul>
 *                         <li> gpudb::filter_by_table_normal
 *                         <li> gpudb::filter_by_table_spatial
 *                 </ul>
 *                 The default value is gpudb::filter_by_table_normal.
 *                         <li> gpudb::filter_by_table_buffer: Buffer size, in
 *                 meters. Only relevant for @a spatial mode.
 *                         <li> gpudb::filter_by_table_buffer_method: Method
 *                 used to buffer polygons.  Only relevant for @a spatial mode.
 *                 <ul>
 *                         <li> gpudb::filter_by_table_normal
 *                         <li> gpudb::filter_by_table_geos: Use geos 1 edge
 *                 per corner algorithm
 *                 </ul>
 *                 The default value is gpudb::filter_by_table_normal.
 *                         <li> gpudb::filter_by_table_max_partition_size:
 *                 Maximum number of points in a partition. Only relevant for
 *                 @a spatial mode.
 *                         <li> gpudb::filter_by_table_max_partition_score:
 *                 Maximum number of points * edges in a partition. Only
 *                 relevant for @a spatial mode.
 *                         <li> gpudb::filter_by_table_x_column_name: Name of
 *                 column containing x value of point being filtered in @a
 *                 spatial mode.
 *                         <li> gpudb::filter_by_table_y_column_name: Name of
 *                 column containing y value of point being filtered in @a
 *                 spatial mode.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByTableResponse& filterByTable( const std::string& tableName,
                                      const std::string& viewName,
                                      const std::string& columnName,
                                      const std::string& sourceTableName,
                                      const std::string& sourceTableColumnName,
                                      const std::map<std::string, std::string>& options,
                                      FilterByTableResponse& response_ ) const;

/**
 * Calculates which objects from a table has a particular value for a
 * particular column. The input parameters provide a way to specify either a
 * String or a Double valued column and a desired value for the column on which
 * the filter is performed. The operation is synchronous, meaning that a
 * response will not be returned until all the objects are fully available. The
 * response payload provides the count of the resulting set. A new result view
 * which satisfies the input filter restriction specification is also created
 * with a view name passed in as part of the input payload.  Although this
 * functionality can also be accomplished with the standard filter function, it
 * is more efficient.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByValueResponse filterByValue( const FilterByValueRequest& request_ ) const;

/**
 * Calculates which objects from a table has a particular value for a
 * particular column. The input parameters provide a way to specify either a
 * String or a Double valued column and a desired value for the column on which
 * the filter is performed. The operation is synchronous, meaning that a
 * response will not be returned until all the objects are fully available. The
 * response payload provides the count of the resulting set. A new result view
 * which satisfies the input filter restriction specification is also created
 * with a view name passed in as part of the input payload.  Although this
 * functionality can also be accomplished with the standard filter function, it
 * is more efficient.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByValueResponse& filterByValue( const FilterByValueRequest& request_,
                                      FilterByValueResponse& response_ ) const;

/**
 * Calculates which objects from a table has a particular value for a
 * particular column. The input parameters provide a way to specify either a
 * String or a Double valued column and a desired value for the column on which
 * the filter is performed. The operation is synchronous, meaning that a
 * response will not be returned until all the objects are fully available. The
 * response payload provides the count of the resulting set. A new result view
 * which satisfies the input filter restriction specification is also created
 * with a view name passed in as part of the input payload.  Although this
 * functionality can also be accomplished with the standard filter function, it
 * is more efficient.
 * 
 * @param tableName  Name of an existing table on which to perform the
 *                   calculation.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param isString  Indicates whether the value being searched for is string or
 *                  numeric.
 * @param value  The value to search for.
 * @param valueStr  The string value to search for.
 * @param columnName  Name of a column on which the filter by value would be
 *                    applied.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

FilterByValueResponse filterByValue( const std::string& tableName,
                                     const std::string& viewName,
                                     const bool isString,
                                     const double value,
                                     const std::string& valueStr,
                                     const std::string& columnName,
                                     const std::map<std::string, std::string>& options ) const;

/**
 * Calculates which objects from a table has a particular value for a
 * particular column. The input parameters provide a way to specify either a
 * String or a Double valued column and a desired value for the column on which
 * the filter is performed. The operation is synchronous, meaning that a
 * response will not be returned until all the objects are fully available. The
 * response payload provides the count of the resulting set. A new result view
 * which satisfies the input filter restriction specification is also created
 * with a view name passed in as part of the input payload.  Although this
 * functionality can also be accomplished with the standard filter function, it
 * is more efficient.
 * 
 * @param tableName  Name of an existing table on which to perform the
 *                   calculation.
 * @param viewName  If provided, then this will be the name of the view
 *                  containing the results. Has the same naming restrictions as
 *                  <a href="../../concepts/tables.html"
 *                  target="_top">tables</a>.
 * @param isString  Indicates whether the value being searched for is string or
 *                  numeric.
 * @param value  The value to search for.
 * @param valueStr  The string value to search for.
 * @param columnName  Name of a column on which the filter by value would be
 *                    applied.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

FilterByValueResponse& filterByValue( const std::string& tableName,
                                      const std::string& viewName,
                                      const bool isString,
                                      const double value,
                                      const std::string& valueStr,
                                      const std::string& columnName,
                                      const std::map<std::string, std::string>& options,
                                      FilterByValueResponse& response_ ) const;

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables, views,
 * or on homogeneous collections (collections containing tables of all the same
 * type). Records can be returned encoded as binary or json.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters. Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

RawGetRecordsResponse getRecordsRaw( const GetRecordsRequest& request_ ) const;

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables, views,
 * or on homogeneous collections (collections containing tables of all the same
 * type). Records can be returned encoded as binary or json.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters. Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

RawGetRecordsResponse& getRecordsRaw( const GetRecordsRequest& request_,
                                      RawGetRecordsResponse& response_ ) const;

/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables, views,
 * or on homogeneous collections (collections containing tables of all the same
 * type). Records can be returned encoded as binary or json.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters. Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsResponse<TResponse> getRecords( const GetRecordsRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", request_, actualResponse_, false);
    GetRecordsResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse());
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    return response_;
}


/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables, views,
 * or on homogeneous collections (collections containing tables of all the same
 * type). Records can be returned encoded as binary or json.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters. Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsResponse<TResponse>& getRecords( const GetRecordsRequest& request_,
                                           GetRecordsResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse());
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    return response_;
}


/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables, views,
 * or on homogeneous collections (collections containing tables of all the same
 * type). Records can be returned encoded as binary or json.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters. Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param tableName  Name of the table from which the records will be fetched.
 *                   Must be a table, view or homogeneous collection.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned. Or END_OF_SET (-9999) to indicate that the max
 *               number of results should be returned.
 * @param options
 *                 <ul>
 *                         <li> gpudb::get_records_expression: Optional filter
 *                 expression to apply to the table.
 *                         <li> gpudb::get_records_fast_index_lookup: Indicates
 *                 if indexes should be used to perform the lookup for a given
 *                 expression if possible. Only applicable if there is no
 *                 sorting, the expression contains only equivalence
 *                 comparisons based on existing tables indexes and the range
 *                 of requested values is from [0 to END_OF_SET].
 *                 <ul>
 *                         <li> gpudb::get_records_true
 *                         <li> gpudb::get_records_false
 *                 </ul>
 *                 The default value is gpudb::get_records_true.
 *                         <li> gpudb::get_records_sort_by: Optional column
 *                 that the data should be sorted by. Empty by default (i.e. no
 *                 sorting is applied).
 *                         <li> gpudb::get_records_sort_order: String
 *                 indicating how the returned values should be sorted -
 *                 ascending or descending. If sort_order is provided, sort_by
 *                 has to be provided.
 *                 <ul>
 *                         <li> gpudb::get_records_ascending
 *                         <li> gpudb::get_records_descending
 *                 </ul>
 *                 The default value is gpudb::get_records_ascending.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsResponse<TResponse> getRecords( const std::string& tableName,
                                          const int64_t offset,
                                          const int64_t limit,
                                          const std::map<std::string, std::string>& options ) const
{
    GetRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", actualRequest_, actualResponse_, false);
    GetRecordsResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse());
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    return response_;
}


/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables, views,
 * or on homogeneous collections (collections containing tables of all the same
 * type). Records can be returned encoded as binary or json.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters. Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param tableName  Name of the table from which the records will be fetched.
 *                   Must be a table, view or homogeneous collection.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned. Or END_OF_SET (-9999) to indicate that the max
 *               number of results should be returned.
 * @param options
 *                 <ul>
 *                         <li> gpudb::get_records_expression: Optional filter
 *                 expression to apply to the table.
 *                         <li> gpudb::get_records_fast_index_lookup: Indicates
 *                 if indexes should be used to perform the lookup for a given
 *                 expression if possible. Only applicable if there is no
 *                 sorting, the expression contains only equivalence
 *                 comparisons based on existing tables indexes and the range
 *                 of requested values is from [0 to END_OF_SET].
 *                 <ul>
 *                         <li> gpudb::get_records_true
 *                         <li> gpudb::get_records_false
 *                 </ul>
 *                 The default value is gpudb::get_records_true.
 *                         <li> gpudb::get_records_sort_by: Optional column
 *                 that the data should be sorted by. Empty by default (i.e. no
 *                 sorting is applied).
 *                         <li> gpudb::get_records_sort_order: String
 *                 indicating how the returned values should be sorted -
 *                 ascending or descending. If sort_order is provided, sort_by
 *                 has to be provided.
 *                 <ul>
 *                         <li> gpudb::get_records_ascending
 *                         <li> gpudb::get_records_descending
 *                 </ul>
 *                 The default value is gpudb::get_records_ascending.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsResponse<TResponse>& getRecords( const std::string& tableName,
                                           const int64_t offset,
                                           const int64_t limit,
                                           const std::map<std::string, std::string>& options,
                                           GetRecordsResponse<TResponse>& response_ ) const
{
    GetRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse());
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    return response_;
}


/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables, views,
 * or on homogeneous collections (collections containing tables of all the same
 * type). Records can be returned encoded as binary or json.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters. Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsResponse<TResponse> getRecords( const ::avro::ValidSchema& schema_,
                                          const GetRecordsRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", request_, actualResponse_, false);
    GetRecordsResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(schema_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    return response_;
}


/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables, views,
 * or on homogeneous collections (collections containing tables of all the same
 * type). Records can be returned encoded as binary or json.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters. Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsResponse<TResponse> getRecords( const Type& type_,
                                          const GetRecordsRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", request_, actualResponse_, false);
    GetRecordsResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(type_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    return response_;
}


/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables, views,
 * or on homogeneous collections (collections containing tables of all the same
 * type). Records can be returned encoded as binary or json.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters. Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsResponse<TResponse>& getRecords( const ::avro::ValidSchema& schema_,
                                           const GetRecordsRequest& request_,
                                           GetRecordsResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(schema_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    return response_;
}


/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables, views,
 * or on homogeneous collections (collections containing tables of all the same
 * type). Records can be returned encoded as binary or json.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters. Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsResponse<TResponse>& getRecords( const Type& type_,
                                           const GetRecordsRequest& request_,
                                           GetRecordsResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(type_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    return response_;
}


/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables, views,
 * or on homogeneous collections (collections containing tables of all the same
 * type). Records can be returned encoded as binary or json.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters. Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param tableName  Name of the table from which the records will be fetched.
 *                   Must be a table, view or homogeneous collection.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned. Or END_OF_SET (-9999) to indicate that the max
 *               number of results should be returned.
 * @param options
 *                 <ul>
 *                         <li> gpudb::get_records_expression: Optional filter
 *                 expression to apply to the table.
 *                         <li> gpudb::get_records_fast_index_lookup: Indicates
 *                 if indexes should be used to perform the lookup for a given
 *                 expression if possible. Only applicable if there is no
 *                 sorting, the expression contains only equivalence
 *                 comparisons based on existing tables indexes and the range
 *                 of requested values is from [0 to END_OF_SET].
 *                 <ul>
 *                         <li> gpudb::get_records_true
 *                         <li> gpudb::get_records_false
 *                 </ul>
 *                 The default value is gpudb::get_records_true.
 *                         <li> gpudb::get_records_sort_by: Optional column
 *                 that the data should be sorted by. Empty by default (i.e. no
 *                 sorting is applied).
 *                         <li> gpudb::get_records_sort_order: String
 *                 indicating how the returned values should be sorted -
 *                 ascending or descending. If sort_order is provided, sort_by
 *                 has to be provided.
 *                 <ul>
 *                         <li> gpudb::get_records_ascending
 *                         <li> gpudb::get_records_descending
 *                 </ul>
 *                 The default value is gpudb::get_records_ascending.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsResponse<TResponse> getRecords( const ::avro::ValidSchema& schema_,
                                          const std::string& tableName,
                                          const int64_t offset,
                                          const int64_t limit,
                                          const std::map<std::string, std::string>& options ) const
{
    GetRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", actualRequest_, actualResponse_, false);
    GetRecordsResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(schema_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    return response_;
}


/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables, views,
 * or on homogeneous collections (collections containing tables of all the same
 * type). Records can be returned encoded as binary or json.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters. Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] type_  Type object used for decoding returned objects.
 * @param tableName  Name of the table from which the records will be fetched.
 *                   Must be a table, view or homogeneous collection.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned. Or END_OF_SET (-9999) to indicate that the max
 *               number of results should be returned.
 * @param options
 *                 <ul>
 *                         <li> gpudb::get_records_expression: Optional filter
 *                 expression to apply to the table.
 *                         <li> gpudb::get_records_fast_index_lookup: Indicates
 *                 if indexes should be used to perform the lookup for a given
 *                 expression if possible. Only applicable if there is no
 *                 sorting, the expression contains only equivalence
 *                 comparisons based on existing tables indexes and the range
 *                 of requested values is from [0 to END_OF_SET].
 *                 <ul>
 *                         <li> gpudb::get_records_true
 *                         <li> gpudb::get_records_false
 *                 </ul>
 *                 The default value is gpudb::get_records_true.
 *                         <li> gpudb::get_records_sort_by: Optional column
 *                 that the data should be sorted by. Empty by default (i.e. no
 *                 sorting is applied).
 *                         <li> gpudb::get_records_sort_order: String
 *                 indicating how the returned values should be sorted -
 *                 ascending or descending. If sort_order is provided, sort_by
 *                 has to be provided.
 *                 <ul>
 *                         <li> gpudb::get_records_ascending
 *                         <li> gpudb::get_records_descending
 *                 </ul>
 *                 The default value is gpudb::get_records_ascending.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsResponse<TResponse> getRecords( const Type& type_,
                                          const std::string& tableName,
                                          const int64_t offset,
                                          const int64_t limit,
                                          const std::map<std::string, std::string>& options ) const
{
    GetRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", actualRequest_, actualResponse_, false);
    GetRecordsResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(type_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    return response_;
}


/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables, views,
 * or on homogeneous collections (collections containing tables of all the same
 * type). Records can be returned encoded as binary or json.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters. Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param tableName  Name of the table from which the records will be fetched.
 *                   Must be a table, view or homogeneous collection.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned. Or END_OF_SET (-9999) to indicate that the max
 *               number of results should be returned.
 * @param options
 *                 <ul>
 *                         <li> gpudb::get_records_expression: Optional filter
 *                 expression to apply to the table.
 *                         <li> gpudb::get_records_fast_index_lookup: Indicates
 *                 if indexes should be used to perform the lookup for a given
 *                 expression if possible. Only applicable if there is no
 *                 sorting, the expression contains only equivalence
 *                 comparisons based on existing tables indexes and the range
 *                 of requested values is from [0 to END_OF_SET].
 *                 <ul>
 *                         <li> gpudb::get_records_true
 *                         <li> gpudb::get_records_false
 *                 </ul>
 *                 The default value is gpudb::get_records_true.
 *                         <li> gpudb::get_records_sort_by: Optional column
 *                 that the data should be sorted by. Empty by default (i.e. no
 *                 sorting is applied).
 *                         <li> gpudb::get_records_sort_order: String
 *                 indicating how the returned values should be sorted -
 *                 ascending or descending. If sort_order is provided, sort_by
 *                 has to be provided.
 *                 <ul>
 *                         <li> gpudb::get_records_ascending
 *                         <li> gpudb::get_records_descending
 *                 </ul>
 *                 The default value is gpudb::get_records_ascending.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsResponse<TResponse>& getRecords( const ::avro::ValidSchema& schema_,
                                           const std::string& tableName,
                                           const int64_t offset,
                                           const int64_t limit,
                                           const std::map<std::string, std::string>& options,
                                           GetRecordsResponse<TResponse>& response_ ) const
{
    GetRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(schema_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    return response_;
}


/**
 * Retrieves records from a given table, optionally filtered by an expression
 * and/or sorted by a column. This operation can be performed on tables, views,
 * or on homogeneous collections (collections containing tables of all the same
 * type). Records can be returned encoded as binary or json.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters. Note that when paging through a table, if the table (or
 * the underlying table in case of a view) is updated (records are inserted,
 * deleted or modified) the records retrieved may differ between calls based on
 * the updates applied.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] type_  Type object used for decoding returned objects.
 * @param tableName  Name of the table from which the records will be fetched.
 *                   Must be a table, view or homogeneous collection.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned. Or END_OF_SET (-9999) to indicate that the max
 *               number of results should be returned.
 * @param options
 *                 <ul>
 *                         <li> gpudb::get_records_expression: Optional filter
 *                 expression to apply to the table.
 *                         <li> gpudb::get_records_fast_index_lookup: Indicates
 *                 if indexes should be used to perform the lookup for a given
 *                 expression if possible. Only applicable if there is no
 *                 sorting, the expression contains only equivalence
 *                 comparisons based on existing tables indexes and the range
 *                 of requested values is from [0 to END_OF_SET].
 *                 <ul>
 *                         <li> gpudb::get_records_true
 *                         <li> gpudb::get_records_false
 *                 </ul>
 *                 The default value is gpudb::get_records_true.
 *                         <li> gpudb::get_records_sort_by: Optional column
 *                 that the data should be sorted by. Empty by default (i.e. no
 *                 sorting is applied).
 *                         <li> gpudb::get_records_sort_order: String
 *                 indicating how the returned values should be sorted -
 *                 ascending or descending. If sort_order is provided, sort_by
 *                 has to be provided.
 *                 <ul>
 *                         <li> gpudb::get_records_ascending
 *                         <li> gpudb::get_records_descending
 *                 </ul>
 *                 The default value is gpudb::get_records_ascending.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsResponse<TResponse>& getRecords( const Type& type_,
                                           const std::string& tableName,
                                           const int64_t offset,
                                           const int64_t limit,
                                           const std::map<std::string, std::string>& options,
                                           GetRecordsResponse<TResponse>& response_ ) const
{
    GetRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsResponse actualResponse_;
    submitRequest("/get/records", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeName = actualResponse_.typeName;
    response_.typeSchema = actualResponse_.typeSchema;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(type_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.totalNumberOfRecords = actualResponse_.totalNumberOfRecords;
    response_.hasMoreRecords = actualResponse_.hasMoreRecords;
    return response_;
}


/**
 * For a given table, retrieves the values of the given columns within a given
 * range. It returns maps of column name to the vector of values for each
 * supported data type (double, float, long, int and string). This operation
 * supports pagination feature, i.e. values that are retrieved are those
 * associated with the indices between the start (offset) and end value (offset
 * + limit) parameters (inclusive). If there are num_points values in the table
 * then each of the indices between 0 and num_points-1 retrieves a unique
 * value.
 * <p>
 * Note that when using the pagination feature, if the table (or the underlying
 * table in case of a view) is updated (records are inserted, deleted or
 * modified) the records or values retrieved may differ between calls
 * (discontiguous or overlap) based on the type of the update.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

RawGetRecordsByColumnResponse getRecordsByColumnRaw( const GetRecordsByColumnRequest& request_ ) const;

/**
 * For a given table, retrieves the values of the given columns within a given
 * range. It returns maps of column name to the vector of values for each
 * supported data type (double, float, long, int and string). This operation
 * supports pagination feature, i.e. values that are retrieved are those
 * associated with the indices between the start (offset) and end value (offset
 * + limit) parameters (inclusive). If there are num_points values in the table
 * then each of the indices between 0 and num_points-1 retrieves a unique
 * value.
 * <p>
 * Note that when using the pagination feature, if the table (or the underlying
 * table in case of a view) is updated (records are inserted, deleted or
 * modified) the records or values retrieved may differ between calls
 * (discontiguous or overlap) based on the type of the update.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

RawGetRecordsByColumnResponse& getRecordsByColumnRaw( const GetRecordsByColumnRequest& request_,
                                                      RawGetRecordsByColumnResponse& response_ ) const;

/**
 * For a given table, retrieves the values of the given columns within a given
 * range. It returns maps of column name to the vector of values for each
 * supported data type (double, float, long, int and string). This operation
 * supports pagination feature, i.e. values that are retrieved are those
 * associated with the indices between the start (offset) and end value (offset
 * + limit) parameters (inclusive). If there are num_points values in the table
 * then each of the indices between 0 and num_points-1 retrieves a unique
 * value.
 * <p>
 * Note that when using the pagination feature, if the table (or the underlying
 * table in case of a view) is updated (records are inserted, deleted or
 * modified) the records or values retrieved may differ between calls
 * (discontiguous or overlap) based on the type of the update.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

GetRecordsByColumnResponse getRecordsByColumn( const GetRecordsByColumnRequest& request_ ) const;

/**
 * For a given table, retrieves the values of the given columns within a given
 * range. It returns maps of column name to the vector of values for each
 * supported data type (double, float, long, int and string). This operation
 * supports pagination feature, i.e. values that are retrieved are those
 * associated with the indices between the start (offset) and end value (offset
 * + limit) parameters (inclusive). If there are num_points values in the table
 * then each of the indices between 0 and num_points-1 retrieves a unique
 * value.
 * <p>
 * Note that when using the pagination feature, if the table (or the underlying
 * table in case of a view) is updated (records are inserted, deleted or
 * modified) the records or values retrieved may differ between calls
 * (discontiguous or overlap) based on the type of the update.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

GetRecordsByColumnResponse& getRecordsByColumn( const GetRecordsByColumnRequest& request_,
                                                GetRecordsByColumnResponse& response_ ) const;

/**
 * For a given table, retrieves the values of the given columns within a given
 * range. It returns maps of column name to the vector of values for each
 * supported data type (double, float, long, int and string). This operation
 * supports pagination feature, i.e. values that are retrieved are those
 * associated with the indices between the start (offset) and end value (offset
 * + limit) parameters (inclusive). If there are num_points values in the table
 * then each of the indices between 0 and num_points-1 retrieves a unique
 * value.
 * <p>
 * Note that when using the pagination feature, if the table (or the underlying
 * table in case of a view) is updated (records are inserted, deleted or
 * modified) the records or values retrieved may differ between calls
 * (discontiguous or overlap) based on the type of the update.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * 
 * @param tableName  Name of the table on which this operation will be
 *                   performed. The table cannot be a parent set.
 * @param columnNames  The list of column values to retrieve.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned (if not provided the default is 10000), or
 *               END_OF_SET (-9999) to indicate that the maximum number of
 *               results allowed by the server should be returned.
 * @param options
 *                 <ul>
 *                         <li> gpudb::get_records_by_column_expression:
 *                 Optional filter expression to apply to the table.
 *                         <li> gpudb::get_records_by_column_sort_by: Optional
 *                 column that the data should be sorted by. Empty by default
 *                 (i.e. no sorting is applied).
 *                         <li> gpudb::get_records_by_column_sort_order: String
 *                 indicating how the returned values should be sorted -
 *                 ascending or descending. Default is 'ascending'. If
 *                 sort_order is provided, sort_by has to be provided.
 *                 <ul>
 *                         <li> gpudb::get_records_by_column_ascending
 *                         <li> gpudb::get_records_by_column_descending
 *                 </ul>
 *                 The default value is gpudb::get_records_by_column_ascending.
 *                         <li> gpudb::get_records_by_column_order_by:
 *                 Comma-separated list of the columns to be sorted by; e.g.
 *                 'timestamp asc, x desc'.  The columns specified must be
 *                 present in @a columnNames.  If any alias is given for any
 *                 column name, the alias must be used, rather than the
 *                 original column name.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

GetRecordsByColumnResponse getRecordsByColumn( const std::string& tableName,
                                               const std::vector<std::string>& columnNames,
                                               const int64_t offset,
                                               const int64_t limit,
                                               const std::map<std::string, std::string>& options ) const;

/**
 * For a given table, retrieves the values of the given columns within a given
 * range. It returns maps of column name to the vector of values for each
 * supported data type (double, float, long, int and string). This operation
 * supports pagination feature, i.e. values that are retrieved are those
 * associated with the indices between the start (offset) and end value (offset
 * + limit) parameters (inclusive). If there are num_points values in the table
 * then each of the indices between 0 and num_points-1 retrieves a unique
 * value.
 * <p>
 * Note that when using the pagination feature, if the table (or the underlying
 * table in case of a view) is updated (records are inserted, deleted or
 * modified) the records or values retrieved may differ between calls
 * (discontiguous or overlap) based on the type of the update.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../concepts/dynamic_schemas.html" target="_top">dynamic schemas
 * documentation</a>.
 * 
 * @param tableName  Name of the table on which this operation will be
 *                   performed. The table cannot be a parent set.
 * @param columnNames  The list of column values to retrieve.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned (if not provided the default is 10000), or
 *               END_OF_SET (-9999) to indicate that the maximum number of
 *               results allowed by the server should be returned.
 * @param options
 *                 <ul>
 *                         <li> gpudb::get_records_by_column_expression:
 *                 Optional filter expression to apply to the table.
 *                         <li> gpudb::get_records_by_column_sort_by: Optional
 *                 column that the data should be sorted by. Empty by default
 *                 (i.e. no sorting is applied).
 *                         <li> gpudb::get_records_by_column_sort_order: String
 *                 indicating how the returned values should be sorted -
 *                 ascending or descending. Default is 'ascending'. If
 *                 sort_order is provided, sort_by has to be provided.
 *                 <ul>
 *                         <li> gpudb::get_records_by_column_ascending
 *                         <li> gpudb::get_records_by_column_descending
 *                 </ul>
 *                 The default value is gpudb::get_records_by_column_ascending.
 *                         <li> gpudb::get_records_by_column_order_by:
 *                 Comma-separated list of the columns to be sorted by; e.g.
 *                 'timestamp asc, x desc'.  The columns specified must be
 *                 present in @a columnNames.  If any alias is given for any
 *                 column name, the alias must be used, rather than the
 *                 original column name.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

GetRecordsByColumnResponse& getRecordsByColumn( const std::string& tableName,
                                                const std::vector<std::string>& columnNames,
                                                const int64_t offset,
                                                const int64_t limit,
                                                const std::map<std::string, std::string>& options,
                                                GetRecordsByColumnResponse& response_ ) const;

/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * In contrast to {@link #getRecordsRaw(const GetRecordsRequest&) const}
 * this returns records grouped by series/track. So if @a offset is 0 and @a
 * limit is 5 this operation would return the first 5 series/tracks in @a
 * tableName. Each series/track will be returned sorted by their TIMESTAMP
 * column.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

RawGetRecordsBySeriesResponse getRecordsBySeriesRaw( const GetRecordsBySeriesRequest& request_ ) const;

/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * In contrast to {@link
 * #getRecordsRaw(const GetRecordsRequest&,RawGetRecordsResponse&) const}
 * this returns records grouped by series/track. So if @a offset is 0 and @a
 * limit is 5 this operation would return the first 5 series/tracks in @a
 * tableName. Each series/track will be returned sorted by their TIMESTAMP
 * column.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

RawGetRecordsBySeriesResponse& getRecordsBySeriesRaw( const GetRecordsBySeriesRequest& request_,
                                                      RawGetRecordsBySeriesResponse& response_ ) const;

/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * In contrast to {@link #getRecords(const GetRecordsRequest&) const} this
 * returns records grouped by series/track. So if @a offset is 0 and @a limit
 * is 5 this operation would return the first 5 series/tracks in @a tableName.
 * Each series/track will be returned sorted by their TIMESTAMP column.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsBySeriesResponse<TResponse> getRecordsBySeries( const GetRecordsBySeriesRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", request_, actualResponse_, false);
    GetRecordsBySeriesResponse<TResponse> response_;
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse());
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    return response_;
}


/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * In contrast to {@link
 * #getRecords(const GetRecordsRequest&,GetRecordsResponse<TResponse>&) const}
 * this returns records grouped by series/track. So if @a offset is 0 and @a
 * limit is 5 this operation would return the first 5 series/tracks in @a
 * tableName. Each series/track will be returned sorted by their TIMESTAMP
 * column.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsBySeriesResponse<TResponse>& getRecordsBySeries( const GetRecordsBySeriesRequest& request_,
                                                           GetRecordsBySeriesResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", request_, actualResponse_, false);
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse());
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    return response_;
}


/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * In contrast to {@link
 * #getRecords(const std::string&,const int64_t,const int64_t,const std::map<std::string, std::string>&) const}
 * this returns records grouped by series/track. So if @a offset is 0 and @a
 * limit is 5 this operation would return the first 5 series/tracks in @a
 * tableName. Each series/track will be returned sorted by their TIMESTAMP
 * column.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param tableName  Name of the collection/table/view for which series/tracks
 *                   will be fetched.
 * @param worldTableName  Name of the table containing the complete
 *                        series/track information to be returned for the
 *                        tracks present in the @a tableName. Typically this is
 *                        used when retrieving series/tracks from a view (which
 *                        contains partial series/tracks) but the user wants to
 *                        retrieve the entire original series/tracks. Can be
 *                        blank.
 * @param offset  A positive integer indicating the number of initial
 *                series/tracks to skip (useful for paging through the
 *                results).  The minimum allowed value is 0. The maximum
 *                allowed value is MAX_INT.
 * @param limit  A positive integer indicating the maximum number of
 *               series/tracks to be returned. Or END_OF_SET (-9999) to
 *               indicate that the max number of results should be returned.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsBySeriesResponse<TResponse> getRecordsBySeries( const std::string& tableName,
                                                          const std::string& worldTableName,
                                                          const int32_t offset,
                                                          const int32_t limit,
                                                          const std::map<std::string, std::string>& options ) const
{
    GetRecordsBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.worldTableName = worldTableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
    GetRecordsBySeriesResponse<TResponse> response_;
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse());
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    return response_;
}


/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * In contrast to {@link
 * #getRecords(const std::string&,const int64_t,const int64_t,const std::map<std::string, std::string>&,GetRecordsResponse<TResponse>&) const}
 * this returns records grouped by series/track. So if @a offset is 0 and @a
 * limit is 5 this operation would return the first 5 series/tracks in @a
 * tableName. Each series/track will be returned sorted by their TIMESTAMP
 * column.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param tableName  Name of the collection/table/view for which series/tracks
 *                   will be fetched.
 * @param worldTableName  Name of the table containing the complete
 *                        series/track information to be returned for the
 *                        tracks present in the @a tableName. Typically this is
 *                        used when retrieving series/tracks from a view (which
 *                        contains partial series/tracks) but the user wants to
 *                        retrieve the entire original series/tracks. Can be
 *                        blank.
 * @param offset  A positive integer indicating the number of initial
 *                series/tracks to skip (useful for paging through the
 *                results).  The minimum allowed value is 0. The maximum
 *                allowed value is MAX_INT.
 * @param limit  A positive integer indicating the maximum number of
 *               series/tracks to be returned. Or END_OF_SET (-9999) to
 *               indicate that the max number of results should be returned.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsBySeriesResponse<TResponse>& getRecordsBySeries( const std::string& tableName,
                                                           const std::string& worldTableName,
                                                           const int32_t offset,
                                                           const int32_t limit,
                                                           const std::map<std::string, std::string>& options,
                                                           GetRecordsBySeriesResponse<TResponse>& response_ ) const
{
    GetRecordsBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.worldTableName = worldTableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse());
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    return response_;
}


/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * In contrast to {@link
 * #getRecords(const ::avro::ValidSchema&,const GetRecordsRequest&) const}
 * this returns records grouped by series/track. So if @a offset is 0 and @a
 * limit is 5 this operation would return the first 5 series/tracks in @a
 * tableName. Each series/track will be returned sorted by their TIMESTAMP
 * column.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsBySeriesResponse<TResponse> getRecordsBySeries( const ::avro::ValidSchema& schema_,
                                                          const GetRecordsBySeriesRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", request_, actualResponse_, false);
    GetRecordsBySeriesResponse<TResponse> response_;
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse(schema_));
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    return response_;
}


/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * In contrast to {@link
 * #getRecords(const Type&,const GetRecordsRequest&) const} this returns
 * records grouped by series/track. So if @a offset is 0 and @a limit is 5 this
 * operation would return the first 5 series/tracks in @a tableName. Each
 * series/track will be returned sorted by their TIMESTAMP column.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsBySeriesResponse<TResponse> getRecordsBySeries( const Type& type_,
                                                          const GetRecordsBySeriesRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", request_, actualResponse_, false);
    GetRecordsBySeriesResponse<TResponse> response_;
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse(type_));
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    return response_;
}


/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * In contrast to {@link
 * #getRecords(const ::avro::ValidSchema&,const GetRecordsRequest&,GetRecordsResponse<TResponse>&) const}
 * this returns records grouped by series/track. So if @a offset is 0 and @a
 * limit is 5 this operation would return the first 5 series/tracks in @a
 * tableName. Each series/track will be returned sorted by their TIMESTAMP
 * column.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsBySeriesResponse<TResponse>& getRecordsBySeries( const ::avro::ValidSchema& schema_,
                                                           const GetRecordsBySeriesRequest& request_,
                                                           GetRecordsBySeriesResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", request_, actualResponse_, false);
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse(schema_));
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    return response_;
}


/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * In contrast to {@link
 * #getRecords(const Type&,const GetRecordsRequest&,GetRecordsResponse<TResponse>&) const}
 * this returns records grouped by series/track. So if @a offset is 0 and @a
 * limit is 5 this operation would return the first 5 series/tracks in @a
 * tableName. Each series/track will be returned sorted by their TIMESTAMP
 * column.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsBySeriesResponse<TResponse>& getRecordsBySeries( const Type& type_,
                                                           const GetRecordsBySeriesRequest& request_,
                                                           GetRecordsBySeriesResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", request_, actualResponse_, false);
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse(type_));
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    return response_;
}


/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * In contrast to {@link
 * #getRecords(const ::avro::ValidSchema&,const std::string&,const int64_t,const int64_t,const std::map<std::string, std::string>&) const}
 * this returns records grouped by series/track. So if @a offset is 0 and @a
 * limit is 5 this operation would return the first 5 series/tracks in @a
 * tableName. Each series/track will be returned sorted by their TIMESTAMP
 * column.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param tableName  Name of the collection/table/view for which series/tracks
 *                   will be fetched.
 * @param worldTableName  Name of the table containing the complete
 *                        series/track information to be returned for the
 *                        tracks present in the @a tableName. Typically this is
 *                        used when retrieving series/tracks from a view (which
 *                        contains partial series/tracks) but the user wants to
 *                        retrieve the entire original series/tracks. Can be
 *                        blank.
 * @param offset  A positive integer indicating the number of initial
 *                series/tracks to skip (useful for paging through the
 *                results).  The minimum allowed value is 0. The maximum
 *                allowed value is MAX_INT.
 * @param limit  A positive integer indicating the maximum number of
 *               series/tracks to be returned. Or END_OF_SET (-9999) to
 *               indicate that the max number of results should be returned.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsBySeriesResponse<TResponse> getRecordsBySeries( const ::avro::ValidSchema& schema_,
                                                          const std::string& tableName,
                                                          const std::string& worldTableName,
                                                          const int32_t offset,
                                                          const int32_t limit,
                                                          const std::map<std::string, std::string>& options ) const
{
    GetRecordsBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.worldTableName = worldTableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
    GetRecordsBySeriesResponse<TResponse> response_;
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse(schema_));
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    return response_;
}


/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * In contrast to {@link
 * #getRecords(const Type&,const std::string&,const int64_t,const int64_t,const std::map<std::string, std::string>&) const}
 * this returns records grouped by series/track. So if @a offset is 0 and @a
 * limit is 5 this operation would return the first 5 series/tracks in @a
 * tableName. Each series/track will be returned sorted by their TIMESTAMP
 * column.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] type_  Type object used for decoding returned objects.
 * @param tableName  Name of the collection/table/view for which series/tracks
 *                   will be fetched.
 * @param worldTableName  Name of the table containing the complete
 *                        series/track information to be returned for the
 *                        tracks present in the @a tableName. Typically this is
 *                        used when retrieving series/tracks from a view (which
 *                        contains partial series/tracks) but the user wants to
 *                        retrieve the entire original series/tracks. Can be
 *                        blank.
 * @param offset  A positive integer indicating the number of initial
 *                series/tracks to skip (useful for paging through the
 *                results).  The minimum allowed value is 0. The maximum
 *                allowed value is MAX_INT.
 * @param limit  A positive integer indicating the maximum number of
 *               series/tracks to be returned. Or END_OF_SET (-9999) to
 *               indicate that the max number of results should be returned.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsBySeriesResponse<TResponse> getRecordsBySeries( const Type& type_,
                                                          const std::string& tableName,
                                                          const std::string& worldTableName,
                                                          const int32_t offset,
                                                          const int32_t limit,
                                                          const std::map<std::string, std::string>& options ) const
{
    GetRecordsBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.worldTableName = worldTableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
    GetRecordsBySeriesResponse<TResponse> response_;
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse(type_));
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    return response_;
}


/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * In contrast to {@link
 * #getRecords(const ::avro::ValidSchema&,const std::string&,const int64_t,const int64_t,const std::map<std::string, std::string>&,GetRecordsResponse<TResponse>&) const}
 * this returns records grouped by series/track. So if @a offset is 0 and @a
 * limit is 5 this operation would return the first 5 series/tracks in @a
 * tableName. Each series/track will be returned sorted by their TIMESTAMP
 * column.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param tableName  Name of the collection/table/view for which series/tracks
 *                   will be fetched.
 * @param worldTableName  Name of the table containing the complete
 *                        series/track information to be returned for the
 *                        tracks present in the @a tableName. Typically this is
 *                        used when retrieving series/tracks from a view (which
 *                        contains partial series/tracks) but the user wants to
 *                        retrieve the entire original series/tracks. Can be
 *                        blank.
 * @param offset  A positive integer indicating the number of initial
 *                series/tracks to skip (useful for paging through the
 *                results).  The minimum allowed value is 0. The maximum
 *                allowed value is MAX_INT.
 * @param limit  A positive integer indicating the maximum number of
 *               series/tracks to be returned. Or END_OF_SET (-9999) to
 *               indicate that the max number of results should be returned.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsBySeriesResponse<TResponse>& getRecordsBySeries( const ::avro::ValidSchema& schema_,
                                                           const std::string& tableName,
                                                           const std::string& worldTableName,
                                                           const int32_t offset,
                                                           const int32_t limit,
                                                           const std::map<std::string, std::string>& options,
                                                           GetRecordsBySeriesResponse<TResponse>& response_ ) const
{
    GetRecordsBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.worldTableName = worldTableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse(schema_));
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    return response_;
}


/**
 * Retrieves the complete series/track records from the given @a worldTableName
 * based on the partial track information contained in the @a tableName.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * In contrast to {@link
 * #getRecords(const Type&,const std::string&,const int64_t,const int64_t,const std::map<std::string, std::string>&,GetRecordsResponse<TResponse>&) const}
 * this returns records grouped by series/track. So if @a offset is 0 and @a
 * limit is 5 this operation would return the first 5 series/tracks in @a
 * tableName. Each series/track will be returned sorted by their TIMESTAMP
 * column.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] type_  Type object used for decoding returned objects.
 * @param tableName  Name of the collection/table/view for which series/tracks
 *                   will be fetched.
 * @param worldTableName  Name of the table containing the complete
 *                        series/track information to be returned for the
 *                        tracks present in the @a tableName. Typically this is
 *                        used when retrieving series/tracks from a view (which
 *                        contains partial series/tracks) but the user wants to
 *                        retrieve the entire original series/tracks. Can be
 *                        blank.
 * @param offset  A positive integer indicating the number of initial
 *                series/tracks to skip (useful for paging through the
 *                results).  The minimum allowed value is 0. The maximum
 *                allowed value is MAX_INT.
 * @param limit  A positive integer indicating the maximum number of
 *               series/tracks to be returned. Or END_OF_SET (-9999) to
 *               indicate that the max number of results should be returned.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsBySeriesResponse<TResponse>& getRecordsBySeries( const Type& type_,
                                                           const std::string& tableName,
                                                           const std::string& worldTableName,
                                                           const int32_t offset,
                                                           const int32_t limit,
                                                           const std::map<std::string, std::string>& options,
                                                           GetRecordsBySeriesResponse<TResponse>& response_ ) const
{
    GetRecordsBySeriesRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.worldTableName = worldTableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsBySeriesResponse actualResponse_;
    submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
    response_.tableNames = actualResponse_.tableNames;
    response_.typeNames = actualResponse_.typeNames;
    response_.typeSchemas = actualResponse_.typeSchemas;
    response_.data.resize(actualResponse_.listRecordsBinary.size(), std::vector<TResponse>());

    for (std::vector<std::vector<std::vector<uint8_t> > >::size_type i_ = 0; i_ < actualResponse_.listRecordsBinary.size(); ++i_)
    {
        response_.data[i_].resize(actualResponse_.listRecordsBinary[i_].size(), TResponse(type_));
        avro::decode(&response_.data[i_][0], &actualResponse_.listRecordsBinary[i_][0], actualResponse_.listRecordsBinary[i_].size(), this->m_threadCount, this->m_executor);
    }

    return response_;
}


/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as {@link
 * #deleteRecords(const DeleteRecordsRequest&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from join tables using this operation.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

RawGetRecordsFromCollectionResponse getRecordsFromCollectionRaw( const GetRecordsFromCollectionRequest& request_ ) const;

/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as {@link
 * #deleteRecords(const DeleteRecordsRequest&,DeleteRecordsResponse&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from join tables using this operation.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

RawGetRecordsFromCollectionResponse& getRecordsFromCollectionRaw( const GetRecordsFromCollectionRequest& request_,
                                                                  RawGetRecordsFromCollectionResponse& response_ ) const;

/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as {@link
 * #deleteRecords(const DeleteRecordsRequest&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from join tables using this operation.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection( const GetRecordsFromCollectionRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", request_, actualResponse_, false);
    GetRecordsFromCollectionResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse());
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    return response_;
}


/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as {@link
 * #deleteRecords(const DeleteRecordsRequest&,DeleteRecordsResponse&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from join tables using this operation.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsFromCollectionResponse<TResponse>& getRecordsFromCollection( const GetRecordsFromCollectionRequest& request_,
                                                                       GetRecordsFromCollectionResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse());
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    return response_;
}


/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as {@link
 * #deleteRecords(const std::string&,const std::vector<std::string>&,const std::map<std::string, std::string>&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from join tables using this operation.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param tableName  Name of the collection or table from which records are to
 *                   be retrieved. Must be an existing collection or table.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned, or END_OF_SET (-9999) to indicate that the max
 *               number of results should be returned.
 * @param options
 *                 <ul>
 *                         <li>
 *                 gpudb::get_records_from_collection_return_record_ids: If
 *                 'true' then return the internal record ID along with each
 *                 returned record. Default is 'false'.
 *                 <ul>
 *                         <li> gpudb::get_records_from_collection_true
 *                         <li> gpudb::get_records_from_collection_false
 *                 </ul>
 *                 The default value is
 *                 gpudb::get_records_from_collection_false.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection( const std::string& tableName,
                                                                      const int64_t offset,
                                                                      const int64_t limit,
                                                                      const std::map<std::string, std::string>& options ) const
{
    GetRecordsFromCollectionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
    GetRecordsFromCollectionResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse());
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    return response_;
}


/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as {@link
 * #deleteRecords(const std::string&,const std::vector<std::string>&,const std::map<std::string, std::string>&,DeleteRecordsResponse&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from join tables using this operation.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param tableName  Name of the collection or table from which records are to
 *                   be retrieved. Must be an existing collection or table.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned, or END_OF_SET (-9999) to indicate that the max
 *               number of results should be returned.
 * @param options
 *                 <ul>
 *                         <li>
 *                 gpudb::get_records_from_collection_return_record_ids: If
 *                 'true' then return the internal record ID along with each
 *                 returned record. Default is 'false'.
 *                 <ul>
 *                         <li> gpudb::get_records_from_collection_true
 *                         <li> gpudb::get_records_from_collection_false
 *                 </ul>
 *                 The default value is
 *                 gpudb::get_records_from_collection_false.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsFromCollectionResponse<TResponse>& getRecordsFromCollection( const std::string& tableName,
                                                                       const int64_t offset,
                                                                       const int64_t limit,
                                                                       const std::map<std::string, std::string>& options,
                                                                       GetRecordsFromCollectionResponse<TResponse>& response_ ) const
{
    GetRecordsFromCollectionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse());
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    return response_;
}


/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as {@link
 * #deleteRecords(const DeleteRecordsRequest&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from join tables using this operation.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection( const ::avro::ValidSchema& schema_,
                                                                      const GetRecordsFromCollectionRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", request_, actualResponse_, false);
    GetRecordsFromCollectionResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(schema_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    return response_;
}


/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as {@link
 * #deleteRecords(const DeleteRecordsRequest&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from join tables using this operation.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection( const Type& type_,
                                                                      const GetRecordsFromCollectionRequest& request_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", request_, actualResponse_, false);
    GetRecordsFromCollectionResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(type_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    return response_;
}


/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as {@link
 * #deleteRecords(const DeleteRecordsRequest&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from join tables using this operation.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsFromCollectionResponse<TResponse>& getRecordsFromCollection( const ::avro::ValidSchema& schema_,
                                                                       const GetRecordsFromCollectionRequest& request_,
                                                                       GetRecordsFromCollectionResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(schema_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    return response_;
}


/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as {@link
 * #deleteRecords(const DeleteRecordsRequest&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from join tables using this operation.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] type_  Type object used for decoding returned objects.
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsFromCollectionResponse<TResponse>& getRecordsFromCollection( const Type& type_,
                                                                       const GetRecordsFromCollectionRequest& request_,
                                                                       GetRecordsFromCollectionResponse<TResponse>& response_ ) const
{
    if (request_.encoding != "binary")
        throw GPUdbException( "This function only supports binary encoding" );

    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", request_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(type_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    return response_;
}


/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as {@link
 * #deleteRecords(const std::string&,const std::vector<std::string>&,const std::map<std::string, std::string>&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from join tables using this operation.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param tableName  Name of the collection or table from which records are to
 *                   be retrieved. Must be an existing collection or table.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned, or END_OF_SET (-9999) to indicate that the max
 *               number of results should be returned.
 * @param options
 *                 <ul>
 *                         <li>
 *                 gpudb::get_records_from_collection_return_record_ids: If
 *                 'true' then return the internal record ID along with each
 *                 returned record. Default is 'false'.
 *                 <ul>
 *                         <li> gpudb::get_records_from_collection_true
 *                         <li> gpudb::get_records_from_collection_false
 *                 </ul>
 *                 The default value is
 *                 gpudb::get_records_from_collection_false.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection( const ::avro::ValidSchema& schema_,
                                                                      const std::string& tableName,
                                                                      const int64_t offset,
                                                                      const int64_t limit,
                                                                      const std::map<std::string, std::string>& options ) const
{
    GetRecordsFromCollectionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
    GetRecordsFromCollectionResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(schema_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    return response_;
}


/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as {@link
 * #deleteRecords(const std::string&,const std::vector<std::string>&,const std::map<std::string, std::string>&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from join tables using this operation.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] type_  Type object used for decoding returned objects.
 * @param tableName  Name of the collection or table from which records are to
 *                   be retrieved. Must be an existing collection or table.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned, or END_OF_SET (-9999) to indicate that the max
 *               number of results should be returned.
 * @param options
 *                 <ul>
 *                         <li>
 *                 gpudb::get_records_from_collection_return_record_ids: If
 *                 'true' then return the internal record ID along with each
 *                 returned record. Default is 'false'.
 *                 <ul>
 *                         <li> gpudb::get_records_from_collection_true
 *                         <li> gpudb::get_records_from_collection_false
 *                 </ul>
 *                 The default value is
 *                 gpudb::get_records_from_collection_false.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TResponse> 
GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection( const Type& type_,
                                                                      const std::string& tableName,
                                                                      const int64_t offset,
                                                                      const int64_t limit,
                                                                      const std::map<std::string, std::string>& options ) const
{
    GetRecordsFromCollectionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
    GetRecordsFromCollectionResponse<TResponse> response_;
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(type_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    return response_;
}


/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as {@link
 * #deleteRecords(const std::string&,const std::vector<std::string>&,const std::map<std::string, std::string>&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from join tables using this operation.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] schema_  Avro schema object used for decoding returned objects.
 * @param tableName  Name of the collection or table from which records are to
 *                   be retrieved. Must be an existing collection or table.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned, or END_OF_SET (-9999) to indicate that the max
 *               number of results should be returned.
 * @param options
 *                 <ul>
 *                         <li>
 *                 gpudb::get_records_from_collection_return_record_ids: If
 *                 'true' then return the internal record ID along with each
 *                 returned record. Default is 'false'.
 *                 <ul>
 *                         <li> gpudb::get_records_from_collection_true
 *                         <li> gpudb::get_records_from_collection_false
 *                 </ul>
 *                 The default value is
 *                 gpudb::get_records_from_collection_false.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsFromCollectionResponse<TResponse>& getRecordsFromCollection( const ::avro::ValidSchema& schema_,
                                                                       const std::string& tableName,
                                                                       const int64_t offset,
                                                                       const int64_t limit,
                                                                       const std::map<std::string, std::string>& options,
                                                                       GetRecordsFromCollectionResponse<TResponse>& response_ ) const
{
    GetRecordsFromCollectionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(schema_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    return response_;
}


/**
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as {@link
 * #deleteRecords(const std::string&,const std::vector<std::string>&,const std::map<std::string, std::string>&) const}.
 * <p>
 * This operation supports paging through the data via the @a offset and @a
 * limit parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from join tables using this operation.
 * 
 * @tparam <TResponse>  The type of object being retrieved.
 * 
 * @param[in] type_  Type object used for decoding returned objects.
 * @param tableName  Name of the collection or table from which records are to
 *                   be retrieved. Must be an existing collection or table.
 * @param offset  A positive integer indicating the number of initial results
 *                to skip (this can be useful for paging through the results).
 *                The minimum allowed value is 0. The maximum allowed value is
 *                MAX_INT.
 * @param limit  A positive integer indicating the maximum number of results to
 *               be returned, or END_OF_SET (-9999) to indicate that the max
 *               number of results should be returned.
 * @param options
 *                 <ul>
 *                         <li>
 *                 gpudb::get_records_from_collection_return_record_ids: If
 *                 'true' then return the internal record ID along with each
 *                 returned record. Default is 'false'.
 *                 <ul>
 *                         <li> gpudb::get_records_from_collection_true
 *                         <li> gpudb::get_records_from_collection_false
 *                 </ul>
 *                 The default value is
 *                 gpudb::get_records_from_collection_false.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TResponse> 
GetRecordsFromCollectionResponse<TResponse>& getRecordsFromCollection( const Type& type_,
                                                                       const std::string& tableName,
                                                                       const int64_t offset,
                                                                       const int64_t limit,
                                                                       const std::map<std::string, std::string>& options,
                                                                       GetRecordsFromCollectionResponse<TResponse>& response_ ) const
{
    GetRecordsFromCollectionRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.offset = offset;
    actualRequest_.limit = limit;
    actualRequest_.options = options;
    RawGetRecordsFromCollectionResponse actualResponse_;
    submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
    response_.tableName = actualResponse_.tableName;
    response_.typeNames = actualResponse_.typeNames;
    response_.data.resize(actualResponse_.recordsBinary.size(), TResponse(type_));
    avro::decode(&response_.data[0], &actualResponse_.recordsBinary[0], actualResponse_.recordsBinary.size(), this->m_threadCount, this->m_executor);
    response_.recordIds = actualResponse_.recordIds;
    return response_;
}


/**
 * Grants a system-level permission to a user or role.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

GrantPermissionSystemResponse grantPermissionSystem( const GrantPermissionSystemRequest& request_ ) const;

/**
 * Grants a system-level permission to a user or role.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

GrantPermissionSystemResponse& grantPermissionSystem( const GrantPermissionSystemRequest& request_,
                                                      GrantPermissionSystemResponse& response_ ) const;

/**
 * Grants a system-level permission to a user or role.
 * 
 * @param name  Name of the user or role to which the permission will be
 *              granted. Must be an existing user or role.
 * @param permission  Permission to grant to the user or role.
 *                    <ul>
 *                            <li> gpudb::grant_permission_system_system_admin:
 *                    Full access to all data and system functions.
 *                            <li> gpudb::grant_permission_system_system_write:
 *                    Read and write access to all tables.
 *                            <li> gpudb::grant_permission_system_system_read:
 *                    Read-only access to all tables.
 *                    </ul>
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

GrantPermissionSystemResponse grantPermissionSystem( const std::string& name,
                                                     const std::string& permission,
                                                     const std::map<std::string, std::string>& options ) const;

/**
 * Grants a system-level permission to a user or role.
 * 
 * @param name  Name of the user or role to which the permission will be
 *              granted. Must be an existing user or role.
 * @param permission  Permission to grant to the user or role.
 *                    <ul>
 *                            <li> gpudb::grant_permission_system_system_admin:
 *                    Full access to all data and system functions.
 *                            <li> gpudb::grant_permission_system_system_write:
 *                    Read and write access to all tables.
 *                            <li> gpudb::grant_permission_system_system_read:
 *                    Read-only access to all tables.
 *                    </ul>
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

GrantPermissionSystemResponse& grantPermissionSystem( const std::string& name,
                                                      const std::string& permission,
                                                      const std::map<std::string, std::string>& options,
                                                      GrantPermissionSystemResponse& response_ ) const;

/**
 * Grants a table-level permission to a user or role.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

GrantPermissionTableResponse grantPermissionTable( const GrantPermissionTableRequest& request_ ) const;

/**
 * Grants a table-level permission to a user or role.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

GrantPermissionTableResponse& grantPermissionTable( const GrantPermissionTableRequest& request_,
                                                    GrantPermissionTableResponse& response_ ) const;

/**
 * Grants a table-level permission to a user or role.
 * 
 * @param name  Name of the user or role to which the permission will be
 *              granted. Must be an existing user or role.
 * @param permission  Permission to grant to the user or role.
 *                    <ul>
 *                            <li> gpudb::grant_permission_table_table_admin:
 *                    Full read/write and administrative access to the table.
 *                            <li> gpudb::grant_permission_table_table_insert:
 *                    Insert access to the table.
 *                            <li> gpudb::grant_permission_table_table_update:
 *                    Update access to the table.
 *                            <li> gpudb::grant_permission_table_table_delete:
 *                    Delete access to the table.
 *                            <li> gpudb::grant_permission_table_table_read:
 *                    Read access to the table.
 *                    </ul>
 * @param tableName  Name of the table to which the permission grants access.
 *                   Must be an existing table, collection, or view. If a
 *                   collection, the permission also applies to tables and
 *                   views in the collection.
 * @param filterExpression  Reserved for future use.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

GrantPermissionTableResponse grantPermissionTable( const std::string& name,
                                                   const std::string& permission,
                                                   const std::string& tableName,
                                                   const std::string& filterExpression,
                                                   const std::map<std::string, std::string>& options ) const;

/**
 * Grants a table-level permission to a user or role.
 * 
 * @param name  Name of the user or role to which the permission will be
 *              granted. Must be an existing user or role.
 * @param permission  Permission to grant to the user or role.
 *                    <ul>
 *                            <li> gpudb::grant_permission_table_table_admin:
 *                    Full read/write and administrative access to the table.
 *                            <li> gpudb::grant_permission_table_table_insert:
 *                    Insert access to the table.
 *                            <li> gpudb::grant_permission_table_table_update:
 *                    Update access to the table.
 *                            <li> gpudb::grant_permission_table_table_delete:
 *                    Delete access to the table.
 *                            <li> gpudb::grant_permission_table_table_read:
 *                    Read access to the table.
 *                    </ul>
 * @param tableName  Name of the table to which the permission grants access.
 *                   Must be an existing table, collection, or view. If a
 *                   collection, the permission also applies to tables and
 *                   views in the collection.
 * @param filterExpression  Reserved for future use.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

GrantPermissionTableResponse& grantPermissionTable( const std::string& name,
                                                    const std::string& permission,
                                                    const std::string& tableName,
                                                    const std::string& filterExpression,
                                                    const std::map<std::string, std::string>& options,
                                                    GrantPermissionTableResponse& response_ ) const;

/**
 * Grants membership in a role to a user or role.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

GrantRoleResponse grantRole( const GrantRoleRequest& request_ ) const;

/**
 * Grants membership in a role to a user or role.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

GrantRoleResponse& grantRole( const GrantRoleRequest& request_,
                              GrantRoleResponse& response_ ) const;

/**
 * Grants membership in a role to a user or role.
 * 
 * @param role  Name of the role in which membership will be granted. Must be
 *              an existing role.
 * @param member  Name of the user or role that will be granted membership in
 *                @a role. Must be an existing user or role.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

GrantRoleResponse grantRole( const std::string& role,
                             const std::string& member,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Grants membership in a role to a user or role.
 * 
 * @param role  Name of the role in which membership will be granted. Must be
 *              an existing role.
 * @param member  Name of the user or role that will be granted membership in
 *                @a role. Must be an existing user or role.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

GrantRoleResponse& grantRole( const std::string& role,
                              const std::string& member,
                              const std::map<std::string, std::string>& options,
                              GrantRoleResponse& response_ ) const;

/**
 * Checks the existence of a proc with the given name.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

HasProcResponse hasProc( const HasProcRequest& request_ ) const;

/**
 * Checks the existence of a proc with the given name.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

HasProcResponse& hasProc( const HasProcRequest& request_,
                          HasProcResponse& response_ ) const;

/**
 * Checks the existence of a proc with the given name.
 * 
 * @param procName  Name of the proc to check for existence.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

HasProcResponse hasProc( const std::string& procName,
                         const std::map<std::string, std::string>& options ) const;

/**
 * Checks the existence of a proc with the given name.
 * 
 * @param procName  Name of the proc to check for existence.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

HasProcResponse& hasProc( const std::string& procName,
                          const std::map<std::string, std::string>& options,
                          HasProcResponse& response_ ) const;

/**
 * Checks for the existence of a table with the given name.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

HasTableResponse hasTable( const HasTableRequest& request_ ) const;

/**
 * Checks for the existence of a table with the given name.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

HasTableResponse& hasTable( const HasTableRequest& request_,
                            HasTableResponse& response_ ) const;

/**
 * Checks for the existence of a table with the given name.
 * 
 * @param tableName  Name of the table to check for existence.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

HasTableResponse hasTable( const std::string& tableName,
                           const std::map<std::string, std::string>& options ) const;

/**
 * Checks for the existence of a table with the given name.
 * 
 * @param tableName  Name of the table to check for existence.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

HasTableResponse& hasTable( const std::string& tableName,
                            const std::map<std::string, std::string>& options,
                            HasTableResponse& response_ ) const;

/**
 * Check for the existence of a type.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

HasTypeResponse hasType( const HasTypeRequest& request_ ) const;

/**
 * Check for the existence of a type.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

HasTypeResponse& hasType( const HasTypeRequest& request_,
                          HasTypeResponse& response_ ) const;

/**
 * Check for the existence of a type.
 * 
 * @param typeId  Id of the type returned in response to /create/type request.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

HasTypeResponse hasType( const std::string& typeId,
                         const std::map<std::string, std::string>& options ) const;

/**
 * Check for the existence of a type.
 * 
 * @param typeId  Id of the type returned in response to /create/type request.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

HasTypeResponse& hasType( const std::string& typeId,
                          const std::map<std::string, std::string>& options,
                          HasTypeResponse& response_ ) const;

/**
 * Adds multiple records to the specified table. The operation is synchronous,
 * meaning that a response will not be returned until all the records are fully
 * inserted and available. The response payload provides the counts of the
 * number of records actually inserted and/or updated, and can provide the
 * unique identifier of each added record.
 * <p>
 * The @a options parameter can be used to customize this function's behavior.
 * <p>
 * The @a update_on_existing_pk option specifies the record collision policy
 * for inserting into a table with a <a
 * href="../../concepts/tables.html#primary-keys" target="_top">primary
 * key</a>, but is ignored if no primary key exists.
 * <p>
 * The @a return_record_ids option indicates that the database should return
 * the unique identifiers of inserted records.
 * <p>
 * The @a route_to_address option directs that inserted records should be
 * targeted for a particular database node.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

InsertRecordsResponse insertRecordsRaw( const RawInsertRecordsRequest& request_ ) const;

/**
 * Adds multiple records to the specified table. The operation is synchronous,
 * meaning that a response will not be returned until all the records are fully
 * inserted and available. The response payload provides the counts of the
 * number of records actually inserted and/or updated, and can provide the
 * unique identifier of each added record.
 * <p>
 * The @a options parameter can be used to customize this function's behavior.
 * <p>
 * The @a update_on_existing_pk option specifies the record collision policy
 * for inserting into a table with a <a
 * href="../../concepts/tables.html#primary-keys" target="_top">primary
 * key</a>, but is ignored if no primary key exists.
 * <p>
 * The @a return_record_ids option indicates that the database should return
 * the unique identifiers of inserted records.
 * <p>
 * The @a route_to_address option directs that inserted records should be
 * targeted for a particular database node.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

InsertRecordsResponse& insertRecordsRaw( const RawInsertRecordsRequest& request_,
                                         InsertRecordsResponse& response_ ) const;

/**
 * Adds multiple records to the specified table. The operation is synchronous,
 * meaning that a response will not be returned until all the records are fully
 * inserted and available. The response payload provides the counts of the
 * number of records actually inserted and/or updated, and can provide the
 * unique identifier of each added record.
 * <p>
 * The @a options parameter can be used to customize this function's behavior.
 * <p>
 * The @a update_on_existing_pk option specifies the record collision policy
 * for inserting into a table with a <a
 * href="../../concepts/tables.html#primary-keys" target="_top">primary
 * key</a>, but is ignored if no primary key exists.
 * <p>
 * The @a return_record_ids option indicates that the database should return
 * the unique identifiers of inserted records.
 * <p>
 * The @a route_to_address option directs that inserted records should be
 * targeted for a particular database node.
 * 
 * @tparam <TRequest>  The type of object being added.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TRequest> 
InsertRecordsResponse insertRecords( const InsertRecordsRequest<TRequest>& request_ ) const
{
    RawInsertRecordsRequest actualRequest_;
    actualRequest_.tableName = request_.tableName;
    avro::encode(actualRequest_.list, request_.data, this->m_threadCount, this->m_executor);
    actualRequest_.options = request_.options;
    InsertRecordsResponse actualResponse_;
    submitRequest("/insert/records", actualRequest_, actualResponse_, true);
    return actualResponse_;
}


/**
 * Adds multiple records to the specified table. The operation is synchronous,
 * meaning that a response will not be returned until all the records are fully
 * inserted and available. The response payload provides the counts of the
 * number of records actually inserted and/or updated, and can provide the
 * unique identifier of each added record.
 * <p>
 * The @a options parameter can be used to customize this function's behavior.
 * <p>
 * The @a update_on_existing_pk option specifies the record collision policy
 * for inserting into a table with a <a
 * href="../../concepts/tables.html#primary-keys" target="_top">primary
 * key</a>, but is ignored if no primary key exists.
 * <p>
 * The @a return_record_ids option indicates that the database should return
 * the unique identifiers of inserted records.
 * <p>
 * The @a route_to_address option directs that inserted records should be
 * targeted for a particular database node.
 * 
 * @tparam <TRequest>  The type of object being added.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TRequest> 
InsertRecordsResponse& insertRecords( const InsertRecordsRequest<TRequest>& request_,
                                      InsertRecordsResponse& response_ ) const
{
    RawInsertRecordsRequest actualRequest_;
    actualRequest_.tableName = request_.tableName;
    avro::encode(actualRequest_.list, request_.data, this->m_threadCount, this->m_executor);
    actualRequest_.options = request_.options;
    submitRequest("/insert/records", actualRequest_, response_, true);
    return response_;
}


/**
 * Adds multiple records to the specified table. The operation is synchronous,
 * meaning that a response will not be returned until all the records are fully
 * inserted and available. The response payload provides the counts of the
 * number of records actually inserted and/or updated, and can provide the
 * unique identifier of each added record.
 * <p>
 * The @a options parameter can be used to customize this function's behavior.
 * <p>
 * The @a update_on_existing_pk option specifies the record collision policy
 * for inserting into a table with a <a
 * href="../../concepts/tables.html#primary-keys" target="_top">primary
 * key</a>, but is ignored if no primary key exists.
 * <p>
 * The @a return_record_ids option indicates that the database should return
 * the unique identifiers of inserted records.
 * <p>
 * The @a route_to_address option directs that inserted records should be
 * targeted for a particular database node.
 * 
 * @tparam <TRequest>  The type of object being added.
 * 
 * @param tableName  Table to which the records are to be added. Must be an
 *                   existing table.
 * @param data  An array of binary-encoded data for the records to be added.
 *              All records must be of the same type as that of the table.
 *              Empty array if @a listEncoding is @a json.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::insert_records_update_on_existing_pk:
 *                 Specifies the record collision policy for inserting into a
 *                 table with a <a
 *                 href="../../concepts/tables.html#primary-keys"
 *                 target="_top">primary key</a>.  If set to @a true, any
 *                 existing table record with primary key values that match
 *                 those of a record being inserted will be replaced by that
 *                 new record.  If set to @a false, any existing table record
 *                 with primary key values that match those of a record being
 *                 inserted will remain unchanged and the new record discarded.
 *                 If the specified table does not have a primary key, then
 *                 this option is ignored.
 *                 <ul>
 *                         <li> gpudb::insert_records_true
 *                         <li> gpudb::insert_records_false
 *                 </ul>
 *                 The default value is gpudb::insert_records_false.
 *                         <li> gpudb::insert_records_return_record_ids: If @a
 *                 true then return the internal record id along for each
 *                 inserted record.
 *                 <ul>
 *                         <li> gpudb::insert_records_true
 *                         <li> gpudb::insert_records_false
 *                 </ul>
 *                 The default value is gpudb::insert_records_false.
 *                         <li> gpudb::insert_records_route_to_address: Route
 *                 to a specific rank/tom. Option not suitable for tables using
 *                 primary/shard keys
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TRequest> 
InsertRecordsResponse insertRecords( const std::string& tableName,
                                     const std::vector<TRequest>& data,
                                     const std::map<std::string, std::string>& options ) const
{
    RawInsertRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    avro::encode(actualRequest_.list, data, this->m_threadCount, this->m_executor);
    actualRequest_.options = options;
    InsertRecordsResponse actualResponse_;
    submitRequest("/insert/records", actualRequest_, actualResponse_, true);
    return actualResponse_;
}


/**
 * Adds multiple records to the specified table. The operation is synchronous,
 * meaning that a response will not be returned until all the records are fully
 * inserted and available. The response payload provides the counts of the
 * number of records actually inserted and/or updated, and can provide the
 * unique identifier of each added record.
 * <p>
 * The @a options parameter can be used to customize this function's behavior.
 * <p>
 * The @a update_on_existing_pk option specifies the record collision policy
 * for inserting into a table with a <a
 * href="../../concepts/tables.html#primary-keys" target="_top">primary
 * key</a>, but is ignored if no primary key exists.
 * <p>
 * The @a return_record_ids option indicates that the database should return
 * the unique identifiers of inserted records.
 * <p>
 * The @a route_to_address option directs that inserted records should be
 * targeted for a particular database node.
 * 
 * @tparam <TRequest>  The type of object being added.
 * 
 * @param tableName  Table to which the records are to be added. Must be an
 *                   existing table.
 * @param data  An array of binary-encoded data for the records to be added.
 *              All records must be of the same type as that of the table.
 *              Empty array if @a listEncoding is @a json.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::insert_records_update_on_existing_pk:
 *                 Specifies the record collision policy for inserting into a
 *                 table with a <a
 *                 href="../../concepts/tables.html#primary-keys"
 *                 target="_top">primary key</a>.  If set to @a true, any
 *                 existing table record with primary key values that match
 *                 those of a record being inserted will be replaced by that
 *                 new record.  If set to @a false, any existing table record
 *                 with primary key values that match those of a record being
 *                 inserted will remain unchanged and the new record discarded.
 *                 If the specified table does not have a primary key, then
 *                 this option is ignored.
 *                 <ul>
 *                         <li> gpudb::insert_records_true
 *                         <li> gpudb::insert_records_false
 *                 </ul>
 *                 The default value is gpudb::insert_records_false.
 *                         <li> gpudb::insert_records_return_record_ids: If @a
 *                 true then return the internal record id along for each
 *                 inserted record.
 *                 <ul>
 *                         <li> gpudb::insert_records_true
 *                         <li> gpudb::insert_records_false
 *                 </ul>
 *                 The default value is gpudb::insert_records_false.
 *                         <li> gpudb::insert_records_route_to_address: Route
 *                 to a specific rank/tom. Option not suitable for tables using
 *                 primary/shard keys
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TRequest> 
InsertRecordsResponse& insertRecords( const std::string& tableName,
                                      const std::vector<TRequest>& data,
                                      const std::map<std::string, std::string>& options,
                                      InsertRecordsResponse& response_ ) const
{
    RawInsertRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    avro::encode(actualRequest_.list, data, this->m_threadCount, this->m_executor);
    actualRequest_.options = options;
    submitRequest("/insert/records", actualRequest_, response_, true);
    return response_;
}


/**
 * Generates a specified number of random records and adds them to the given
 * table. There is an optional parameter that allows the user to customize the
 * ranges of the column values. It also allows the user to specify linear
 * profiles for some or all columns in which case linear values are generated
 * rather than random ones. Only individual tables are supported for this
 * operation.
 * <p>
 * This operation is synchronous, meaning that a response will not be returned
 * until all random records are fully available.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

InsertRecordsRandomResponse insertRecordsRandom( const InsertRecordsRandomRequest& request_ ) const;

/**
 * Generates a specified number of random records and adds them to the given
 * table. There is an optional parameter that allows the user to customize the
 * ranges of the column values. It also allows the user to specify linear
 * profiles for some or all columns in which case linear values are generated
 * rather than random ones. Only individual tables are supported for this
 * operation.
 * <p>
 * This operation is synchronous, meaning that a response will not be returned
 * until all random records are fully available.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

InsertRecordsRandomResponse& insertRecordsRandom( const InsertRecordsRandomRequest& request_,
                                                  InsertRecordsRandomResponse& response_ ) const;

/**
 * Generates a specified number of random records and adds them to the given
 * table. There is an optional parameter that allows the user to customize the
 * ranges of the column values. It also allows the user to specify linear
 * profiles for some or all columns in which case linear values are generated
 * rather than random ones. Only individual tables are supported for this
 * operation.
 * <p>
 * This operation is synchronous, meaning that a response will not be returned
 * until all random records are fully available.
 * 
 * @param tableName  Table to which random records will be added. Must be an
 *                   existing table.  Also, must be an individual table, not a
 *                   collection of tables, nor a view of a table.
 * @param count  Number of records to generate.
 * @param options  Optional parameter to pass in specifications for the
 *                 randomness of the values.  This map is different from the
 *                 *options* parameter of most other endpoints in that it is a
 *                 map of string to map of string to doubles, while most others
 *                 are maps of string to string.  In this map, the top level
 *                 keys represent which column's parameters are being
 *                 specified, while the internal keys represents which
 *                 parameter is being specified.  These parameters take on
 *                 different meanings depending on the type of the column.
 *                 Below follows a more detailed description of the map:
 *                 <ul>
 *                         <li> gpudb::insert_records_random_seed: If provided,
 *                 the internal random number generator will be initialized
 *                 with the given value.  The minimum is 0.  This allows for
 *                 the same set of random numbers to be generated across
 *                 invocation of this endpoint in case the user wants to repeat
 *                 the test.  Since @a options, is a map of maps, we need an
 *                 internal map to provide the seed value.  For example, to
 *                 pass 100 as the seed value through this parameter, you need
 *                 something equivalent to: 'options' = {'seed': { 'value': 100
 *                 } }
 *                 <ul>
 *                         <li> gpudb::insert_records_random_value: Pass the
 *                 seed value here.
 *                 </ul>
 *                         <li> gpudb::insert_records_random_all: This key
 *                 indicates that the specifications relayed in the internal
 *                 map are to be applied to all columns of the records.
 *                 <ul>
 *                         <li> gpudb::insert_records_random_min: For numerical
 *                 columns, the minimum of the generated values is set to this
 *                 value.  Default is -99999.  For point, shape, and track
 *                 semantic types, min for numeric 'x' and 'y' columns needs to
 *                 be within [-180, 180] and [-90, 90], respectively. The
 *                 default minimum possible values for these columns in such
 *                 cases are -180.0 and -90.0. For the 'TIMESTAMP' column, the
 *                 default minimum corresponds to Jan 1, 2010.
 *                 For string columns, the minimum length of the randomly
 *                 generated strings is set to this value (default is 0). If
 *                 both minimum and maximum are provided, minimum must be less
 *                 than or equal to max. Value needs to be within [0, 200].
 *                 If the min is outside the accepted ranges for strings
 *                 columns and 'x' and 'y' columns for point/shape/track types,
 *                 then those parameters will not be set; however, an error
 *                 will not be thrown in such a case. It is the responsibility
 *                 of the user to use the @a all parameter judiciously.
 *                         <li> gpudb::insert_records_random_max: For numerical
 *                 columns, the maximum of the generated values is set to this
 *                 value. Default is 99999. For point, shape, and track
 *                 semantic types, max for numeric 'x' and 'y' columns needs to
 *                 be within [-180, 180] and [-90, 90], respectively. The
 *                 default minimum possible values for these columns in such
 *                 cases are 180.0 and 90.0.
 *                 For string columns, the maximum length of the randomly
 *                 generated strings is set to this value (default is 200). If
 *                 both minimum and maximum are provided, *max* must be greater
 *                 than or equal to *min*. Value needs to be within [0, 200].
 *                 If the *max* is outside the accepted ranges for strings
 *                 columns and 'x' and 'y' columns for point/shape/track types,
 *                 then those parameters will not be set; however, an error
 *                 will not be thrown in such a case. It is the responsibility
 *                 of the user to use the @a all parameter judiciously.
 *                         <li> gpudb::insert_records_random_interval: If
 *                 specified, generate values for all columns evenly spaced
 *                 with the given interval value. If a max value is specified
 *                 for a given column the data is randomly generated between
 *                 min and max and decimated down to the interval. If no max is
 *                 provided the data is linerally generated starting at the
 *                 minimum value (instead of generating random data). For
 *                 non-decimated string-type columns the interval value is
 *                 ignored. Instead the values are generated following the
 *                 pattern: 'attrname_creationIndex#', i.e. the column name
 *                 suffixed with an underscore and a running counter (starting
 *                 at 0). For string types with limited size (eg char4) the
 *                 prefix is dropped. No nulls will be generated for nullable
 *                 columns.
 *                         <li> gpudb::insert_records_random_null_percentage:
 *                 If specified, then generate the given percentage of the
 *                 count as nulls for all nullable columns.  This option will
 *                 be ignored for non-nullable columns.  The value must be
 *                 within the range [0, 1.0].  The default value is 5% (0.05).
 *                         <li> gpudb::insert_records_random_cardinality: If
 *                 specified, limit the randomly generated values to a fixed
 *                 set. Not allowed on a column with interval specified, and is
 *                 not applicable to WKT or Track-specific columns. The value
 *                 must be greater than 0. This option is disabled by default.
 *                 </ul>
 *                         <li> gpudb::insert_records_random_attr_name: Set the
 *                 following parameters for the column specified by the key.
 *                 This overrides any parameter set by @a all.
 *                 <ul>
 *                         <li> gpudb::insert_records_random_min: For numerical
 *                 columns, the minimum of the generated values is set to this
 *                 value.  Default is -99999.  For point, shape, and track
 *                 semantic types, min for numeric 'x' and 'y' columns needs to
 *                 be within [-180, 180] and [-90, 90], respectively. The
 *                 default minimum possible values for these columns in such
 *                 cases are -180.0 and -90.0. For the 'TIMESTAMP' column, the
 *                 default minimum corresponds to Jan 1, 2010.
 *                 For string columns, the minimum length of the randomly
 *                 generated strings is set to this value (default is 0). If
 *                 both minimum and maximum are provided, minimum must be less
 *                 than or equal to max. Value needs to be within [0, 200].
 *                 If the min is outside the accepted ranges for strings
 *                 columns and 'x' and 'y' columns for point/shape/track types,
 *                 then those parameters will not be set; however, an error
 *                 will not be thrown in such a case. It is the responsibility
 *                 of the user to use the @a all parameter judiciously.
 *                         <li> gpudb::insert_records_random_max: For numerical
 *                 columns, the maximum of the generated values is set to this
 *                 value. Default is 99999. For point, shape, and track
 *                 semantic types, max for numeric 'x' and 'y' columns needs to
 *                 be within [-180, 180] and [-90, 90], respectively. The
 *                 default minimum possible values for these columns in such
 *                 cases are 180.0 and 90.0.
 *                 For string columns, the maximum length of the randomly
 *                 generated strings is set to this value (default is 200). If
 *                 both minimum and maximum are provided, *max* must be greater
 *                 than or equal to *min*. Value needs to be within [0, 200].
 *                 If the *max* is outside the accepted ranges for strings
 *                 columns and 'x' and 'y' columns for point/shape/track types,
 *                 then those parameters will not be set; however, an error
 *                 will not be thrown in such a case. It is the responsibility
 *                 of the user to use the @a all parameter judiciously.
 *                         <li> gpudb::insert_records_random_interval: If
 *                 specified, generate values for all columns evenly spaced
 *                 with the given interval value. If a max value is specified
 *                 for a given column the data is randomly generated between
 *                 min and max and decimated down to the interval. If no max is
 *                 provided the data is linerally generated starting at the
 *                 minimum value (instead of generating random data). For
 *                 non-decimated string-type columns the interval value is
 *                 ignored. Instead the values are generated following the
 *                 pattern: 'attrname_creationIndex#', i.e. the column name
 *                 suffixed with an underscore and a running counter (starting
 *                 at 0). For string types with limited size (eg char4) the
 *                 prefix is dropped. No nulls will be generated for nullable
 *                 columns.
 *                         <li> gpudb::insert_records_random_null_percentage:
 *                 If specified and if this column is nullable, then generate
 *                 the given percentage of the count as nulls.  This option
 *                 will result in an error if the column is not nullable.  The
 *                 value must be within the range [0, 1.0].  The default value
 *                 is 5% (0.05).
 *                         <li> gpudb::insert_records_random_cardinality: If
 *                 specified, limit the randomly generated values to a fixed
 *                 set. Not allowed on a column with interval specified, and is
 *                 not applicable to WKT or Track-specific columns. The value
 *                 must be greater than 0. This option is disabled by default.
 *                 </ul>
 *                         <li> gpudb::insert_records_random_track_length: This
 *                 key-map pair is only valid for track type data sets (an
 *                 error is thrown otherwise).  No nulls would be generated for
 *                 nullable columns.
 *                 <ul>
 *                         <li> gpudb::insert_records_random_min: Minimum
 *                 possible length for generated series; default is 100 records
 *                 per series. Must be an integral value within the range [1,
 *                 500]. If both min and max are specified, min must be less
 *                 than or equal to max.
 *                         <li> gpudb::insert_records_random_max: Maximum
 *                 possible length for generated series; default is 500 records
 *                 per series. Must be an integral value within the range [1,
 *                 500]. If both min and max are specified, max must be greater
 *                 than or equal to min.
 *                 </ul>
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

InsertRecordsRandomResponse insertRecordsRandom( const std::string& tableName,
                                                 const int64_t count,
                                                 const std::map<std::string, std::map<std::string, double> >& options ) const;

/**
 * Generates a specified number of random records and adds them to the given
 * table. There is an optional parameter that allows the user to customize the
 * ranges of the column values. It also allows the user to specify linear
 * profiles for some or all columns in which case linear values are generated
 * rather than random ones. Only individual tables are supported for this
 * operation.
 * <p>
 * This operation is synchronous, meaning that a response will not be returned
 * until all random records are fully available.
 * 
 * @param tableName  Table to which random records will be added. Must be an
 *                   existing table.  Also, must be an individual table, not a
 *                   collection of tables, nor a view of a table.
 * @param count  Number of records to generate.
 * @param options  Optional parameter to pass in specifications for the
 *                 randomness of the values.  This map is different from the
 *                 *options* parameter of most other endpoints in that it is a
 *                 map of string to map of string to doubles, while most others
 *                 are maps of string to string.  In this map, the top level
 *                 keys represent which column's parameters are being
 *                 specified, while the internal keys represents which
 *                 parameter is being specified.  These parameters take on
 *                 different meanings depending on the type of the column.
 *                 Below follows a more detailed description of the map:
 *                 <ul>
 *                         <li> gpudb::insert_records_random_seed: If provided,
 *                 the internal random number generator will be initialized
 *                 with the given value.  The minimum is 0.  This allows for
 *                 the same set of random numbers to be generated across
 *                 invocation of this endpoint in case the user wants to repeat
 *                 the test.  Since @a options, is a map of maps, we need an
 *                 internal map to provide the seed value.  For example, to
 *                 pass 100 as the seed value through this parameter, you need
 *                 something equivalent to: 'options' = {'seed': { 'value': 100
 *                 } }
 *                 <ul>
 *                         <li> gpudb::insert_records_random_value: Pass the
 *                 seed value here.
 *                 </ul>
 *                         <li> gpudb::insert_records_random_all: This key
 *                 indicates that the specifications relayed in the internal
 *                 map are to be applied to all columns of the records.
 *                 <ul>
 *                         <li> gpudb::insert_records_random_min: For numerical
 *                 columns, the minimum of the generated values is set to this
 *                 value.  Default is -99999.  For point, shape, and track
 *                 semantic types, min for numeric 'x' and 'y' columns needs to
 *                 be within [-180, 180] and [-90, 90], respectively. The
 *                 default minimum possible values for these columns in such
 *                 cases are -180.0 and -90.0. For the 'TIMESTAMP' column, the
 *                 default minimum corresponds to Jan 1, 2010.
 *                 For string columns, the minimum length of the randomly
 *                 generated strings is set to this value (default is 0). If
 *                 both minimum and maximum are provided, minimum must be less
 *                 than or equal to max. Value needs to be within [0, 200].
 *                 If the min is outside the accepted ranges for strings
 *                 columns and 'x' and 'y' columns for point/shape/track types,
 *                 then those parameters will not be set; however, an error
 *                 will not be thrown in such a case. It is the responsibility
 *                 of the user to use the @a all parameter judiciously.
 *                         <li> gpudb::insert_records_random_max: For numerical
 *                 columns, the maximum of the generated values is set to this
 *                 value. Default is 99999. For point, shape, and track
 *                 semantic types, max for numeric 'x' and 'y' columns needs to
 *                 be within [-180, 180] and [-90, 90], respectively. The
 *                 default minimum possible values for these columns in such
 *                 cases are 180.0 and 90.0.
 *                 For string columns, the maximum length of the randomly
 *                 generated strings is set to this value (default is 200). If
 *                 both minimum and maximum are provided, *max* must be greater
 *                 than or equal to *min*. Value needs to be within [0, 200].
 *                 If the *max* is outside the accepted ranges for strings
 *                 columns and 'x' and 'y' columns for point/shape/track types,
 *                 then those parameters will not be set; however, an error
 *                 will not be thrown in such a case. It is the responsibility
 *                 of the user to use the @a all parameter judiciously.
 *                         <li> gpudb::insert_records_random_interval: If
 *                 specified, generate values for all columns evenly spaced
 *                 with the given interval value. If a max value is specified
 *                 for a given column the data is randomly generated between
 *                 min and max and decimated down to the interval. If no max is
 *                 provided the data is linerally generated starting at the
 *                 minimum value (instead of generating random data). For
 *                 non-decimated string-type columns the interval value is
 *                 ignored. Instead the values are generated following the
 *                 pattern: 'attrname_creationIndex#', i.e. the column name
 *                 suffixed with an underscore and a running counter (starting
 *                 at 0). For string types with limited size (eg char4) the
 *                 prefix is dropped. No nulls will be generated for nullable
 *                 columns.
 *                         <li> gpudb::insert_records_random_null_percentage:
 *                 If specified, then generate the given percentage of the
 *                 count as nulls for all nullable columns.  This option will
 *                 be ignored for non-nullable columns.  The value must be
 *                 within the range [0, 1.0].  The default value is 5% (0.05).
 *                         <li> gpudb::insert_records_random_cardinality: If
 *                 specified, limit the randomly generated values to a fixed
 *                 set. Not allowed on a column with interval specified, and is
 *                 not applicable to WKT or Track-specific columns. The value
 *                 must be greater than 0. This option is disabled by default.
 *                 </ul>
 *                         <li> gpudb::insert_records_random_attr_name: Set the
 *                 following parameters for the column specified by the key.
 *                 This overrides any parameter set by @a all.
 *                 <ul>
 *                         <li> gpudb::insert_records_random_min: For numerical
 *                 columns, the minimum of the generated values is set to this
 *                 value.  Default is -99999.  For point, shape, and track
 *                 semantic types, min for numeric 'x' and 'y' columns needs to
 *                 be within [-180, 180] and [-90, 90], respectively. The
 *                 default minimum possible values for these columns in such
 *                 cases are -180.0 and -90.0. For the 'TIMESTAMP' column, the
 *                 default minimum corresponds to Jan 1, 2010.
 *                 For string columns, the minimum length of the randomly
 *                 generated strings is set to this value (default is 0). If
 *                 both minimum and maximum are provided, minimum must be less
 *                 than or equal to max. Value needs to be within [0, 200].
 *                 If the min is outside the accepted ranges for strings
 *                 columns and 'x' and 'y' columns for point/shape/track types,
 *                 then those parameters will not be set; however, an error
 *                 will not be thrown in such a case. It is the responsibility
 *                 of the user to use the @a all parameter judiciously.
 *                         <li> gpudb::insert_records_random_max: For numerical
 *                 columns, the maximum of the generated values is set to this
 *                 value. Default is 99999. For point, shape, and track
 *                 semantic types, max for numeric 'x' and 'y' columns needs to
 *                 be within [-180, 180] and [-90, 90], respectively. The
 *                 default minimum possible values for these columns in such
 *                 cases are 180.0 and 90.0.
 *                 For string columns, the maximum length of the randomly
 *                 generated strings is set to this value (default is 200). If
 *                 both minimum and maximum are provided, *max* must be greater
 *                 than or equal to *min*. Value needs to be within [0, 200].
 *                 If the *max* is outside the accepted ranges for strings
 *                 columns and 'x' and 'y' columns for point/shape/track types,
 *                 then those parameters will not be set; however, an error
 *                 will not be thrown in such a case. It is the responsibility
 *                 of the user to use the @a all parameter judiciously.
 *                         <li> gpudb::insert_records_random_interval: If
 *                 specified, generate values for all columns evenly spaced
 *                 with the given interval value. If a max value is specified
 *                 for a given column the data is randomly generated between
 *                 min and max and decimated down to the interval. If no max is
 *                 provided the data is linerally generated starting at the
 *                 minimum value (instead of generating random data). For
 *                 non-decimated string-type columns the interval value is
 *                 ignored. Instead the values are generated following the
 *                 pattern: 'attrname_creationIndex#', i.e. the column name
 *                 suffixed with an underscore and a running counter (starting
 *                 at 0). For string types with limited size (eg char4) the
 *                 prefix is dropped. No nulls will be generated for nullable
 *                 columns.
 *                         <li> gpudb::insert_records_random_null_percentage:
 *                 If specified and if this column is nullable, then generate
 *                 the given percentage of the count as nulls.  This option
 *                 will result in an error if the column is not nullable.  The
 *                 value must be within the range [0, 1.0].  The default value
 *                 is 5% (0.05).
 *                         <li> gpudb::insert_records_random_cardinality: If
 *                 specified, limit the randomly generated values to a fixed
 *                 set. Not allowed on a column with interval specified, and is
 *                 not applicable to WKT or Track-specific columns. The value
 *                 must be greater than 0. This option is disabled by default.
 *                 </ul>
 *                         <li> gpudb::insert_records_random_track_length: This
 *                 key-map pair is only valid for track type data sets (an
 *                 error is thrown otherwise).  No nulls would be generated for
 *                 nullable columns.
 *                 <ul>
 *                         <li> gpudb::insert_records_random_min: Minimum
 *                 possible length for generated series; default is 100 records
 *                 per series. Must be an integral value within the range [1,
 *                 500]. If both min and max are specified, min must be less
 *                 than or equal to max.
 *                         <li> gpudb::insert_records_random_max: Maximum
 *                 possible length for generated series; default is 500 records
 *                 per series. Must be an integral value within the range [1,
 *                 500]. If both min and max are specified, max must be greater
 *                 than or equal to min.
 *                 </ul>
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

InsertRecordsRandomResponse& insertRecordsRandom( const std::string& tableName,
                                                  const int64_t count,
                                                  const std::map<std::string, std::map<std::string, double> >& options,
                                                  InsertRecordsRandomResponse& response_ ) const;

/**
 * Adds a symbol or icon (i.e. an image) to represent data points when data is
 * rendered visually. Users must provide the symbol identifier (string), a
 * format (currently supported: 'svg' and 'svg_path'), the data for the symbol,
 * and any additional optional parameter (e.g. color). To have a symbol used
 * for rendering create a table with a string column named 'SYMBOLCODE' (along
 * with 'x' or 'y' for example). Then when the table is rendered (via <a
 * href="../../api/rest/wms_rest.html" target="_top">WMS</a>) if the
 * 'dosymbology' parameter is 'true' then the value of the 'SYMBOLCODE' column
 * is used to pick the symbol displayed for each point.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

InsertSymbolResponse insertSymbol( const InsertSymbolRequest& request_ ) const;

/**
 * Adds a symbol or icon (i.e. an image) to represent data points when data is
 * rendered visually. Users must provide the symbol identifier (string), a
 * format (currently supported: 'svg' and 'svg_path'), the data for the symbol,
 * and any additional optional parameter (e.g. color). To have a symbol used
 * for rendering create a table with a string column named 'SYMBOLCODE' (along
 * with 'x' or 'y' for example). Then when the table is rendered (via <a
 * href="../../api/rest/wms_rest.html" target="_top">WMS</a>) if the
 * 'dosymbology' parameter is 'true' then the value of the 'SYMBOLCODE' column
 * is used to pick the symbol displayed for each point.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

InsertSymbolResponse& insertSymbol( const InsertSymbolRequest& request_,
                                    InsertSymbolResponse& response_ ) const;

/**
 * Adds a symbol or icon (i.e. an image) to represent data points when data is
 * rendered visually. Users must provide the symbol identifier (string), a
 * format (currently supported: 'svg' and 'svg_path'), the data for the symbol,
 * and any additional optional parameter (e.g. color). To have a symbol used
 * for rendering create a table with a string column named 'SYMBOLCODE' (along
 * with 'x' or 'y' for example). Then when the table is rendered (via <a
 * href="../../api/rest/wms_rest.html" target="_top">WMS</a>) if the
 * 'dosymbology' parameter is 'true' then the value of the 'SYMBOLCODE' column
 * is used to pick the symbol displayed for each point.
 * 
 * @param symbolId  The id of the symbol being added. This is the same id that
 *                  should be in the 'SYMBOLCODE' column for objects using this
 *                  symbol
 * @param symbolFormat  Specifies the symbol format. Must be either 'svg' or
 *                      'svg_path'.
 *                      <ul>
 *                              <li> gpudb::insert_symbol_svg
 *                              <li> gpudb::insert_symbol_svg_path
 *                      </ul>
 * @param symbolData  The actual symbol data. If @a symbolFormat is 'svg' then
 *                    this should be the raw bytes representing an svg file. If
 *                    @a symbolFormat is svg path then this should be an svg
 *                    path string, for example:
 *                    'M25.979,12.896,5.979,12.896,5.979,19.562,25.979,19.562z'
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::insert_symbol_color: If @a symbolFormat
 *                 is 'svg' this is ignored. If @a symbolFormat is 'svg_path'
 *                 then this option specifies the color (in RRGGBB hex format)
 *                 of the path. For example, to have the path rendered in red,
 *                 used 'FF0000'. If 'color' is not provided then '00FF00'
 *                 (i.e. green) is used by default.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

InsertSymbolResponse insertSymbol( const std::string& symbolId,
                                   const std::string& symbolFormat,
                                   const std::vector<uint8_t>& symbolData,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Adds a symbol or icon (i.e. an image) to represent data points when data is
 * rendered visually. Users must provide the symbol identifier (string), a
 * format (currently supported: 'svg' and 'svg_path'), the data for the symbol,
 * and any additional optional parameter (e.g. color). To have a symbol used
 * for rendering create a table with a string column named 'SYMBOLCODE' (along
 * with 'x' or 'y' for example). Then when the table is rendered (via <a
 * href="../../api/rest/wms_rest.html" target="_top">WMS</a>) if the
 * 'dosymbology' parameter is 'true' then the value of the 'SYMBOLCODE' column
 * is used to pick the symbol displayed for each point.
 * 
 * @param symbolId  The id of the symbol being added. This is the same id that
 *                  should be in the 'SYMBOLCODE' column for objects using this
 *                  symbol
 * @param symbolFormat  Specifies the symbol format. Must be either 'svg' or
 *                      'svg_path'.
 *                      <ul>
 *                              <li> gpudb::insert_symbol_svg
 *                              <li> gpudb::insert_symbol_svg_path
 *                      </ul>
 * @param symbolData  The actual symbol data. If @a symbolFormat is 'svg' then
 *                    this should be the raw bytes representing an svg file. If
 *                    @a symbolFormat is svg path then this should be an svg
 *                    path string, for example:
 *                    'M25.979,12.896,5.979,12.896,5.979,19.562,25.979,19.562z'
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::insert_symbol_color: If @a symbolFormat
 *                 is 'svg' this is ignored. If @a symbolFormat is 'svg_path'
 *                 then this option specifies the color (in RRGGBB hex format)
 *                 of the path. For example, to have the path rendered in red,
 *                 used 'FF0000'. If 'color' is not provided then '00FF00'
 *                 (i.e. green) is used by default.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

InsertSymbolResponse& insertSymbol( const std::string& symbolId,
                                    const std::string& symbolFormat,
                                    const std::vector<uint8_t>& symbolData,
                                    const std::map<std::string, std::string>& options,
                                    InsertSymbolResponse& response_ ) const;

/**
 * Kills a running proc instance.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

KillProcResponse killProc( const KillProcRequest& request_ ) const;

/**
 * Kills a running proc instance.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

KillProcResponse& killProc( const KillProcRequest& request_,
                            KillProcResponse& response_ ) const;

/**
 * Kills a running proc instance.
 * 
 * @param runId  The run ID of the running proc instance. If the run ID is not
 *               found or the proc instance has already completed, this does
 *               nothing. If not specified, all running proc instances will be
 *               killed.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

KillProcResponse killProc( const std::string& runId,
                           const std::map<std::string, std::string>& options ) const;

/**
 * Kills a running proc instance.
 * 
 * @param runId  The run ID of the running proc instance. If the run ID is not
 *               found or the proc instance has already completed, this does
 *               nothing. If not specified, all running proc instances will be
 *               killed.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

KillProcResponse& killProc( const std::string& runId,
                            const std::map<std::string, std::string>& options,
                            KillProcResponse& response_ ) const;

/**
 * Manages global access to a table's data.  By default a table has a @a
 * lockType of @a read-write, indicating all operations are permitted.  A user
 * may request a @a read-only or a @a write-only lock, after which only read or
 * write operations, respectively, are permitted on the table until the lock is
 * removed.  When @a lockType is @a no-access then no operations are permitted
 * on the table.  The lock status can be queried by setting @a lockType to @a
 * status.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

LockTableResponse lockTable( const LockTableRequest& request_ ) const;

/**
 * Manages global access to a table's data.  By default a table has a @a
 * lockType of @a read-write, indicating all operations are permitted.  A user
 * may request a @a read-only or a @a write-only lock, after which only read or
 * write operations, respectively, are permitted on the table until the lock is
 * removed.  When @a lockType is @a no-access then no operations are permitted
 * on the table.  The lock status can be queried by setting @a lockType to @a
 * status.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

LockTableResponse& lockTable( const LockTableRequest& request_,
                              LockTableResponse& response_ ) const;

/**
 * Manages global access to a table's data.  By default a table has a @a
 * lockType of @a read-write, indicating all operations are permitted.  A user
 * may request a @a read-only or a @a write-only lock, after which only read or
 * write operations, respectively, are permitted on the table until the lock is
 * removed.  When @a lockType is @a no-access then no operations are permitted
 * on the table.  The lock status can be queried by setting @a lockType to @a
 * status.
 * 
 * @param tableName  Name of the table to be locked. It must be a currently
 *                   existing table, collection, or view.
 * @param lockType  The type of lock being applied to the table. Setting it to
 *                  @a status will return the current lock status of the table
 *                  without changing it.
 *                  <ul>
 *                          <li> gpudb::lock_table_status: Show locked status
 *                          <li> gpudb::lock_table_no_access: Allow no
 *                  read/write operations
 *                          <li> gpudb::lock_table_read_only: Allow only read
 *                  operations
 *                          <li> gpudb::lock_table_write_only: Allow only write
 *                  operations
 *                          <li> gpudb::lock_table_read_write: Allow all
 *                  read/write operations
 *                  </ul>
 *                  The default value is gpudb::lock_table_status.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

LockTableResponse lockTable( const std::string& tableName,
                             const std::string& lockType,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Manages global access to a table's data.  By default a table has a @a
 * lockType of @a read-write, indicating all operations are permitted.  A user
 * may request a @a read-only or a @a write-only lock, after which only read or
 * write operations, respectively, are permitted on the table until the lock is
 * removed.  When @a lockType is @a no-access then no operations are permitted
 * on the table.  The lock status can be queried by setting @a lockType to @a
 * status.
 * 
 * @param tableName  Name of the table to be locked. It must be a currently
 *                   existing table, collection, or view.
 * @param lockType  The type of lock being applied to the table. Setting it to
 *                  @a status will return the current lock status of the table
 *                  without changing it.
 *                  <ul>
 *                          <li> gpudb::lock_table_status: Show locked status
 *                          <li> gpudb::lock_table_no_access: Allow no
 *                  read/write operations
 *                          <li> gpudb::lock_table_read_only: Allow only read
 *                  operations
 *                          <li> gpudb::lock_table_write_only: Allow only write
 *                  operations
 *                          <li> gpudb::lock_table_read_write: Allow all
 *                  read/write operations
 *                  </ul>
 *                  The default value is gpudb::lock_table_status.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

LockTableResponse& lockTable( const std::string& tableName,
                              const std::string& lockType,
                              const std::map<std::string, std::string>& options,
                              LockTableResponse& response_ ) const;

/**
 * Create a new empty result table (specified by @a tableName), and insert all
 * records from source tables (specified by @a sourceTableNames) based on the
 * field mapping information (specified by @a fieldMaps). The field map
 * (specified by @a fieldMaps) holds the user specified maps of target table
 * column names to source table columns.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

MergeRecordsResponse mergeRecords( const MergeRecordsRequest& request_ ) const;

/**
 * Create a new empty result table (specified by @a tableName), and insert all
 * records from source tables (specified by @a sourceTableNames) based on the
 * field mapping information (specified by @a fieldMaps). The field map
 * (specified by @a fieldMaps) holds the user specified maps of target table
 * column names to source table columns.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

MergeRecordsResponse& mergeRecords( const MergeRecordsRequest& request_,
                                    MergeRecordsResponse& response_ ) const;

/**
 * Create a new empty result table (specified by @a tableName), and insert all
 * records from source tables (specified by @a sourceTableNames) based on the
 * field mapping information (specified by @a fieldMaps). The field map
 * (specified by @a fieldMaps) holds the user specified maps of target table
 * column names to source table columns.
 * 
 * @param tableName  The new result table name for the records to be merged.
 *                   Must NOT be an existing table.
 * @param sourceTableNames  The list of source table names to get the records
 *                          from. Must be existing table names.
 * @param fieldMaps  Contains the mapping of column names from result table
 *                   (specified by @a tableName) as the keys, and corresponding
 *                   column names from a table from source tables (specified by
 *                   @a sourceTableNames). Must be existing column names in
 *                   source table and target table, and their types must be
 *                   matched.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::merge_records_collection_name: Name of a
 *                 collection which is to contain the newly created merged
 *                 table (specified by @a tableName). If empty, then the newly
 *                 created merged table will be a top-level table. If the
 *                 collection does not allow duplicate types and it contains a
 *                 table of the same type as the given one, then this table
 *                 creation request will fail.
 *                         <li> gpudb::merge_records_is_replicated: For a
 *                 merged table (specified by @a tableName), indicates whether
 *                 the table is to be replicated to all the database ranks.
 *                 This may be necessary when the table is to be joined with
 *                 other tables in a query.
 *                 <ul>
 *                         <li> gpudb::merge_records_true
 *                         <li> gpudb::merge_records_false
 *                 </ul>
 *                 The default value is gpudb::merge_records_false.
 *                         <li> gpudb::merge_records_ttl: Sets the TTL of the
 *                 merged table or collection (specified by @a tableName). The
 *                 value must be the desired TTL in minutes.
 *                         <li> gpudb::merge_records_chunk_size: If provided
 *                 this indicates the chunk size to be used for the merged
 *                 table.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

MergeRecordsResponse mergeRecords( const std::string& tableName,
                                   const std::vector<std::string>& sourceTableNames,
                                   const std::vector<std::map<std::string, std::string> >& fieldMaps,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Create a new empty result table (specified by @a tableName), and insert all
 * records from source tables (specified by @a sourceTableNames) based on the
 * field mapping information (specified by @a fieldMaps). The field map
 * (specified by @a fieldMaps) holds the user specified maps of target table
 * column names to source table columns.
 * 
 * @param tableName  The new result table name for the records to be merged.
 *                   Must NOT be an existing table.
 * @param sourceTableNames  The list of source table names to get the records
 *                          from. Must be existing table names.
 * @param fieldMaps  Contains the mapping of column names from result table
 *                   (specified by @a tableName) as the keys, and corresponding
 *                   column names from a table from source tables (specified by
 *                   @a sourceTableNames). Must be existing column names in
 *                   source table and target table, and their types must be
 *                   matched.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::merge_records_collection_name: Name of a
 *                 collection which is to contain the newly created merged
 *                 table (specified by @a tableName). If empty, then the newly
 *                 created merged table will be a top-level table. If the
 *                 collection does not allow duplicate types and it contains a
 *                 table of the same type as the given one, then this table
 *                 creation request will fail.
 *                         <li> gpudb::merge_records_is_replicated: For a
 *                 merged table (specified by @a tableName), indicates whether
 *                 the table is to be replicated to all the database ranks.
 *                 This may be necessary when the table is to be joined with
 *                 other tables in a query.
 *                 <ul>
 *                         <li> gpudb::merge_records_true
 *                         <li> gpudb::merge_records_false
 *                 </ul>
 *                 The default value is gpudb::merge_records_false.
 *                         <li> gpudb::merge_records_ttl: Sets the TTL of the
 *                 merged table or collection (specified by @a tableName). The
 *                 value must be the desired TTL in minutes.
 *                         <li> gpudb::merge_records_chunk_size: If provided
 *                 this indicates the chunk size to be used for the merged
 *                 table.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

MergeRecordsResponse& mergeRecords( const std::string& tableName,
                                    const std::vector<std::string>& sourceTableNames,
                                    const std::vector<std::map<std::string, std::string> >& fieldMaps,
                                    const std::map<std::string, std::string>& options,
                                    MergeRecordsResponse& response_ ) const;

/**
 * @private
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminReplaceTomResponse adminReplaceTom( const AdminReplaceTomRequest& request_ ) const;

/**
 * @private
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminReplaceTomResponse& adminReplaceTom( const AdminReplaceTomRequest& request_,
                                          AdminReplaceTomResponse& response_ ) const;

/**
 * @private
 * 
 * @param oldRankTom
 * @param newRankTom
 * 
 * @return Response object containing the result of the operation.
 * 
 */

AdminReplaceTomResponse adminReplaceTom( const int64_t oldRankTom,
                                         const int64_t newRankTom ) const;

/**
 * @private
 * 
 * @param oldRankTom
 * @param newRankTom
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

AdminReplaceTomResponse& adminReplaceTom( const int64_t oldRankTom,
                                          const int64_t newRankTom,
                                          AdminReplaceTomResponse& response_ ) const;

/**
 * Revokes a system-level permission from a user or role.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

RevokePermissionSystemResponse revokePermissionSystem( const RevokePermissionSystemRequest& request_ ) const;

/**
 * Revokes a system-level permission from a user or role.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

RevokePermissionSystemResponse& revokePermissionSystem( const RevokePermissionSystemRequest& request_,
                                                        RevokePermissionSystemResponse& response_ ) const;

/**
 * Revokes a system-level permission from a user or role.
 * 
 * @param name  Name of the user or role from which the permission will be
 *              revoked. Must be an existing user or role.
 * @param permission  Permission to revoke from the user or role.
 *                    <ul>
 *                            <li>
 *                    gpudb::revoke_permission_system_system_admin: Full access
 *                    to all data and system functions.
 *                            <li>
 *                    gpudb::revoke_permission_system_system_write: Read and
 *                    write access to all tables.
 *                            <li> gpudb::revoke_permission_system_system_read:
 *                    Read-only access to all tables.
 *                    </ul>
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

RevokePermissionSystemResponse revokePermissionSystem( const std::string& name,
                                                       const std::string& permission,
                                                       const std::map<std::string, std::string>& options ) const;

/**
 * Revokes a system-level permission from a user or role.
 * 
 * @param name  Name of the user or role from which the permission will be
 *              revoked. Must be an existing user or role.
 * @param permission  Permission to revoke from the user or role.
 *                    <ul>
 *                            <li>
 *                    gpudb::revoke_permission_system_system_admin: Full access
 *                    to all data and system functions.
 *                            <li>
 *                    gpudb::revoke_permission_system_system_write: Read and
 *                    write access to all tables.
 *                            <li> gpudb::revoke_permission_system_system_read:
 *                    Read-only access to all tables.
 *                    </ul>
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

RevokePermissionSystemResponse& revokePermissionSystem( const std::string& name,
                                                        const std::string& permission,
                                                        const std::map<std::string, std::string>& options,
                                                        RevokePermissionSystemResponse& response_ ) const;

/**
 * Revokes a table-level permission from a user or role.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

RevokePermissionTableResponse revokePermissionTable( const RevokePermissionTableRequest& request_ ) const;

/**
 * Revokes a table-level permission from a user or role.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

RevokePermissionTableResponse& revokePermissionTable( const RevokePermissionTableRequest& request_,
                                                      RevokePermissionTableResponse& response_ ) const;

/**
 * Revokes a table-level permission from a user or role.
 * 
 * @param name  Name of the user or role from which the permission will be
 *              revoked. Must be an existing user or role.
 * @param permission  Permission to revoke from the user or role.
 *                    <ul>
 *                            <li> gpudb::revoke_permission_table_table_admin:
 *                    Full read/write and administrative access to the table.
 *                            <li> gpudb::revoke_permission_table_table_insert:
 *                    Insert access to the table.
 *                            <li> gpudb::revoke_permission_table_table_update:
 *                    Update access to the table.
 *                            <li> gpudb::revoke_permission_table_table_delete:
 *                    Delete access to the table.
 *                            <li> gpudb::revoke_permission_table_table_read:
 *                    Read access to the table.
 *                    </ul>
 * @param tableName  Name of the table to which the permission grants access.
 *                   Must be an existing table, collection, or view.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

RevokePermissionTableResponse revokePermissionTable( const std::string& name,
                                                     const std::string& permission,
                                                     const std::string& tableName,
                                                     const std::map<std::string, std::string>& options ) const;

/**
 * Revokes a table-level permission from a user or role.
 * 
 * @param name  Name of the user or role from which the permission will be
 *              revoked. Must be an existing user or role.
 * @param permission  Permission to revoke from the user or role.
 *                    <ul>
 *                            <li> gpudb::revoke_permission_table_table_admin:
 *                    Full read/write and administrative access to the table.
 *                            <li> gpudb::revoke_permission_table_table_insert:
 *                    Insert access to the table.
 *                            <li> gpudb::revoke_permission_table_table_update:
 *                    Update access to the table.
 *                            <li> gpudb::revoke_permission_table_table_delete:
 *                    Delete access to the table.
 *                            <li> gpudb::revoke_permission_table_table_read:
 *                    Read access to the table.
 *                    </ul>
 * @param tableName  Name of the table to which the permission grants access.
 *                   Must be an existing table, collection, or view.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

RevokePermissionTableResponse& revokePermissionTable( const std::string& name,
                                                      const std::string& permission,
                                                      const std::string& tableName,
                                                      const std::map<std::string, std::string>& options,
                                                      RevokePermissionTableResponse& response_ ) const;

/**
 * Revokes membership in a role from a user or role.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

RevokeRoleResponse revokeRole( const RevokeRoleRequest& request_ ) const;

/**
 * Revokes membership in a role from a user or role.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

RevokeRoleResponse& revokeRole( const RevokeRoleRequest& request_,
                                RevokeRoleResponse& response_ ) const;

/**
 * Revokes membership in a role from a user or role.
 * 
 * @param role  Name of the role in which membership will be revoked. Must be
 *              an existing role.
 * @param member  Name of the user or role that will be revoked membership in
 *                @a role. Must be an existing user or role.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

RevokeRoleResponse revokeRole( const std::string& role,
                               const std::string& member,
                               const std::map<std::string, std::string>& options ) const;

/**
 * Revokes membership in a role from a user or role.
 * 
 * @param role  Name of the role in which membership will be revoked. Must be
 *              an existing role.
 * @param member  Name of the user or role that will be revoked membership in
 *                @a role. Must be an existing user or role.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

RevokeRoleResponse& revokeRole( const std::string& role,
                                const std::string& member,
                                const std::map<std::string, std::string>& options,
                                RevokeRoleResponse& response_ ) const;

/**
 * Shows information about a proc.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowProcResponse showProc( const ShowProcRequest& request_ ) const;

/**
 * Shows information about a proc.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowProcResponse& showProc( const ShowProcRequest& request_,
                            ShowProcResponse& response_ ) const;

/**
 * Shows information about a proc.
 * 
 * @param procName  Name of the proc to show information about. If specified,
 *                  must be the name of a currently existing proc. If not
 *                  specified, information about all procs will be returned.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::show_proc_include_files: If set to @a
 *                 true, the files that make up the proc will be returned. If
 *                 set to @a false, the files will not be returned.
 *                 <ul>
 *                         <li> gpudb::show_proc_true
 *                         <li> gpudb::show_proc_false
 *                 </ul>
 *                 The default value is gpudb::show_proc_false.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowProcResponse showProc( const std::string& procName,
                           const std::map<std::string, std::string>& options ) const;

/**
 * Shows information about a proc.
 * 
 * @param procName  Name of the proc to show information about. If specified,
 *                  must be the name of a currently existing proc. If not
 *                  specified, information about all procs will be returned.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::show_proc_include_files: If set to @a
 *                 true, the files that make up the proc will be returned. If
 *                 set to @a false, the files will not be returned.
 *                 <ul>
 *                         <li> gpudb::show_proc_true
 *                         <li> gpudb::show_proc_false
 *                 </ul>
 *                 The default value is gpudb::show_proc_false.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowProcResponse& showProc( const std::string& procName,
                            const std::map<std::string, std::string>& options,
                            ShowProcResponse& response_ ) const;

/**
 * Shows the statuses of running or completed proc instances. Results are
 * grouped by run ID (as returned from {@link
 * #executeProc(const ExecuteProcRequest&) const}) and data segment ID
 * (each invocation of the proc command on a data segment is assigned a data
 * segment ID).
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowProcStatusResponse showProcStatus( const ShowProcStatusRequest& request_ ) const;

/**
 * Shows the statuses of running or completed proc instances. Results are
 * grouped by run ID (as returned from {@link
 * #executeProc(const ExecuteProcRequest&,ExecuteProcResponse&) const}) and
 * data segment ID (each invocation of the proc command on a data segment is
 * assigned a data segment ID).
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowProcStatusResponse& showProcStatus( const ShowProcStatusRequest& request_,
                                        ShowProcStatusResponse& response_ ) const;

/**
 * Shows the statuses of running or completed proc instances. Results are
 * grouped by run ID (as returned from {@link
 * #executeProc(const std::string&,const std::map<std::string, std::string>&,const std::map<std::string, std::vector<uint8_t> >&,const std::vector<std::string>&,const std::map<std::string, std::vector<std::string> >&,const std::vector<std::string>&,const std::map<std::string, std::string>&) const})
 * and data segment ID (each invocation of the proc command on a data segment
 * is assigned a data segment ID).
 * 
 * @param runId  The run ID of a specific running or completed proc instance
 *               for which the status will be returned. If the run ID is not
 *               found, nothing will be returned. If not specified, the
 *               statuses of all running and completed proc instances will be
 *               returned.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::show_proc_status_clear_complete: If set
 *                 to @a true, if a proc instance has completed (either
 *                 successfully or unsuccessfully) then its status will be
 *                 cleared and no longer returned in subsequent calls.
 *                 <ul>
 *                         <li> gpudb::show_proc_status_true
 *                         <li> gpudb::show_proc_status_false
 *                 </ul>
 *                 The default value is gpudb::show_proc_status_false.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowProcStatusResponse showProcStatus( const std::string& runId,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * Shows the statuses of running or completed proc instances. Results are
 * grouped by run ID (as returned from {@link
 * #executeProc(const std::string&,const std::map<std::string, std::string>&,const std::map<std::string, std::vector<uint8_t> >&,const std::vector<std::string>&,const std::map<std::string, std::vector<std::string> >&,const std::vector<std::string>&,const std::map<std::string, std::string>&,ExecuteProcResponse&) const})
 * and data segment ID (each invocation of the proc command on a data segment
 * is assigned a data segment ID).
 * 
 * @param runId  The run ID of a specific running or completed proc instance
 *               for which the status will be returned. If the run ID is not
 *               found, nothing will be returned. If not specified, the
 *               statuses of all running and completed proc instances will be
 *               returned.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::show_proc_status_clear_complete: If set
 *                 to @a true, if a proc instance has completed (either
 *                 successfully or unsuccessfully) then its status will be
 *                 cleared and no longer returned in subsequent calls.
 *                 <ul>
 *                         <li> gpudb::show_proc_status_true
 *                         <li> gpudb::show_proc_status_false
 *                 </ul>
 *                 The default value is gpudb::show_proc_status_false.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowProcStatusResponse& showProcStatus( const std::string& runId,
                                        const std::map<std::string, std::string>& options,
                                        ShowProcStatusResponse& response_ ) const;

/**
 * Shows security information relating to users and/or roles. If the caller is
 * not a system administrator, only information relating to the caller and
 * their roles is returned.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowSecurityResponse showSecurity( const ShowSecurityRequest& request_ ) const;

/**
 * Shows security information relating to users and/or roles. If the caller is
 * not a system administrator, only information relating to the caller and
 * their roles is returned.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowSecurityResponse& showSecurity( const ShowSecurityRequest& request_,
                                    ShowSecurityResponse& response_ ) const;

/**
 * Shows security information relating to users and/or roles. If the caller is
 * not a system administrator, only information relating to the caller and
 * their roles is returned.
 * 
 * @param names  A list of names of users and/or roles about which security
 *               information is requested. If none are provided, information
 *               about all users and roles will be returned.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowSecurityResponse showSecurity( const std::vector<std::string>& names,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Shows security information relating to users and/or roles. If the caller is
 * not a system administrator, only information relating to the caller and
 * their roles is returned.
 * 
 * @param names  A list of names of users and/or roles about which security
 *               information is requested. If none are provided, information
 *               about all users and roles will be returned.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowSecurityResponse& showSecurity( const std::vector<std::string>& names,
                                    const std::map<std::string, std::string>& options,
                                    ShowSecurityResponse& response_ ) const;

/**
 * Returns server configuration and version related information to the caller.
 * The admin tool uses it to present server related information to the user.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowSystemPropertiesResponse showSystemProperties( const ShowSystemPropertiesRequest& request_ ) const;

/**
 * Returns server configuration and version related information to the caller.
 * The admin tool uses it to present server related information to the user.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowSystemPropertiesResponse& showSystemProperties( const ShowSystemPropertiesRequest& request_,
                                                    ShowSystemPropertiesResponse& response_ ) const;

/**
 * Returns server configuration and version related information to the caller.
 * The admin tool uses it to present server related information to the user.
 * 
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::show_system_properties_properties: A
 *                 list of comma separated names of properties requested. If
 *                 not specified, all properties will be returned.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowSystemPropertiesResponse showSystemProperties( const std::map<std::string, std::string>& options ) const;

/**
 * Returns server configuration and version related information to the caller.
 * The admin tool uses it to present server related information to the user.
 * 
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::show_system_properties_properties: A
 *                 list of comma separated names of properties requested. If
 *                 not specified, all properties will be returned.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowSystemPropertiesResponse& showSystemProperties( const std::map<std::string, std::string>& options,
                                                    ShowSystemPropertiesResponse& response_ ) const;

/**
 * Provides server configuration and health related status to the caller. The
 * admin tool uses it to present server related information to the user.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowSystemStatusResponse showSystemStatus( const ShowSystemStatusRequest& request_ ) const;

/**
 * Provides server configuration and health related status to the caller. The
 * admin tool uses it to present server related information to the user.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowSystemStatusResponse& showSystemStatus( const ShowSystemStatusRequest& request_,
                                            ShowSystemStatusResponse& response_ ) const;

/**
 * Provides server configuration and health related status to the caller. The
 * admin tool uses it to present server related information to the user.
 * 
 * @param options  Optional parameters, currently unused.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowSystemStatusResponse showSystemStatus( const std::map<std::string, std::string>& options ) const;

/**
 * Provides server configuration and health related status to the caller. The
 * admin tool uses it to present server related information to the user.
 * 
 * @param options  Optional parameters, currently unused.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowSystemStatusResponse& showSystemStatus( const std::map<std::string, std::string>& options,
                                            ShowSystemStatusResponse& response_ ) const;

/**
 * Returns the last 100 database requests along with the request timing and
 * internal job id. The admin tool uses it to present request timing
 * information to the user.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowSystemTimingResponse showSystemTiming( const ShowSystemTimingRequest& request_ ) const;

/**
 * Returns the last 100 database requests along with the request timing and
 * internal job id. The admin tool uses it to present request timing
 * information to the user.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowSystemTimingResponse& showSystemTiming( const ShowSystemTimingRequest& request_,
                                            ShowSystemTimingResponse& response_ ) const;

/**
 * Returns the last 100 database requests along with the request timing and
 * internal job id. The admin tool uses it to present request timing
 * information to the user.
 * 
 * @param options  Optional parameters, currently unused.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowSystemTimingResponse showSystemTiming( const std::map<std::string, std::string>& options ) const;

/**
 * Returns the last 100 database requests along with the request timing and
 * internal job id. The admin tool uses it to present request timing
 * information to the user.
 * 
 * @param options  Optional parameters, currently unused.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowSystemTimingResponse& showSystemTiming( const std::map<std::string, std::string>& options,
                                            ShowSystemTimingResponse& response_ ) const;

/**
 * Retrieves detailed information about a table, view, or collection, specified
 * in @a tableName. If the supplied @a tableName is a collection, the call can
 * return information about either the collection itself or the tables and
 * views it contains. If @a tableName is empty, information about all
 * collections and top-level tables and views can be returned.
 * <p>
 * If the option @a get_sizes is set to @a true, then the sizes (objects and
 * elements) of each table are returned (in @a sizes and @a fullSizes), along
 * with the total number of objects in the requested table (in @a totalSize and
 * @a totalFullSize).
 * <p>
 * For a collection, setting the @a show_children option to @a false returns
 * only information about the collection itself; setting @a show_children to @a
 * true returns a list of tables and views contained in the collection, along
 * with their description, type id, schema, type label, type properties, and
 * additional information including TTL.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowTableResponse showTable( const ShowTableRequest& request_ ) const;

/**
 * Retrieves detailed information about a table, view, or collection, specified
 * in @a tableName. If the supplied @a tableName is a collection, the call can
 * return information about either the collection itself or the tables and
 * views it contains. If @a tableName is empty, information about all
 * collections and top-level tables and views can be returned.
 * <p>
 * If the option @a get_sizes is set to @a true, then the sizes (objects and
 * elements) of each table are returned (in @a sizes and @a fullSizes), along
 * with the total number of objects in the requested table (in @a totalSize and
 * @a totalFullSize).
 * <p>
 * For a collection, setting the @a show_children option to @a false returns
 * only information about the collection itself; setting @a show_children to @a
 * true returns a list of tables and views contained in the collection, along
 * with their description, type id, schema, type label, type properties, and
 * additional information including TTL.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowTableResponse& showTable( const ShowTableRequest& request_,
                              ShowTableResponse& response_ ) const;

/**
 * Retrieves detailed information about a table, view, or collection, specified
 * in @a tableName. If the supplied @a tableName is a collection, the call can
 * return information about either the collection itself or the tables and
 * views it contains. If @a tableName is empty, information about all
 * collections and top-level tables and views can be returned.
 * <p>
 * If the option @a get_sizes is set to @a true, then the sizes (objects and
 * elements) of each table are returned (in @a sizes and @a fullSizes), along
 * with the total number of objects in the requested table (in @a totalSize and
 * @a totalFullSize).
 * <p>
 * For a collection, setting the @a show_children option to @a false returns
 * only information about the collection itself; setting @a show_children to @a
 * true returns a list of tables and views contained in the collection, along
 * with their description, type id, schema, type label, type properties, and
 * additional information including TTL.
 * 
 * @param tableName  Name of the table for which to retrieve the information.
 *                   If blank, then information about all collections and
 *                   top-level tables and views is returned.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::show_table_get_sizes: If @a true then
 *                 the table sizes will be returned; blank, otherwise.
 *                 <ul>
 *                         <li> gpudb::show_table_true
 *                         <li> gpudb::show_table_false
 *                 </ul>
 *                 The default value is gpudb::show_table_false.
 *                         <li> gpudb::show_table_show_children: If @a
 *                 tableName is a collection, then @a true will return
 *                 information about the children of the collection, and @a
 *                 false will return information about the collection itself.
 *                 If @a tableName is a table or view, @a show_children must be
 *                 @a false. If @a tableName is empty, then @a show_children
 *                 must be @a true.
 *                 <ul>
 *                         <li> gpudb::show_table_true
 *                         <li> gpudb::show_table_false
 *                 </ul>
 *                 The default value is gpudb::show_table_true.
 *                         <li> gpudb::show_table_no_error_if_not_exists: If @a
 *                 false will return an error if the provided @a tableName does
 *                 not exist. If @a true then it will return an empty result.
 *                 <ul>
 *                         <li> gpudb::show_table_true
 *                         <li> gpudb::show_table_false
 *                 </ul>
 *                 The default value is gpudb::show_table_false.
 *                         <li> gpudb::show_table_get_column_info: If @a true
 *                 then column info (memory usage, etc) will be returned.
 *                 <ul>
 *                         <li> gpudb::show_table_true
 *                         <li> gpudb::show_table_false
 *                 </ul>
 *                 The default value is gpudb::show_table_false.
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowTableResponse showTable( const std::string& tableName,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Retrieves detailed information about a table, view, or collection, specified
 * in @a tableName. If the supplied @a tableName is a collection, the call can
 * return information about either the collection itself or the tables and
 * views it contains. If @a tableName is empty, information about all
 * collections and top-level tables and views can be returned.
 * <p>
 * If the option @a get_sizes is set to @a true, then the sizes (objects and
 * elements) of each table are returned (in @a sizes and @a fullSizes), along
 * with the total number of objects in the requested table (in @a totalSize and
 * @a totalFullSize).
 * <p>
 * For a collection, setting the @a show_children option to @a false returns
 * only information about the collection itself; setting @a show_children to @a
 * true returns a list of tables and views contained in the collection, along
 * with their description, type id, schema, type label, type properties, and
 * additional information including TTL.
 * 
 * @param tableName  Name of the table for which to retrieve the information.
 *                   If blank, then information about all collections and
 *                   top-level tables and views is returned.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::show_table_get_sizes: If @a true then
 *                 the table sizes will be returned; blank, otherwise.
 *                 <ul>
 *                         <li> gpudb::show_table_true
 *                         <li> gpudb::show_table_false
 *                 </ul>
 *                 The default value is gpudb::show_table_false.
 *                         <li> gpudb::show_table_show_children: If @a
 *                 tableName is a collection, then @a true will return
 *                 information about the children of the collection, and @a
 *                 false will return information about the collection itself.
 *                 If @a tableName is a table or view, @a show_children must be
 *                 @a false. If @a tableName is empty, then @a show_children
 *                 must be @a true.
 *                 <ul>
 *                         <li> gpudb::show_table_true
 *                         <li> gpudb::show_table_false
 *                 </ul>
 *                 The default value is gpudb::show_table_true.
 *                         <li> gpudb::show_table_no_error_if_not_exists: If @a
 *                 false will return an error if the provided @a tableName does
 *                 not exist. If @a true then it will return an empty result.
 *                 <ul>
 *                         <li> gpudb::show_table_true
 *                         <li> gpudb::show_table_false
 *                 </ul>
 *                 The default value is gpudb::show_table_false.
 *                         <li> gpudb::show_table_get_column_info: If @a true
 *                 then column info (memory usage, etc) will be returned.
 *                 <ul>
 *                         <li> gpudb::show_table_true
 *                         <li> gpudb::show_table_false
 *                 </ul>
 *                 The default value is gpudb::show_table_false.
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowTableResponse& showTable( const std::string& tableName,
                              const std::map<std::string, std::string>& options,
                              ShowTableResponse& response_ ) const;

/**
 * Retrieves the user provided metadata for the specified tables.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowTableMetadataResponse showTableMetadata( const ShowTableMetadataRequest& request_ ) const;

/**
 * Retrieves the user provided metadata for the specified tables.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowTableMetadataResponse& showTableMetadata( const ShowTableMetadataRequest& request_,
                                              ShowTableMetadataResponse& response_ ) const;

/**
 * Retrieves the user provided metadata for the specified tables.
 * 
 * @param tableNames  Tables whose metadata will be fetched. All provided
 *                    tables must exist, or an error is returned.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowTableMetadataResponse showTableMetadata( const std::vector<std::string>& tableNames,
                                             const std::map<std::string, std::string>& options ) const;

/**
 * Retrieves the user provided metadata for the specified tables.
 * 
 * @param tableNames  Tables whose metadata will be fetched. All provided
 *                    tables must exist, or an error is returned.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowTableMetadataResponse& showTableMetadata( const std::vector<std::string>& tableNames,
                                              const std::map<std::string, std::string>& options,
                                              ShowTableMetadataResponse& response_ ) const;

/**
 * Gets names of the tables whose type matches the given criteria. Each table
 * has a particular type. This type is made out of the type label, schema of
 * the table, and the semantic type of the table. This function allows a look
 * up of the existing tables based on full or partial type information. The
 * operation is synchronous.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowTablesByTypeResponse showTablesByType( const ShowTablesByTypeRequest& request_ ) const;

/**
 * Gets names of the tables whose type matches the given criteria. Each table
 * has a particular type. This type is made out of the type label, schema of
 * the table, and the semantic type of the table. This function allows a look
 * up of the existing tables based on full or partial type information. The
 * operation is synchronous.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowTablesByTypeResponse& showTablesByType( const ShowTablesByTypeRequest& request_,
                                            ShowTablesByTypeResponse& response_ ) const;

/**
 * Gets names of the tables whose type matches the given criteria. Each table
 * has a particular type. This type is made out of the type label, schema of
 * the table, and the semantic type of the table. This function allows a look
 * up of the existing tables based on full or partial type information. The
 * operation is synchronous.
 * 
 * @param typeId  Type id returned by a call to /create/type.
 * @param label  Optional user supplied label which can be used instead of the
 *               type_id to retrieve all tables with the given label.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowTablesByTypeResponse showTablesByType( const std::string& typeId,
                                           const std::string& label,
                                           const std::map<std::string, std::string>& options ) const;

/**
 * Gets names of the tables whose type matches the given criteria. Each table
 * has a particular type. This type is made out of the type label, schema of
 * the table, and the semantic type of the table. This function allows a look
 * up of the existing tables based on full or partial type information. The
 * operation is synchronous.
 * 
 * @param typeId  Type id returned by a call to /create/type.
 * @param label  Optional user supplied label which can be used instead of the
 *               type_id to retrieve all tables with the given label.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowTablesByTypeResponse& showTablesByType( const std::string& typeId,
                                            const std::string& label,
                                            const std::map<std::string, std::string>& options,
                                            ShowTablesByTypeResponse& response_ ) const;

/**
 * Retrieves information regarding the specified triggers or all existing
 * triggers currently active.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowTriggersResponse showTriggers( const ShowTriggersRequest& request_ ) const;

/**
 * Retrieves information regarding the specified triggers or all existing
 * triggers currently active.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowTriggersResponse& showTriggers( const ShowTriggersRequest& request_,
                                    ShowTriggersResponse& response_ ) const;

/**
 * Retrieves information regarding the specified triggers or all existing
 * triggers currently active.
 * 
 * @param triggerIds  List of IDs of the triggers whose information is to be
 *                    retrieved. An empty list means information will be
 *                    retrieved on all active triggers.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowTriggersResponse showTriggers( const std::vector<std::string>& triggerIds,
                                   const std::map<std::string, std::string>& options ) const;

/**
 * Retrieves information regarding the specified triggers or all existing
 * triggers currently active.
 * 
 * @param triggerIds  List of IDs of the triggers whose information is to be
 *                    retrieved. An empty list means information will be
 *                    retrieved on all active triggers.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowTriggersResponse& showTriggers( const std::vector<std::string>& triggerIds,
                                    const std::map<std::string, std::string>& options,
                                    ShowTriggersResponse& response_ ) const;

/**
 * Retrieves information for the specified data type. Given a type ID, the
 * database returns the data type schema, the label, and the semantic type
 * along with the type ID. If the user provides any combination of label and
 * semantic type, then the database returns the pertinent information for all
 * data types that match the input criteria.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowTypesResponse showTypes( const ShowTypesRequest& request_ ) const;

/**
 * Retrieves information for the specified data type. Given a type ID, the
 * database returns the data type schema, the label, and the semantic type
 * along with the type ID. If the user provides any combination of label and
 * semantic type, then the database returns the pertinent information for all
 * data types that match the input criteria.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowTypesResponse& showTypes( const ShowTypesRequest& request_,
                              ShowTypesResponse& response_ ) const;

/**
 * Retrieves information for the specified data type. Given a type ID, the
 * database returns the data type schema, the label, and the semantic type
 * along with the type ID. If the user provides any combination of label and
 * semantic type, then the database returns the pertinent information for all
 * data types that match the input criteria.
 * 
 * @param typeId  Type Id returned in response to a call to /create/type.
 * @param label  Option string that was supplied by user in a call to
 *               /create/type.
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

ShowTypesResponse showTypes( const std::string& typeId,
                             const std::string& label,
                             const std::map<std::string, std::string>& options ) const;

/**
 * Retrieves information for the specified data type. Given a type ID, the
 * database returns the data type schema, the label, and the semantic type
 * along with the type ID. If the user provides any combination of label and
 * semantic type, then the database returns the pertinent information for all
 * data types that match the input criteria.
 * 
 * @param typeId  Type Id returned in response to a call to /create/type.
 * @param label  Option string that was supplied by user in a call to
 *               /create/type.
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

ShowTypesResponse& showTypes( const std::string& typeId,
                              const std::string& label,
                              const std::map<std::string, std::string>& options,
                              ShowTypesResponse& response_ ) const;

/**
 * Runs multiple predicate-based updates in a single call.  With the list of
 * given expressions, any matching record's column values will be updated as
 * provided in @a newValuesMaps.  There is also an optional 'upsert' capability
 * where if a particular predicate doesn't match any existing record, then a
 * new record can be inserted.
 * <p>
 * Note that this operation can only be run on an original table and not on a
 * collection or a result view.
 * <p>
 * This operation can update primary key values.  By default only 'pure primary
 * key' predicates are allowed when updating primary key values. If the primary
 * key for a table is the column 'attr1', then the operation will only accept
 * predicates of the form: "attr1 == 'foo'" if the attr1 column is being
 * updated.  For a composite primary key (e.g. columns 'attr1' and 'attr2')
 * then this operation will only accept predicates of the form: "(attr1 ==
 * 'foo') and (attr2 == 'bar')".  Meaning, all primary key columns must appear
 * in an equality predicate in the expressions.  Furthermore each 'pure primary
 * key' predicate must be unique within a given request.  These restrictions
 * can be removed by utilizing some available options through @a options.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

UpdateRecordsResponse updateRecordsRaw( const RawUpdateRecordsRequest& request_ ) const;

/**
 * Runs multiple predicate-based updates in a single call.  With the list of
 * given expressions, any matching record's column values will be updated as
 * provided in @a newValuesMaps.  There is also an optional 'upsert' capability
 * where if a particular predicate doesn't match any existing record, then a
 * new record can be inserted.
 * <p>
 * Note that this operation can only be run on an original table and not on a
 * collection or a result view.
 * <p>
 * This operation can update primary key values.  By default only 'pure primary
 * key' predicates are allowed when updating primary key values. If the primary
 * key for a table is the column 'attr1', then the operation will only accept
 * predicates of the form: "attr1 == 'foo'" if the attr1 column is being
 * updated.  For a composite primary key (e.g. columns 'attr1' and 'attr2')
 * then this operation will only accept predicates of the form: "(attr1 ==
 * 'foo') and (attr2 == 'bar')".  Meaning, all primary key columns must appear
 * in an equality predicate in the expressions.  Furthermore each 'pure primary
 * key' predicate must be unique within a given request.  These restrictions
 * can be removed by utilizing some available options through @a options.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

UpdateRecordsResponse& updateRecordsRaw( const RawUpdateRecordsRequest& request_,
                                         UpdateRecordsResponse& response_ ) const;

/**
 * Runs multiple predicate-based updates in a single call.  With the list of
 * given expressions, any matching record's column values will be updated as
 * provided in @a newValuesMaps.  There is also an optional 'upsert' capability
 * where if a particular predicate doesn't match any existing record, then a
 * new record can be inserted.
 * <p>
 * Note that this operation can only be run on an original table and not on a
 * collection or a result view.
 * <p>
 * This operation can update primary key values.  By default only 'pure primary
 * key' predicates are allowed when updating primary key values. If the primary
 * key for a table is the column 'attr1', then the operation will only accept
 * predicates of the form: "attr1 == 'foo'" if the attr1 column is being
 * updated.  For a composite primary key (e.g. columns 'attr1' and 'attr2')
 * then this operation will only accept predicates of the form: "(attr1 ==
 * 'foo') and (attr2 == 'bar')".  Meaning, all primary key columns must appear
 * in an equality predicate in the expressions.  Furthermore each 'pure primary
 * key' predicate must be unique within a given request.  These restrictions
 * can be removed by utilizing some available options through @a options.
 * 
 * @tparam <TRequest>  The type of object being added.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TRequest> 
UpdateRecordsResponse updateRecords( const UpdateRecordsRequest<TRequest>& request_ ) const
{
    RawUpdateRecordsRequest actualRequest_;
    actualRequest_.tableName = request_.tableName;
    actualRequest_.expressions = request_.expressions;
    actualRequest_.newValuesMaps = request_.newValuesMaps;
    avro::encode(actualRequest_.recordsToInsert, request_.data, this->m_threadCount, this->m_executor);
    actualRequest_.options = request_.options;
    UpdateRecordsResponse actualResponse_;
    submitRequest("/update/records", actualRequest_, actualResponse_, true);
    return actualResponse_;
}


/**
 * Runs multiple predicate-based updates in a single call.  With the list of
 * given expressions, any matching record's column values will be updated as
 * provided in @a newValuesMaps.  There is also an optional 'upsert' capability
 * where if a particular predicate doesn't match any existing record, then a
 * new record can be inserted.
 * <p>
 * Note that this operation can only be run on an original table and not on a
 * collection or a result view.
 * <p>
 * This operation can update primary key values.  By default only 'pure primary
 * key' predicates are allowed when updating primary key values. If the primary
 * key for a table is the column 'attr1', then the operation will only accept
 * predicates of the form: "attr1 == 'foo'" if the attr1 column is being
 * updated.  For a composite primary key (e.g. columns 'attr1' and 'attr2')
 * then this operation will only accept predicates of the form: "(attr1 ==
 * 'foo') and (attr2 == 'bar')".  Meaning, all primary key columns must appear
 * in an equality predicate in the expressions.  Furthermore each 'pure primary
 * key' predicate must be unique within a given request.  These restrictions
 * can be removed by utilizing some available options through @a options.
 * 
 * @tparam <TRequest>  The type of object being added.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TRequest> 
UpdateRecordsResponse& updateRecords( const UpdateRecordsRequest<TRequest>& request_,
                                      UpdateRecordsResponse& response_ ) const
{
    RawUpdateRecordsRequest actualRequest_;
    actualRequest_.tableName = request_.tableName;
    actualRequest_.expressions = request_.expressions;
    actualRequest_.newValuesMaps = request_.newValuesMaps;
    avro::encode(actualRequest_.recordsToInsert, request_.data, this->m_threadCount, this->m_executor);
    actualRequest_.options = request_.options;
    submitRequest("/update/records", actualRequest_, response_, true);
    return response_;
}


/**
 * Runs multiple predicate-based updates in a single call.  With the list of
 * given expressions, any matching record's column values will be updated as
 * provided in @a newValuesMaps.  There is also an optional 'upsert' capability
 * where if a particular predicate doesn't match any existing record, then a
 * new record can be inserted.
 * <p>
 * Note that this operation can only be run on an original table and not on a
 * collection or a result view.
 * <p>
 * This operation can update primary key values.  By default only 'pure primary
 * key' predicates are allowed when updating primary key values. If the primary
 * key for a table is the column 'attr1', then the operation will only accept
 * predicates of the form: "attr1 == 'foo'" if the attr1 column is being
 * updated.  For a composite primary key (e.g. columns 'attr1' and 'attr2')
 * then this operation will only accept predicates of the form: "(attr1 ==
 * 'foo') and (attr2 == 'bar')".  Meaning, all primary key columns must appear
 * in an equality predicate in the expressions.  Furthermore each 'pure primary
 * key' predicate must be unique within a given request.  These restrictions
 * can be removed by utilizing some available options through @a options.
 * 
 * @tparam <TRequest>  The type of object being added.
 * 
 * @param tableName  Table to be updated. Must be a currently existing table
 *                   and not a collection or view.
 * @param expressions  A list of the actual predicates, one for each update;
 *                     format should follow the guidelines /filter.
 * @param newValuesMaps  List of new values for the matching records.  Each
 *                       element is a map with (key, value) pairs where the
 *                       keys are the names of the columns whose values are to
 *                       be updated; the values are the new values.  The number
 *                       of elements in the list should match the length of @a
 *                       expressions.
 * @param data  An *optional* list of new binary-avro encoded records to
 *              insert, one for each update.  If one of @a expressions does not
 *              yield a matching record to be updated, then the corresponding
 *              element from this list will be added to the table.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::update_records_global_expression: An
 *                 optional global expression to reduce the search space of the
 *                 predicates listed in @a expressions.
 *                         <li> gpudb::update_records_bypass_safety_checks:
 *                 When set to 'true', all predicates are available for primary
 *                 key updates.  Keep in mind that it is possible to destroy
 *                 data in this case, since a single predicate may match
 *                 multiple objects (potentially all of records of a table),
 *                 and then updating all of those records to have the same
 *                 primary key will, due to the primary key uniqueness
 *                 constraints, effectively delete all but one of those updated
 *                 records.
 *                 <ul>
 *                         <li> gpudb::update_records_true
 *                         <li> gpudb::update_records_false
 *                 </ul>
 *                 The default value is gpudb::update_records_false.
 *                         <li> gpudb::update_records_update_on_existing_pk:
 *                 Can be used to customize behavior when the updated primary
 *                 key value already exists, as described in /insert/records.
 *                 <ul>
 *                         <li> gpudb::update_records_true
 *                         <li> gpudb::update_records_false
 *                 </ul>
 *                 The default value is gpudb::update_records_false.
 *                         <li> gpudb::update_records_record_id: ID of a single
 *                 record to be updated (returned in the call to
 *                 /insert/records or /get/records/fromcollection).
 *                 </ul>
 * 
 * @return Response object containing the result of the operation.
 * 
 */
template<typename TRequest> 
UpdateRecordsResponse updateRecords( const std::string& tableName,
                                     const std::vector<std::string>& expressions,
                                     const std::vector<std::map<std::string, boost::optional<std::string> > >& newValuesMaps,
                                     const std::vector<TRequest>& data,
                                     const std::map<std::string, std::string>& options ) const
{
    RawUpdateRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.expressions = expressions;
    actualRequest_.newValuesMaps = newValuesMaps;
    avro::encode(actualRequest_.recordsToInsert, data, this->m_threadCount, this->m_executor);
    actualRequest_.options = options;
    UpdateRecordsResponse actualResponse_;
    submitRequest("/update/records", actualRequest_, actualResponse_, true);
    return actualResponse_;
}


/**
 * Runs multiple predicate-based updates in a single call.  With the list of
 * given expressions, any matching record's column values will be updated as
 * provided in @a newValuesMaps.  There is also an optional 'upsert' capability
 * where if a particular predicate doesn't match any existing record, then a
 * new record can be inserted.
 * <p>
 * Note that this operation can only be run on an original table and not on a
 * collection or a result view.
 * <p>
 * This operation can update primary key values.  By default only 'pure primary
 * key' predicates are allowed when updating primary key values. If the primary
 * key for a table is the column 'attr1', then the operation will only accept
 * predicates of the form: "attr1 == 'foo'" if the attr1 column is being
 * updated.  For a composite primary key (e.g. columns 'attr1' and 'attr2')
 * then this operation will only accept predicates of the form: "(attr1 ==
 * 'foo') and (attr2 == 'bar')".  Meaning, all primary key columns must appear
 * in an equality predicate in the expressions.  Furthermore each 'pure primary
 * key' predicate must be unique within a given request.  These restrictions
 * can be removed by utilizing some available options through @a options.
 * 
 * @tparam <TRequest>  The type of object being added.
 * 
 * @param tableName  Table to be updated. Must be a currently existing table
 *                   and not a collection or view.
 * @param expressions  A list of the actual predicates, one for each update;
 *                     format should follow the guidelines /filter.
 * @param newValuesMaps  List of new values for the matching records.  Each
 *                       element is a map with (key, value) pairs where the
 *                       keys are the names of the columns whose values are to
 *                       be updated; the values are the new values.  The number
 *                       of elements in the list should match the length of @a
 *                       expressions.
 * @param data  An *optional* list of new binary-avro encoded records to
 *              insert, one for each update.  If one of @a expressions does not
 *              yield a matching record to be updated, then the corresponding
 *              element from this list will be added to the table.
 * @param options  Optional parameters.
 *                 <ul>
 *                         <li> gpudb::update_records_global_expression: An
 *                 optional global expression to reduce the search space of the
 *                 predicates listed in @a expressions.
 *                         <li> gpudb::update_records_bypass_safety_checks:
 *                 When set to 'true', all predicates are available for primary
 *                 key updates.  Keep in mind that it is possible to destroy
 *                 data in this case, since a single predicate may match
 *                 multiple objects (potentially all of records of a table),
 *                 and then updating all of those records to have the same
 *                 primary key will, due to the primary key uniqueness
 *                 constraints, effectively delete all but one of those updated
 *                 records.
 *                 <ul>
 *                         <li> gpudb::update_records_true
 *                         <li> gpudb::update_records_false
 *                 </ul>
 *                 The default value is gpudb::update_records_false.
 *                         <li> gpudb::update_records_update_on_existing_pk:
 *                 Can be used to customize behavior when the updated primary
 *                 key value already exists, as described in /insert/records.
 *                 <ul>
 *                         <li> gpudb::update_records_true
 *                         <li> gpudb::update_records_false
 *                 </ul>
 *                 The default value is gpudb::update_records_false.
 *                         <li> gpudb::update_records_record_id: ID of a single
 *                 record to be updated (returned in the call to
 *                 /insert/records or /get/records/fromcollection).
 *                 </ul>
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */
template<typename TRequest> 
UpdateRecordsResponse& updateRecords( const std::string& tableName,
                                      const std::vector<std::string>& expressions,
                                      const std::vector<std::map<std::string, boost::optional<std::string> > >& newValuesMaps,
                                      const std::vector<TRequest>& data,
                                      const std::map<std::string, std::string>& options,
                                      UpdateRecordsResponse& response_ ) const
{
    RawUpdateRecordsRequest actualRequest_;
    actualRequest_.tableName = tableName;
    actualRequest_.expressions = expressions;
    actualRequest_.newValuesMaps = newValuesMaps;
    avro::encode(actualRequest_.recordsToInsert, data, this->m_threadCount, this->m_executor);
    actualRequest_.options = options;
    submitRequest("/update/records", actualRequest_, response_, true);
    return response_;
}


/**
 * Updates the view specified by @a tableName to include full series (track)
 * information from the @a worldTableName for the series (tracks) present in
 * the @a viewName.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

UpdateRecordsBySeriesResponse updateRecordsBySeries( const UpdateRecordsBySeriesRequest& request_ ) const;

/**
 * Updates the view specified by @a tableName to include full series (track)
 * information from the @a worldTableName for the series (tracks) present in
 * the @a viewName.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

UpdateRecordsBySeriesResponse& updateRecordsBySeries( const UpdateRecordsBySeriesRequest& request_,
                                                      UpdateRecordsBySeriesResponse& response_ ) const;

/**
 * Updates the view specified by @a tableName to include full series (track)
 * information from the @a worldTableName for the series (tracks) present in
 * the @a viewName.
 * 
 * @param tableName  Name of the view on which the update operation will be
 *                   performed. Must be an existing view.
 * @param worldTableName  Name of the table containing the complete series
 *                        (track) information.
 * @param viewName  Optional name of the view containing the series (tracks)
 *                  which have to be updated.
 * @param reserved
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

UpdateRecordsBySeriesResponse updateRecordsBySeries( const std::string& tableName,
                                                     const std::string& worldTableName,
                                                     const std::string& viewName,
                                                     const std::vector<std::string>& reserved,
                                                     const std::map<std::string, std::string>& options ) const;

/**
 * Updates the view specified by @a tableName to include full series (track)
 * information from the @a worldTableName for the series (tracks) present in
 * the @a viewName.
 * 
 * @param tableName  Name of the view on which the update operation will be
 *                   performed. Must be an existing view.
 * @param worldTableName  Name of the table containing the complete series
 *                        (track) information.
 * @param viewName  Optional name of the view containing the series (tracks)
 *                  which have to be updated.
 * @param reserved
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

UpdateRecordsBySeriesResponse& updateRecordsBySeries( const std::string& tableName,
                                                      const std::string& worldTableName,
                                                      const std::string& viewName,
                                                      const std::vector<std::string>& reserved,
                                                      const std::map<std::string, std::string>& options,
                                                      UpdateRecordsBySeriesResponse& response_ ) const;

/**
 * @private
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

VisualizeImageResponse visualizeImage( const VisualizeImageRequest& request_ ) const;

/**
 * @private
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

VisualizeImageResponse& visualizeImage( const VisualizeImageRequest& request_,
                                        VisualizeImageResponse& response_ ) const;

/**
 * @private
 * 
 * @param tableNames
 * @param worldTableNames
 * @param xColumnName
 * @param yColumnName
 * @param geometryColumnName
 * @param trackIds
 * @param minX
 * @param maxX
 * @param minY
 * @param maxY
 * @param width
 * @param height
 * @param projection
 *                    <ul>
 *                            <li> gpudb::visualize_image_EPSG_4326
 *                            <li> gpudb::visualize_image_PLATE_CARREE
 *                            <li> gpudb::visualize_image_900913
 *                            <li> gpudb::visualize_image_EPSG_900913
 *                            <li> gpudb::visualize_image_102100
 *                            <li> gpudb::visualize_image_EPSG_102100
 *                            <li> gpudb::visualize_image_3857
 *                            <li> gpudb::visualize_image_EPSG_3857
 *                            <li> gpudb::visualize_image_WEB_MERCATOR
 *                    </ul>
 *                    The default value is gpudb::visualize_image_PLATE_CARREE.
 * @param bgColor
 * @param styleOptions
 *                      <ul>
 *                              <li> gpudb::visualize_image_do_points:
 *                      <ul>
 *                              <li> gpudb::visualize_image_true
 *                              <li> gpudb::visualize_image_false
 *                      </ul>
 *                      The default value is gpudb::visualize_image_true.
 *                              <li> gpudb::visualize_image_do_shapes:
 *                      <ul>
 *                              <li> gpudb::visualize_image_true
 *                              <li> gpudb::visualize_image_false
 *                      </ul>
 *                      The default value is gpudb::visualize_image_true.
 *                              <li> gpudb::visualize_image_do_tracks:
 *                      <ul>
 *                              <li> gpudb::visualize_image_true
 *                              <li> gpudb::visualize_image_false
 *                      </ul>
 *                      The default value is gpudb::visualize_image_true.
 *                              <li> gpudb::visualize_image_do_symbology:
 *                      <ul>
 *                              <li> gpudb::visualize_image_true
 *                              <li> gpudb::visualize_image_false
 *                      </ul>
 *                      The default value is gpudb::visualize_image_false.
 *                              <li> gpudb::visualize_image_pointcolors
 *                              <li> gpudb::visualize_image_pointsizes
 *                              <li> gpudb::visualize_image_pointshapes:
 *                      <ul>
 *                              <li> gpudb::visualize_image_none
 *                              <li> gpudb::visualize_image_circle
 *                              <li> gpudb::visualize_image_square
 *                              <li> gpudb::visualize_image_diamond
 *                              <li> gpudb::visualize_image_hollowcircle
 *                              <li> gpudb::visualize_image_hollowsquare
 *                              <li> gpudb::visualize_image_hollowdiamond
 *                              <li> gpudb::visualize_image_SYMBOLCODE
 *                      </ul>
 *                      The default value is gpudb::visualize_image_square.
 *                              <li> gpudb::visualize_image_shapelinewidths
 *                              <li> gpudb::visualize_image_shapelinecolors
 *                              <li> gpudb::visualize_image_shapefillcolors
 *                              <li> gpudb::visualize_image_tracklinewidths
 *                              <li> gpudb::visualize_image_tracklinecolors
 *                              <li> gpudb::visualize_image_trackmarkersizes
 *                              <li> gpudb::visualize_image_trackmarkercolors
 *                              <li> gpudb::visualize_image_trackmarkershapes:
 *                      <ul>
 *                              <li> gpudb::visualize_image_none
 *                              <li> gpudb::visualize_image_circle
 *                              <li> gpudb::visualize_image_square
 *                              <li> gpudb::visualize_image_diamond
 *                              <li> gpudb::visualize_image_hollowcircle
 *                              <li> gpudb::visualize_image_hollowsquare
 *                              <li> gpudb::visualize_image_hollowdiamond
 *                              <li> gpudb::visualize_image_oriented_arrow
 *                              <li> gpudb::visualize_image_oriented_triangle
 *                              <li> gpudb::visualize_image_SYMBOLCODE
 *                      </ul>
 *                      The default value is gpudb::visualize_image_circle.
 *                              <li> gpudb::visualize_image_trackheadcolors
 *                              <li> gpudb::visualize_image_trackheadsizes
 *                              <li> gpudb::visualize_image_trackheadshapes:
 *                      <ul>
 *                              <li> gpudb::visualize_image_none
 *                              <li> gpudb::visualize_image_circle
 *                              <li> gpudb::visualize_image_square
 *                              <li> gpudb::visualize_image_diamond
 *                              <li> gpudb::visualize_image_hollowcircle
 *                              <li> gpudb::visualize_image_hollowsquare
 *                              <li> gpudb::visualize_image_hollowdiamond
 *                              <li> gpudb::visualize_image_SYMBOLCODE
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_hollowdiamond.
 *                      </ul>
 * @param options
 * 
 * @return Response object containing the result of the operation.
 * 
 */

VisualizeImageResponse visualizeImage( const std::vector<std::string>& tableNames,
                                       const std::vector<std::string>& worldTableNames,
                                       const std::string& xColumnName,
                                       const std::string& yColumnName,
                                       const std::string& geometryColumnName,
                                       const std::vector<std::vector<std::string> >& trackIds,
                                       const double minX,
                                       const double maxX,
                                       const double minY,
                                       const double maxY,
                                       const int32_t width,
                                       const int32_t height,
                                       const std::string& projection,
                                       const int64_t bgColor,
                                       const std::map<std::string, std::vector<std::string> >& styleOptions,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * @private
 * 
 * @param tableNames
 * @param worldTableNames
 * @param xColumnName
 * @param yColumnName
 * @param geometryColumnName
 * @param trackIds
 * @param minX
 * @param maxX
 * @param minY
 * @param maxY
 * @param width
 * @param height
 * @param projection
 *                    <ul>
 *                            <li> gpudb::visualize_image_EPSG_4326
 *                            <li> gpudb::visualize_image_PLATE_CARREE
 *                            <li> gpudb::visualize_image_900913
 *                            <li> gpudb::visualize_image_EPSG_900913
 *                            <li> gpudb::visualize_image_102100
 *                            <li> gpudb::visualize_image_EPSG_102100
 *                            <li> gpudb::visualize_image_3857
 *                            <li> gpudb::visualize_image_EPSG_3857
 *                            <li> gpudb::visualize_image_WEB_MERCATOR
 *                    </ul>
 *                    The default value is gpudb::visualize_image_PLATE_CARREE.
 * @param bgColor
 * @param styleOptions
 *                      <ul>
 *                              <li> gpudb::visualize_image_do_points:
 *                      <ul>
 *                              <li> gpudb::visualize_image_true
 *                              <li> gpudb::visualize_image_false
 *                      </ul>
 *                      The default value is gpudb::visualize_image_true.
 *                              <li> gpudb::visualize_image_do_shapes:
 *                      <ul>
 *                              <li> gpudb::visualize_image_true
 *                              <li> gpudb::visualize_image_false
 *                      </ul>
 *                      The default value is gpudb::visualize_image_true.
 *                              <li> gpudb::visualize_image_do_tracks:
 *                      <ul>
 *                              <li> gpudb::visualize_image_true
 *                              <li> gpudb::visualize_image_false
 *                      </ul>
 *                      The default value is gpudb::visualize_image_true.
 *                              <li> gpudb::visualize_image_do_symbology:
 *                      <ul>
 *                              <li> gpudb::visualize_image_true
 *                              <li> gpudb::visualize_image_false
 *                      </ul>
 *                      The default value is gpudb::visualize_image_false.
 *                              <li> gpudb::visualize_image_pointcolors
 *                              <li> gpudb::visualize_image_pointsizes
 *                              <li> gpudb::visualize_image_pointshapes:
 *                      <ul>
 *                              <li> gpudb::visualize_image_none
 *                              <li> gpudb::visualize_image_circle
 *                              <li> gpudb::visualize_image_square
 *                              <li> gpudb::visualize_image_diamond
 *                              <li> gpudb::visualize_image_hollowcircle
 *                              <li> gpudb::visualize_image_hollowsquare
 *                              <li> gpudb::visualize_image_hollowdiamond
 *                              <li> gpudb::visualize_image_SYMBOLCODE
 *                      </ul>
 *                      The default value is gpudb::visualize_image_square.
 *                              <li> gpudb::visualize_image_shapelinewidths
 *                              <li> gpudb::visualize_image_shapelinecolors
 *                              <li> gpudb::visualize_image_shapefillcolors
 *                              <li> gpudb::visualize_image_tracklinewidths
 *                              <li> gpudb::visualize_image_tracklinecolors
 *                              <li> gpudb::visualize_image_trackmarkersizes
 *                              <li> gpudb::visualize_image_trackmarkercolors
 *                              <li> gpudb::visualize_image_trackmarkershapes:
 *                      <ul>
 *                              <li> gpudb::visualize_image_none
 *                              <li> gpudb::visualize_image_circle
 *                              <li> gpudb::visualize_image_square
 *                              <li> gpudb::visualize_image_diamond
 *                              <li> gpudb::visualize_image_hollowcircle
 *                              <li> gpudb::visualize_image_hollowsquare
 *                              <li> gpudb::visualize_image_hollowdiamond
 *                              <li> gpudb::visualize_image_oriented_arrow
 *                              <li> gpudb::visualize_image_oriented_triangle
 *                              <li> gpudb::visualize_image_SYMBOLCODE
 *                      </ul>
 *                      The default value is gpudb::visualize_image_circle.
 *                              <li> gpudb::visualize_image_trackheadcolors
 *                              <li> gpudb::visualize_image_trackheadsizes
 *                              <li> gpudb::visualize_image_trackheadshapes:
 *                      <ul>
 *                              <li> gpudb::visualize_image_none
 *                              <li> gpudb::visualize_image_circle
 *                              <li> gpudb::visualize_image_square
 *                              <li> gpudb::visualize_image_diamond
 *                              <li> gpudb::visualize_image_hollowcircle
 *                              <li> gpudb::visualize_image_hollowsquare
 *                              <li> gpudb::visualize_image_hollowdiamond
 *                              <li> gpudb::visualize_image_SYMBOLCODE
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_hollowdiamond.
 *                      </ul>
 * @param options
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

VisualizeImageResponse& visualizeImage( const std::vector<std::string>& tableNames,
                                        const std::vector<std::string>& worldTableNames,
                                        const std::string& xColumnName,
                                        const std::string& yColumnName,
                                        const std::string& geometryColumnName,
                                        const std::vector<std::vector<std::string> >& trackIds,
                                        const double minX,
                                        const double maxX,
                                        const double minY,
                                        const double maxY,
                                        const int32_t width,
                                        const int32_t height,
                                        const std::string& projection,
                                        const int64_t bgColor,
                                        const std::map<std::string, std::vector<std::string> >& styleOptions,
                                        const std::map<std::string, std::string>& options,
                                        VisualizeImageResponse& response_ ) const;

/**
 * Scatter plot is the only plot type currently supported. A non-numeric column
 * can be specified as x or y column and jitters can be added to them to avoid
 * excessive overlapping. All color values must be in the format RRGGBB or
 * AARRGGBB (to specify the alpha value).
 * The image is contained in the @a imageData field.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

VisualizeImageChartResponse visualizeImageChart( const VisualizeImageChartRequest& request_ ) const;

/**
 * Scatter plot is the only plot type currently supported. A non-numeric column
 * can be specified as x or y column and jitters can be added to them to avoid
 * excessive overlapping. All color values must be in the format RRGGBB or
 * AARRGGBB (to specify the alpha value).
 * The image is contained in the @a imageData field.
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

VisualizeImageChartResponse& visualizeImageChart( const VisualizeImageChartRequest& request_,
                                                  VisualizeImageChartResponse& response_ ) const;

/**
 * Scatter plot is the only plot type currently supported. A non-numeric column
 * can be specified as x or y column and jitters can be added to them to avoid
 * excessive overlapping. All color values must be in the format RRGGBB or
 * AARRGGBB (to specify the alpha value).
 * The image is contained in the @a imageData field.
 * 
 * @param tableName  Name of the table containing the data to be drawn as a
 *                   chart.
 * @param xColumnName  Name of the column containing the data mapped to the x
 *                     axis of a chart.
 * @param yColumnName  Name of the column containing the data mapped to the y
 *                     axis of a chart.
 * @param minX  Lower bound for the x column values. For non-numeric x column,
 *              each x column item is mapped to an integral value starting from
 *              0.
 * @param maxX  Upper bound for the x column values. For non-numeric x column,
 *              each x column item is mapped to an integral value starting from
 *              0.
 * @param minY  Lower bound for the y column values. For non-numeric y column,
 *              each y column item is mapped to an integral value starting from
 *              0.
 * @param maxY  Upper bound for the y column values. For non-numeric y column,
 *              each y column item is mapped to an integral value starting from
 *              0.
 * @param width  Width of the generated image in pixels.
 * @param height  Height of the generated image in pixels.
 * @param bgColor  Background color of the generated image.
 * @param styleOptions  Rendering style options for a chart.
 *                      <ul>
 *                              <li> gpudb::visualize_image_chart_pointcolor:
 *                      The color of points in the plot represented as a
 *                      hexadecimal number.
 *                              <li> gpudb::visualize_image_chart_pointsize:
 *                      The size of points in the plot represented as number of
 *                      pixels.
 *                              <li> gpudb::visualize_image_chart_pointshape:
 *                      The shape of points in the plot.
 *                      <ul>
 *                              <li> gpudb::visualize_image_chart_none
 *                              <li> gpudb::visualize_image_chart_circle
 *                              <li> gpudb::visualize_image_chart_square
 *                              <li> gpudb::visualize_image_chart_diamond
 *                              <li> gpudb::visualize_image_chart_hollowcircle
 *                              <li> gpudb::visualize_image_chart_hollowsquare
 *                              <li> gpudb::visualize_image_chart_hollowdiamond
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_chart_square.
 *                              <li>
 *                      gpudb::visualize_image_chart_cb_pointcolors: Point
 *                      color class break information consisting of three
 *                      entries: class-break attribute, class-break
 *                      values/ranges, and point color values. This option
 *                      overrides the pointcolor option if both are provided.
 *                      Class-break ranges are represented in the form of
 *                      "min:max". Class-break values/ranges and point color
 *                      values are separated by cb_delimiter, e.g. {"price",
 *                      "20:30;30:40;40:50", "0xFF0000;0x00FF00;0x0000FF"}.
 *                              <li>
 *                      gpudb::visualize_image_chart_cb_pointsizes: Point size
 *                      class break information consisting of three entries:
 *                      class-break attribute, class-break values/ranges, and
 *                      point size values. This option overrides the pointsize
 *                      option if both are provided. Class-break ranges are
 *                      represented in the form of "min:max". Class-break
 *                      values/ranges and point size values are separated by
 *                      cb_delimiter, e.g. {"states", "NY;TX;CA", "3;5;7"}.
 *                              <li>
 *                      gpudb::visualize_image_chart_cb_pointshapes: Point
 *                      shape class break information consisting of three
 *                      entries: class-break attribute, class-break
 *                      values/ranges, and point shape names. This option
 *                      overrides the pointshape option if both are provided.
 *                      Class-break ranges are represented in the form of
 *                      "min:max". Class-break values/ranges and point shape
 *                      names are separated by cb_delimiter, e.g. {"states",
 *                      "NY;TX;CA", "circle;square;diamond"}.
 *                              <li> gpudb::visualize_image_chart_cb_delimiter:
 *                      A character or string which separates per-class values
 *                      in a class-break style option string.
 *                              <li> gpudb::visualize_image_chart_x_order_by:
 *                      An expression or aggregate expression by which
 *                      non-numeric x column values are sorted, e.g.
 *                      avg(price).
 *                              <li> gpudb::visualize_image_chart_y_order_by:
 *                      An expression or aggregate expression by which
 *                      non-numeric y column values are sorted, e.g.
 *                      avg(price).
 *                              <li> gpudb::visualize_image_chart_jitter_x:
 *                      Amplitude of horizontal jitter applied to non-numaric x
 *                      column values.
 *                              <li> gpudb::visualize_image_chart_jitter_y:
 *                      Amplitude of vertical jitter applied to non-numaric y
 *                      column values.
 *                              <li> gpudb::visualize_image_chart_plot_all: If
 *                      this options is set to "true", all non-numeric column
 *                      values are plotted ignoring min_x, max_x, min_y and
 *                      max_y parameters.
 *                      </ul>
 * @param options  Optional parameters.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

VisualizeImageChartResponse visualizeImageChart( const std::string& tableName,
                                                 const std::string& xColumnName,
                                                 const std::string& yColumnName,
                                                 const double minX,
                                                 const double maxX,
                                                 const double minY,
                                                 const double maxY,
                                                 const int32_t width,
                                                 const int32_t height,
                                                 const std::string& bgColor,
                                                 const std::map<std::string, std::vector<std::string> >& styleOptions,
                                                 const std::map<std::string, std::string>& options ) const;

/**
 * Scatter plot is the only plot type currently supported. A non-numeric column
 * can be specified as x or y column and jitters can be added to them to avoid
 * excessive overlapping. All color values must be in the format RRGGBB or
 * AARRGGBB (to specify the alpha value).
 * The image is contained in the @a imageData field.
 * 
 * @param tableName  Name of the table containing the data to be drawn as a
 *                   chart.
 * @param xColumnName  Name of the column containing the data mapped to the x
 *                     axis of a chart.
 * @param yColumnName  Name of the column containing the data mapped to the y
 *                     axis of a chart.
 * @param minX  Lower bound for the x column values. For non-numeric x column,
 *              each x column item is mapped to an integral value starting from
 *              0.
 * @param maxX  Upper bound for the x column values. For non-numeric x column,
 *              each x column item is mapped to an integral value starting from
 *              0.
 * @param minY  Lower bound for the y column values. For non-numeric y column,
 *              each y column item is mapped to an integral value starting from
 *              0.
 * @param maxY  Upper bound for the y column values. For non-numeric y column,
 *              each y column item is mapped to an integral value starting from
 *              0.
 * @param width  Width of the generated image in pixels.
 * @param height  Height of the generated image in pixels.
 * @param bgColor  Background color of the generated image.
 * @param styleOptions  Rendering style options for a chart.
 *                      <ul>
 *                              <li> gpudb::visualize_image_chart_pointcolor:
 *                      The color of points in the plot represented as a
 *                      hexadecimal number.
 *                              <li> gpudb::visualize_image_chart_pointsize:
 *                      The size of points in the plot represented as number of
 *                      pixels.
 *                              <li> gpudb::visualize_image_chart_pointshape:
 *                      The shape of points in the plot.
 *                      <ul>
 *                              <li> gpudb::visualize_image_chart_none
 *                              <li> gpudb::visualize_image_chart_circle
 *                              <li> gpudb::visualize_image_chart_square
 *                              <li> gpudb::visualize_image_chart_diamond
 *                              <li> gpudb::visualize_image_chart_hollowcircle
 *                              <li> gpudb::visualize_image_chart_hollowsquare
 *                              <li> gpudb::visualize_image_chart_hollowdiamond
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_chart_square.
 *                              <li>
 *                      gpudb::visualize_image_chart_cb_pointcolors: Point
 *                      color class break information consisting of three
 *                      entries: class-break attribute, class-break
 *                      values/ranges, and point color values. This option
 *                      overrides the pointcolor option if both are provided.
 *                      Class-break ranges are represented in the form of
 *                      "min:max". Class-break values/ranges and point color
 *                      values are separated by cb_delimiter, e.g. {"price",
 *                      "20:30;30:40;40:50", "0xFF0000;0x00FF00;0x0000FF"}.
 *                              <li>
 *                      gpudb::visualize_image_chart_cb_pointsizes: Point size
 *                      class break information consisting of three entries:
 *                      class-break attribute, class-break values/ranges, and
 *                      point size values. This option overrides the pointsize
 *                      option if both are provided. Class-break ranges are
 *                      represented in the form of "min:max". Class-break
 *                      values/ranges and point size values are separated by
 *                      cb_delimiter, e.g. {"states", "NY;TX;CA", "3;5;7"}.
 *                              <li>
 *                      gpudb::visualize_image_chart_cb_pointshapes: Point
 *                      shape class break information consisting of three
 *                      entries: class-break attribute, class-break
 *                      values/ranges, and point shape names. This option
 *                      overrides the pointshape option if both are provided.
 *                      Class-break ranges are represented in the form of
 *                      "min:max". Class-break values/ranges and point shape
 *                      names are separated by cb_delimiter, e.g. {"states",
 *                      "NY;TX;CA", "circle;square;diamond"}.
 *                              <li> gpudb::visualize_image_chart_cb_delimiter:
 *                      A character or string which separates per-class values
 *                      in a class-break style option string.
 *                              <li> gpudb::visualize_image_chart_x_order_by:
 *                      An expression or aggregate expression by which
 *                      non-numeric x column values are sorted, e.g.
 *                      avg(price).
 *                              <li> gpudb::visualize_image_chart_y_order_by:
 *                      An expression or aggregate expression by which
 *                      non-numeric y column values are sorted, e.g.
 *                      avg(price).
 *                              <li> gpudb::visualize_image_chart_jitter_x:
 *                      Amplitude of horizontal jitter applied to non-numaric x
 *                      column values.
 *                              <li> gpudb::visualize_image_chart_jitter_y:
 *                      Amplitude of vertical jitter applied to non-numaric y
 *                      column values.
 *                              <li> gpudb::visualize_image_chart_plot_all: If
 *                      this options is set to "true", all non-numeric column
 *                      values are plotted ignoring min_x, max_x, min_y and
 *                      max_y parameters.
 *                      </ul>
 * @param options  Optional parameters.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

VisualizeImageChartResponse& visualizeImageChart( const std::string& tableName,
                                                  const std::string& xColumnName,
                                                  const std::string& yColumnName,
                                                  const double minX,
                                                  const double maxX,
                                                  const double minY,
                                                  const double maxY,
                                                  const int32_t width,
                                                  const int32_t height,
                                                  const std::string& bgColor,
                                                  const std::map<std::string, std::vector<std::string> >& styleOptions,
                                                  const std::map<std::string, std::string>& options,
                                                  VisualizeImageChartResponse& response_ ) const;

/**
 * @private
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

VisualizeImageClassbreakResponse visualizeImageClassbreak( const VisualizeImageClassbreakRequest& request_ ) const;

/**
 * @private
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

VisualizeImageClassbreakResponse& visualizeImageClassbreak( const VisualizeImageClassbreakRequest& request_,
                                                            VisualizeImageClassbreakResponse& response_ ) const;

/**
 * @private
 * 
 * @param tableNames
 * @param worldTableNames
 * @param xColumnName
 * @param yColumnName
 * @param geometryColumnName
 * @param trackIds
 * @param cbColumnName1
 * @param cbVals1
 * @param cbColumnName2
 * @param cbVals2
 * @param minX
 * @param maxX
 * @param minY
 * @param maxY
 * @param width
 * @param height
 * @param projection
 *                    <ul>
 *                            <li> gpudb::visualize_image_classbreak_EPSG_4326
 *                            <li>
 *                    gpudb::visualize_image_classbreak_PLATE_CARREE
 *                            <li> gpudb::visualize_image_classbreak_900913
 *                            <li>
 *                    gpudb::visualize_image_classbreak_EPSG_900913
 *                            <li> gpudb::visualize_image_classbreak_102100
 *                            <li>
 *                    gpudb::visualize_image_classbreak_EPSG_102100
 *                            <li> gpudb::visualize_image_classbreak_3857
 *                            <li> gpudb::visualize_image_classbreak_EPSG_3857
 *                            <li>
 *                    gpudb::visualize_image_classbreak_WEB_MERCATOR
 *                    </ul>
 *                    The default value is
 *                    gpudb::visualize_image_classbreak_PLATE_CARREE.
 * @param bgColor
 * @param styleOptions
 *                      <ul>
 *                              <li>
 *                      gpudb::visualize_image_classbreak_do_points:
 *                      <ul>
 *                              <li> gpudb::visualize_image_classbreak_true
 *                              <li> gpudb::visualize_image_classbreak_false
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_classbreak_true.
 *                              <li>
 *                      gpudb::visualize_image_classbreak_do_shapes:
 *                      <ul>
 *                              <li> gpudb::visualize_image_classbreak_true
 *                              <li> gpudb::visualize_image_classbreak_false
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_classbreak_true.
 *                              <li>
 *                      gpudb::visualize_image_classbreak_do_tracks:
 *                      <ul>
 *                              <li> gpudb::visualize_image_classbreak_true
 *                              <li> gpudb::visualize_image_classbreak_false
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_classbreak_true.
 *                              <li>
 *                      gpudb::visualize_image_classbreak_do_symbology:
 *                      <ul>
 *                              <li> gpudb::visualize_image_classbreak_true
 *                              <li> gpudb::visualize_image_classbreak_false
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_classbreak_false.
 *                              <li>
 *                      gpudb::visualize_image_classbreak_pointcolors
 *                              <li>
 *                      gpudb::visualize_image_classbreak_pointsizes
 *                              <li>
 *                      gpudb::visualize_image_classbreak_pointshapes:
 *                      <ul>
 *                              <li> gpudb::visualize_image_classbreak_none
 *                              <li> gpudb::visualize_image_classbreak_circle
 *                              <li> gpudb::visualize_image_classbreak_square
 *                              <li> gpudb::visualize_image_classbreak_diamond
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowcircle
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowsquare
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowdiamond
 *                              <li>
 *                      gpudb::visualize_image_classbreak_SYMBOLCODE
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_classbreak_none.
 *                              <li>
 *                      gpudb::visualize_image_classbreak_shapelinewidths
 *                              <li>
 *                      gpudb::visualize_image_classbreak_shapelinecolors
 *                              <li>
 *                      gpudb::visualize_image_classbreak_shapefillcolors
 *                              <li>
 *                      gpudb::visualize_image_classbreak_tracklinewidths
 *                              <li>
 *                      gpudb::visualize_image_classbreak_tracklinecolors
 *                              <li>
 *                      gpudb::visualize_image_classbreak_trackmarkersizes
 *                              <li>
 *                      gpudb::visualize_image_classbreak_trackmarkercolors
 *                              <li>
 *                      gpudb::visualize_image_classbreak_trackmarkershapes:
 *                      <ul>
 *                              <li> gpudb::visualize_image_classbreak_none
 *                              <li> gpudb::visualize_image_classbreak_circle
 *                              <li> gpudb::visualize_image_classbreak_square
 *                              <li> gpudb::visualize_image_classbreak_diamond
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowcircle
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowsquare
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowdiamond
 *                              <li>
 *                      gpudb::visualize_image_classbreak_SYMBOLCODE
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_classbreak_none.
 *                              <li>
 *                      gpudb::visualize_image_classbreak_trackheadcolors
 *                              <li>
 *                      gpudb::visualize_image_classbreak_trackheadsizes
 *                              <li>
 *                      gpudb::visualize_image_classbreak_trackheadshapes:
 *                      <ul>
 *                              <li> gpudb::visualize_image_classbreak_none
 *                              <li> gpudb::visualize_image_classbreak_circle
 *                              <li> gpudb::visualize_image_classbreak_square
 *                              <li> gpudb::visualize_image_classbreak_diamond
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowcircle
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowsquare
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowdiamond
 *                              <li>
 *                      gpudb::visualize_image_classbreak_SYMBOLCODE
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_classbreak_circle.
 *                      </ul>
 * @param options
 * 
 * @return Response object containing the result of the operation.
 * 
 */

VisualizeImageClassbreakResponse visualizeImageClassbreak( const std::vector<std::string>& tableNames,
                                                           const std::vector<std::string>& worldTableNames,
                                                           const std::string& xColumnName,
                                                           const std::string& yColumnName,
                                                           const std::string& geometryColumnName,
                                                           const std::vector<std::vector<std::string> >& trackIds,
                                                           const std::string& cbColumnName1,
                                                           const std::vector<std::string>& cbVals1,
                                                           const std::vector<std::string>& cbColumnName2,
                                                           const std::vector<std::vector<std::string> >& cbVals2,
                                                           const double minX,
                                                           const double maxX,
                                                           const double minY,
                                                           const double maxY,
                                                           const int32_t width,
                                                           const int32_t height,
                                                           const std::string& projection,
                                                           const int64_t bgColor,
                                                           const std::map<std::string, std::vector<std::string> >& styleOptions,
                                                           const std::map<std::string, std::string>& options ) const;

/**
 * @private
 * 
 * @param tableNames
 * @param worldTableNames
 * @param xColumnName
 * @param yColumnName
 * @param geometryColumnName
 * @param trackIds
 * @param cbColumnName1
 * @param cbVals1
 * @param cbColumnName2
 * @param cbVals2
 * @param minX
 * @param maxX
 * @param minY
 * @param maxY
 * @param width
 * @param height
 * @param projection
 *                    <ul>
 *                            <li> gpudb::visualize_image_classbreak_EPSG_4326
 *                            <li>
 *                    gpudb::visualize_image_classbreak_PLATE_CARREE
 *                            <li> gpudb::visualize_image_classbreak_900913
 *                            <li>
 *                    gpudb::visualize_image_classbreak_EPSG_900913
 *                            <li> gpudb::visualize_image_classbreak_102100
 *                            <li>
 *                    gpudb::visualize_image_classbreak_EPSG_102100
 *                            <li> gpudb::visualize_image_classbreak_3857
 *                            <li> gpudb::visualize_image_classbreak_EPSG_3857
 *                            <li>
 *                    gpudb::visualize_image_classbreak_WEB_MERCATOR
 *                    </ul>
 *                    The default value is
 *                    gpudb::visualize_image_classbreak_PLATE_CARREE.
 * @param bgColor
 * @param styleOptions
 *                      <ul>
 *                              <li>
 *                      gpudb::visualize_image_classbreak_do_points:
 *                      <ul>
 *                              <li> gpudb::visualize_image_classbreak_true
 *                              <li> gpudb::visualize_image_classbreak_false
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_classbreak_true.
 *                              <li>
 *                      gpudb::visualize_image_classbreak_do_shapes:
 *                      <ul>
 *                              <li> gpudb::visualize_image_classbreak_true
 *                              <li> gpudb::visualize_image_classbreak_false
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_classbreak_true.
 *                              <li>
 *                      gpudb::visualize_image_classbreak_do_tracks:
 *                      <ul>
 *                              <li> gpudb::visualize_image_classbreak_true
 *                              <li> gpudb::visualize_image_classbreak_false
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_classbreak_true.
 *                              <li>
 *                      gpudb::visualize_image_classbreak_do_symbology:
 *                      <ul>
 *                              <li> gpudb::visualize_image_classbreak_true
 *                              <li> gpudb::visualize_image_classbreak_false
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_classbreak_false.
 *                              <li>
 *                      gpudb::visualize_image_classbreak_pointcolors
 *                              <li>
 *                      gpudb::visualize_image_classbreak_pointsizes
 *                              <li>
 *                      gpudb::visualize_image_classbreak_pointshapes:
 *                      <ul>
 *                              <li> gpudb::visualize_image_classbreak_none
 *                              <li> gpudb::visualize_image_classbreak_circle
 *                              <li> gpudb::visualize_image_classbreak_square
 *                              <li> gpudb::visualize_image_classbreak_diamond
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowcircle
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowsquare
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowdiamond
 *                              <li>
 *                      gpudb::visualize_image_classbreak_SYMBOLCODE
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_classbreak_none.
 *                              <li>
 *                      gpudb::visualize_image_classbreak_shapelinewidths
 *                              <li>
 *                      gpudb::visualize_image_classbreak_shapelinecolors
 *                              <li>
 *                      gpudb::visualize_image_classbreak_shapefillcolors
 *                              <li>
 *                      gpudb::visualize_image_classbreak_tracklinewidths
 *                              <li>
 *                      gpudb::visualize_image_classbreak_tracklinecolors
 *                              <li>
 *                      gpudb::visualize_image_classbreak_trackmarkersizes
 *                              <li>
 *                      gpudb::visualize_image_classbreak_trackmarkercolors
 *                              <li>
 *                      gpudb::visualize_image_classbreak_trackmarkershapes:
 *                      <ul>
 *                              <li> gpudb::visualize_image_classbreak_none
 *                              <li> gpudb::visualize_image_classbreak_circle
 *                              <li> gpudb::visualize_image_classbreak_square
 *                              <li> gpudb::visualize_image_classbreak_diamond
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowcircle
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowsquare
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowdiamond
 *                              <li>
 *                      gpudb::visualize_image_classbreak_SYMBOLCODE
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_classbreak_none.
 *                              <li>
 *                      gpudb::visualize_image_classbreak_trackheadcolors
 *                              <li>
 *                      gpudb::visualize_image_classbreak_trackheadsizes
 *                              <li>
 *                      gpudb::visualize_image_classbreak_trackheadshapes:
 *                      <ul>
 *                              <li> gpudb::visualize_image_classbreak_none
 *                              <li> gpudb::visualize_image_classbreak_circle
 *                              <li> gpudb::visualize_image_classbreak_square
 *                              <li> gpudb::visualize_image_classbreak_diamond
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowcircle
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowsquare
 *                              <li>
 *                      gpudb::visualize_image_classbreak_hollowdiamond
 *                              <li>
 *                      gpudb::visualize_image_classbreak_SYMBOLCODE
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_classbreak_circle.
 *                      </ul>
 * @param options
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

VisualizeImageClassbreakResponse& visualizeImageClassbreak( const std::vector<std::string>& tableNames,
                                                            const std::vector<std::string>& worldTableNames,
                                                            const std::string& xColumnName,
                                                            const std::string& yColumnName,
                                                            const std::string& geometryColumnName,
                                                            const std::vector<std::vector<std::string> >& trackIds,
                                                            const std::string& cbColumnName1,
                                                            const std::vector<std::string>& cbVals1,
                                                            const std::vector<std::string>& cbColumnName2,
                                                            const std::vector<std::vector<std::string> >& cbVals2,
                                                            const double minX,
                                                            const double maxX,
                                                            const double minY,
                                                            const double maxY,
                                                            const int32_t width,
                                                            const int32_t height,
                                                            const std::string& projection,
                                                            const int64_t bgColor,
                                                            const std::map<std::string, std::vector<std::string> >& styleOptions,
                                                            const std::map<std::string, std::string>& options,
                                                            VisualizeImageClassbreakResponse& response_ ) const;

/**
 * @private
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

VisualizeImageHeatmapResponse visualizeImageHeatmap( const VisualizeImageHeatmapRequest& request_ ) const;

/**
 * @private
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

VisualizeImageHeatmapResponse& visualizeImageHeatmap( const VisualizeImageHeatmapRequest& request_,
                                                      VisualizeImageHeatmapResponse& response_ ) const;

/**
 * @private
 * 
 * @param tableNames
 * @param xColumnName
 * @param yColumnName
 * @param valueColumnName
 * @param minX
 * @param maxX
 * @param minY
 * @param maxY
 * @param width
 * @param height
 * @param projection
 *                    <ul>
 *                            <li> gpudb::visualize_image_heatmap_EPSG_4326
 *                            <li> gpudb::visualize_image_heatmap_PLATE_CARREE
 *                            <li> gpudb::visualize_image_heatmap_900913
 *                            <li> gpudb::visualize_image_heatmap_EPSG_900913
 *                            <li> gpudb::visualize_image_heatmap_102100
 *                            <li> gpudb::visualize_image_heatmap_EPSG_102100
 *                            <li> gpudb::visualize_image_heatmap_3857
 *                            <li> gpudb::visualize_image_heatmap_EPSG_3857
 *                            <li> gpudb::visualize_image_heatmap_WEB_MERCATOR
 *                    </ul>
 *                    The default value is
 *                    gpudb::visualize_image_heatmap_PLATE_CARREE.
 * @param styleOptions
 *                      <ul>
 *                              <li> gpudb::visualize_image_heatmap_colormap:
 *                      <ul>
 *                              <li> gpudb::visualize_image_heatmap_jet
 *                              <li> gpudb::visualize_image_heatmap_hot
 *                              <li> gpudb::visualize_image_heatmap_hsv
 *                              <li> gpudb::visualize_image_heatmap_gray
 *                              <li> gpudb::visualize_image_heatmap_blues
 *                              <li> gpudb::visualize_image_heatmap_greens
 *                              <li> gpudb::visualize_image_heatmap_greys
 *                              <li> gpudb::visualize_image_heatmap_oranges
 *                              <li> gpudb::visualize_image_heatmap_purples
 *                              <li> gpudb::visualize_image_heatmap_reds
 *                              <li> gpudb::visualize_image_heatmap_viridis
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_heatmap_jet.
 *                              <li> gpudb::visualize_image_heatmap_blur_radius
 *                              <li> gpudb::visualize_image_heatmap_bg_color
 *                              <li>
 *                      gpudb::visualize_image_heatmap_gradient_start_color
 *                              <li>
 *                      gpudb::visualize_image_heatmap_gradient_end_color
 *                      </ul>
 * @param options
 * 
 * @return Response object containing the result of the operation.
 * 
 */

VisualizeImageHeatmapResponse visualizeImageHeatmap( const std::vector<std::string>& tableNames,
                                                     const std::string& xColumnName,
                                                     const std::string& yColumnName,
                                                     const std::string& valueColumnName,
                                                     const double minX,
                                                     const double maxX,
                                                     const double minY,
                                                     const double maxY,
                                                     const int32_t width,
                                                     const int32_t height,
                                                     const std::string& projection,
                                                     const std::map<std::string, std::string>& styleOptions,
                                                     const std::map<std::string, std::string>& options ) const;

/**
 * @private
 * 
 * @param tableNames
 * @param xColumnName
 * @param yColumnName
 * @param valueColumnName
 * @param minX
 * @param maxX
 * @param minY
 * @param maxY
 * @param width
 * @param height
 * @param projection
 *                    <ul>
 *                            <li> gpudb::visualize_image_heatmap_EPSG_4326
 *                            <li> gpudb::visualize_image_heatmap_PLATE_CARREE
 *                            <li> gpudb::visualize_image_heatmap_900913
 *                            <li> gpudb::visualize_image_heatmap_EPSG_900913
 *                            <li> gpudb::visualize_image_heatmap_102100
 *                            <li> gpudb::visualize_image_heatmap_EPSG_102100
 *                            <li> gpudb::visualize_image_heatmap_3857
 *                            <li> gpudb::visualize_image_heatmap_EPSG_3857
 *                            <li> gpudb::visualize_image_heatmap_WEB_MERCATOR
 *                    </ul>
 *                    The default value is
 *                    gpudb::visualize_image_heatmap_PLATE_CARREE.
 * @param styleOptions
 *                      <ul>
 *                              <li> gpudb::visualize_image_heatmap_colormap:
 *                      <ul>
 *                              <li> gpudb::visualize_image_heatmap_jet
 *                              <li> gpudb::visualize_image_heatmap_hot
 *                              <li> gpudb::visualize_image_heatmap_hsv
 *                              <li> gpudb::visualize_image_heatmap_gray
 *                              <li> gpudb::visualize_image_heatmap_blues
 *                              <li> gpudb::visualize_image_heatmap_greens
 *                              <li> gpudb::visualize_image_heatmap_greys
 *                              <li> gpudb::visualize_image_heatmap_oranges
 *                              <li> gpudb::visualize_image_heatmap_purples
 *                              <li> gpudb::visualize_image_heatmap_reds
 *                              <li> gpudb::visualize_image_heatmap_viridis
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_image_heatmap_jet.
 *                              <li> gpudb::visualize_image_heatmap_blur_radius
 *                              <li> gpudb::visualize_image_heatmap_bg_color
 *                              <li>
 *                      gpudb::visualize_image_heatmap_gradient_start_color
 *                              <li>
 *                      gpudb::visualize_image_heatmap_gradient_end_color
 *                      </ul>
 * @param options
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

VisualizeImageHeatmapResponse& visualizeImageHeatmap( const std::vector<std::string>& tableNames,
                                                      const std::string& xColumnName,
                                                      const std::string& yColumnName,
                                                      const std::string& valueColumnName,
                                                      const double minX,
                                                      const double maxX,
                                                      const double minY,
                                                      const double maxY,
                                                      const int32_t width,
                                                      const int32_t height,
                                                      const std::string& projection,
                                                      const std::map<std::string, std::string>& styleOptions,
                                                      const std::map<std::string, std::string>& options,
                                                      VisualizeImageHeatmapResponse& response_ ) const;

/**
 * @private
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

VisualizeImageLabelsResponse visualizeImageLabels( const VisualizeImageLabelsRequest& request_ ) const;

/**
 * @private
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

VisualizeImageLabelsResponse& visualizeImageLabels( const VisualizeImageLabelsRequest& request_,
                                                    VisualizeImageLabelsResponse& response_ ) const;

/**
 * @private
 * 
 * @param tableName
 * @param xColumnName
 * @param yColumnName
 * @param xOffset
 * @param yOffset
 * @param textString
 * @param font
 * @param textColor
 * @param textAngle
 * @param textScale
 * @param drawBox
 * @param drawLeader
 * @param lineWidth
 * @param lineColor
 * @param fillColor
 * @param leaderXColumnName
 * @param leaderYColumnName
 * @param filter
 * @param minX
 * @param maxX
 * @param minY
 * @param maxY
 * @param width
 * @param height
 * @param projection
 *                    <ul>
 *                            <li> gpudb::visualize_image_labels_EPSG_4326
 *                            <li> gpudb::visualize_image_labels_PLATE_CARREE
 *                            <li> gpudb::visualize_image_labels_900913
 *                            <li> gpudb::visualize_image_labels_EPSG_900913
 *                            <li> gpudb::visualize_image_labels_102100
 *                            <li> gpudb::visualize_image_labels_EPSG_102100
 *                            <li> gpudb::visualize_image_labels_3857
 *                            <li> gpudb::visualize_image_labels_EPSG_3857
 *                            <li> gpudb::visualize_image_labels_WEB_MERCATOR
 *                    </ul>
 *                    The default value is
 *                    gpudb::visualize_image_labels_PLATE_CARREE.
 * @param options
 * 
 * @return Response object containing the result of the operation.
 * 
 */

VisualizeImageLabelsResponse visualizeImageLabels( const std::string& tableName,
                                                   const std::string& xColumnName,
                                                   const std::string& yColumnName,
                                                   const std::string& xOffset,
                                                   const std::string& yOffset,
                                                   const std::string& textString,
                                                   const std::string& font,
                                                   const std::string& textColor,
                                                   const std::string& textAngle,
                                                   const std::string& textScale,
                                                   const std::string& drawBox,
                                                   const std::string& drawLeader,
                                                   const std::string& lineWidth,
                                                   const std::string& lineColor,
                                                   const std::string& fillColor,
                                                   const std::string& leaderXColumnName,
                                                   const std::string& leaderYColumnName,
                                                   const std::string& filter,
                                                   const double minX,
                                                   const double maxX,
                                                   const double minY,
                                                   const double maxY,
                                                   const int32_t width,
                                                   const int32_t height,
                                                   const std::string& projection,
                                                   const std::map<std::string, std::string>& options ) const;

/**
 * @private
 * 
 * @param tableName
 * @param xColumnName
 * @param yColumnName
 * @param xOffset
 * @param yOffset
 * @param textString
 * @param font
 * @param textColor
 * @param textAngle
 * @param textScale
 * @param drawBox
 * @param drawLeader
 * @param lineWidth
 * @param lineColor
 * @param fillColor
 * @param leaderXColumnName
 * @param leaderYColumnName
 * @param filter
 * @param minX
 * @param maxX
 * @param minY
 * @param maxY
 * @param width
 * @param height
 * @param projection
 *                    <ul>
 *                            <li> gpudb::visualize_image_labels_EPSG_4326
 *                            <li> gpudb::visualize_image_labels_PLATE_CARREE
 *                            <li> gpudb::visualize_image_labels_900913
 *                            <li> gpudb::visualize_image_labels_EPSG_900913
 *                            <li> gpudb::visualize_image_labels_102100
 *                            <li> gpudb::visualize_image_labels_EPSG_102100
 *                            <li> gpudb::visualize_image_labels_3857
 *                            <li> gpudb::visualize_image_labels_EPSG_3857
 *                            <li> gpudb::visualize_image_labels_WEB_MERCATOR
 *                    </ul>
 *                    The default value is
 *                    gpudb::visualize_image_labels_PLATE_CARREE.
 * @param options
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

VisualizeImageLabelsResponse& visualizeImageLabels( const std::string& tableName,
                                                    const std::string& xColumnName,
                                                    const std::string& yColumnName,
                                                    const std::string& xOffset,
                                                    const std::string& yOffset,
                                                    const std::string& textString,
                                                    const std::string& font,
                                                    const std::string& textColor,
                                                    const std::string& textAngle,
                                                    const std::string& textScale,
                                                    const std::string& drawBox,
                                                    const std::string& drawLeader,
                                                    const std::string& lineWidth,
                                                    const std::string& lineColor,
                                                    const std::string& fillColor,
                                                    const std::string& leaderXColumnName,
                                                    const std::string& leaderYColumnName,
                                                    const std::string& filter,
                                                    const double minX,
                                                    const double maxX,
                                                    const double minY,
                                                    const double maxY,
                                                    const int32_t width,
                                                    const int32_t height,
                                                    const std::string& projection,
                                                    const std::map<std::string, std::string>& options,
                                                    VisualizeImageLabelsResponse& response_ ) const;

/**
 * @private
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

VisualizeVideoResponse visualizeVideo( const VisualizeVideoRequest& request_ ) const;

/**
 * @private
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

VisualizeVideoResponse& visualizeVideo( const VisualizeVideoRequest& request_,
                                        VisualizeVideoResponse& response_ ) const;

/**
 * @private
 * 
 * @param tableNames
 * @param worldTableNames
 * @param trackIds
 * @param xColumnName
 * @param yColumnName
 * @param geometryColumnName
 * @param minX
 * @param maxX
 * @param minY
 * @param maxY
 * @param width
 * @param height
 * @param projection
 *                    <ul>
 *                            <li> gpudb::visualize_video_EPSG_4326
 *                            <li> gpudb::visualize_video_PLATE_CARREE
 *                            <li> gpudb::visualize_video_900913
 *                            <li> gpudb::visualize_video_EPSG_900913
 *                            <li> gpudb::visualize_video_102100
 *                            <li> gpudb::visualize_video_EPSG_102100
 *                            <li> gpudb::visualize_video_3857
 *                            <li> gpudb::visualize_video_EPSG_3857
 *                            <li> gpudb::visualize_video_WEB_MERCATOR
 *                    </ul>
 *                    The default value is gpudb::visualize_video_PLATE_CARREE.
 * @param bgColor
 * @param timeIntervals
 * @param videoStyle
 * @param sessionKey
 * @param styleOptions
 *                      <ul>
 *                              <li> gpudb::visualize_video_do_points:
 *                      <ul>
 *                              <li> gpudb::visualize_video_true
 *                              <li> gpudb::visualize_video_false
 *                      </ul>
 *                      The default value is gpudb::visualize_video_true.
 *                              <li> gpudb::visualize_video_do_shapes:
 *                      <ul>
 *                              <li> gpudb::visualize_video_true
 *                              <li> gpudb::visualize_video_false
 *                      </ul>
 *                      The default value is gpudb::visualize_video_true.
 *                              <li> gpudb::visualize_video_do_tracks:
 *                      <ul>
 *                              <li> gpudb::visualize_video_true
 *                              <li> gpudb::visualize_video_false
 *                      </ul>
 *                      The default value is gpudb::visualize_video_true.
 *                              <li> gpudb::visualize_video_pointcolors
 *                              <li> gpudb::visualize_video_pointsizes
 *                              <li> gpudb::visualize_video_pointshapes:
 *                      <ul>
 *                              <li> gpudb::visualize_video_none
 *                              <li> gpudb::visualize_video_circle
 *                              <li> gpudb::visualize_video_square
 *                              <li> gpudb::visualize_video_diamond
 *                              <li> gpudb::visualize_video_hollowcircle
 *                              <li> gpudb::visualize_video_hollowsquare
 *                              <li> gpudb::visualize_video_hollowdiamond
 *                              <li> gpudb::visualize_video_SYMBOLCODE
 *                      </ul>
 *                              <li> gpudb::visualize_video_shapelinewidths
 *                              <li> gpudb::visualize_video_shapelinecolors
 *                              <li> gpudb::visualize_video_shapefillcolors
 *                              <li> gpudb::visualize_video_tracklinewidths
 *                              <li> gpudb::visualize_video_tracklinecolors
 *                              <li> gpudb::visualize_video_trackmarkersizes
 *                              <li> gpudb::visualize_video_trackmarkercolors
 *                              <li> gpudb::visualize_video_trackmarkershapes:
 *                      <ul>
 *                              <li> gpudb::visualize_video_none
 *                              <li> gpudb::visualize_video_circle
 *                              <li> gpudb::visualize_video_square
 *                              <li> gpudb::visualize_video_diamond
 *                              <li> gpudb::visualize_video_hollowcircle
 *                              <li> gpudb::visualize_video_hollowsquare
 *                              <li> gpudb::visualize_video_hollowdiamond
 *                              <li> gpudb::visualize_video_SYMBOLCODE
 *                      </ul>
 *                      The default value is gpudb::visualize_video_none.
 *                              <li> gpudb::visualize_video_trackheadcolors
 *                              <li> gpudb::visualize_video_trackheadsizes
 *                              <li> gpudb::visualize_video_trackheadshapes:
 *                      <ul>
 *                              <li> gpudb::visualize_video_none
 *                              <li> gpudb::visualize_video_circle
 *                              <li> gpudb::visualize_video_square
 *                              <li> gpudb::visualize_video_diamond
 *                              <li> gpudb::visualize_video_hollowcircle
 *                              <li> gpudb::visualize_video_hollowsquare
 *                              <li> gpudb::visualize_video_hollowdiamond
 *                              <li> gpudb::visualize_video_SYMBOLCODE
 *                      </ul>
 *                      The default value is gpudb::visualize_video_circle.
 *                      </ul>
 * @param options
 * 
 * @return Response object containing the result of the operation.
 * 
 */

VisualizeVideoResponse visualizeVideo( const std::vector<std::string>& tableNames,
                                       const std::vector<std::string>& worldTableNames,
                                       const std::vector<std::vector<std::string> >& trackIds,
                                       const std::string& xColumnName,
                                       const std::string& yColumnName,
                                       const std::string& geometryColumnName,
                                       const double minX,
                                       const double maxX,
                                       const double minY,
                                       const double maxY,
                                       const int32_t width,
                                       const int32_t height,
                                       const std::string& projection,
                                       const int64_t bgColor,
                                       const std::vector<std::vector<double> >& timeIntervals,
                                       const std::string& videoStyle,
                                       const std::string& sessionKey,
                                       const std::map<std::string, std::vector<std::string> >& styleOptions,
                                       const std::map<std::string, std::string>& options ) const;

/**
 * @private
 * 
 * @param tableNames
 * @param worldTableNames
 * @param trackIds
 * @param xColumnName
 * @param yColumnName
 * @param geometryColumnName
 * @param minX
 * @param maxX
 * @param minY
 * @param maxY
 * @param width
 * @param height
 * @param projection
 *                    <ul>
 *                            <li> gpudb::visualize_video_EPSG_4326
 *                            <li> gpudb::visualize_video_PLATE_CARREE
 *                            <li> gpudb::visualize_video_900913
 *                            <li> gpudb::visualize_video_EPSG_900913
 *                            <li> gpudb::visualize_video_102100
 *                            <li> gpudb::visualize_video_EPSG_102100
 *                            <li> gpudb::visualize_video_3857
 *                            <li> gpudb::visualize_video_EPSG_3857
 *                            <li> gpudb::visualize_video_WEB_MERCATOR
 *                    </ul>
 *                    The default value is gpudb::visualize_video_PLATE_CARREE.
 * @param bgColor
 * @param timeIntervals
 * @param videoStyle
 * @param sessionKey
 * @param styleOptions
 *                      <ul>
 *                              <li> gpudb::visualize_video_do_points:
 *                      <ul>
 *                              <li> gpudb::visualize_video_true
 *                              <li> gpudb::visualize_video_false
 *                      </ul>
 *                      The default value is gpudb::visualize_video_true.
 *                              <li> gpudb::visualize_video_do_shapes:
 *                      <ul>
 *                              <li> gpudb::visualize_video_true
 *                              <li> gpudb::visualize_video_false
 *                      </ul>
 *                      The default value is gpudb::visualize_video_true.
 *                              <li> gpudb::visualize_video_do_tracks:
 *                      <ul>
 *                              <li> gpudb::visualize_video_true
 *                              <li> gpudb::visualize_video_false
 *                      </ul>
 *                      The default value is gpudb::visualize_video_true.
 *                              <li> gpudb::visualize_video_pointcolors
 *                              <li> gpudb::visualize_video_pointsizes
 *                              <li> gpudb::visualize_video_pointshapes:
 *                      <ul>
 *                              <li> gpudb::visualize_video_none
 *                              <li> gpudb::visualize_video_circle
 *                              <li> gpudb::visualize_video_square
 *                              <li> gpudb::visualize_video_diamond
 *                              <li> gpudb::visualize_video_hollowcircle
 *                              <li> gpudb::visualize_video_hollowsquare
 *                              <li> gpudb::visualize_video_hollowdiamond
 *                              <li> gpudb::visualize_video_SYMBOLCODE
 *                      </ul>
 *                              <li> gpudb::visualize_video_shapelinewidths
 *                              <li> gpudb::visualize_video_shapelinecolors
 *                              <li> gpudb::visualize_video_shapefillcolors
 *                              <li> gpudb::visualize_video_tracklinewidths
 *                              <li> gpudb::visualize_video_tracklinecolors
 *                              <li> gpudb::visualize_video_trackmarkersizes
 *                              <li> gpudb::visualize_video_trackmarkercolors
 *                              <li> gpudb::visualize_video_trackmarkershapes:
 *                      <ul>
 *                              <li> gpudb::visualize_video_none
 *                              <li> gpudb::visualize_video_circle
 *                              <li> gpudb::visualize_video_square
 *                              <li> gpudb::visualize_video_diamond
 *                              <li> gpudb::visualize_video_hollowcircle
 *                              <li> gpudb::visualize_video_hollowsquare
 *                              <li> gpudb::visualize_video_hollowdiamond
 *                              <li> gpudb::visualize_video_SYMBOLCODE
 *                      </ul>
 *                      The default value is gpudb::visualize_video_none.
 *                              <li> gpudb::visualize_video_trackheadcolors
 *                              <li> gpudb::visualize_video_trackheadsizes
 *                              <li> gpudb::visualize_video_trackheadshapes:
 *                      <ul>
 *                              <li> gpudb::visualize_video_none
 *                              <li> gpudb::visualize_video_circle
 *                              <li> gpudb::visualize_video_square
 *                              <li> gpudb::visualize_video_diamond
 *                              <li> gpudb::visualize_video_hollowcircle
 *                              <li> gpudb::visualize_video_hollowsquare
 *                              <li> gpudb::visualize_video_hollowdiamond
 *                              <li> gpudb::visualize_video_SYMBOLCODE
 *                      </ul>
 *                      The default value is gpudb::visualize_video_circle.
 *                      </ul>
 * @param options
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

VisualizeVideoResponse& visualizeVideo( const std::vector<std::string>& tableNames,
                                        const std::vector<std::string>& worldTableNames,
                                        const std::vector<std::vector<std::string> >& trackIds,
                                        const std::string& xColumnName,
                                        const std::string& yColumnName,
                                        const std::string& geometryColumnName,
                                        const double minX,
                                        const double maxX,
                                        const double minY,
                                        const double maxY,
                                        const int32_t width,
                                        const int32_t height,
                                        const std::string& projection,
                                        const int64_t bgColor,
                                        const std::vector<std::vector<double> >& timeIntervals,
                                        const std::string& videoStyle,
                                        const std::string& sessionKey,
                                        const std::map<std::string, std::vector<std::string> >& styleOptions,
                                        const std::map<std::string, std::string>& options,
                                        VisualizeVideoResponse& response_ ) const;

/**
 * @private
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * 
 * @return Response object containing the result of the operation.
 * 
 */

VisualizeVideoHeatmapResponse visualizeVideoHeatmap( const VisualizeVideoHeatmapRequest& request_ ) const;

/**
 * @private
 * 
 * @param[in] request_  Request object containing the parameters for the
 *                      operation.
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

VisualizeVideoHeatmapResponse& visualizeVideoHeatmap( const VisualizeVideoHeatmapRequest& request_,
                                                      VisualizeVideoHeatmapResponse& response_ ) const;

/**
 * @private
 * 
 * @param tableNames
 * @param xColumnName
 * @param yColumnName
 * @param minX
 * @param maxX
 * @param minY
 * @param maxY
 * @param timeIntervals
 * @param width
 * @param height
 * @param projection
 *                    <ul>
 *                            <li> gpudb::visualize_video_heatmap_EPSG_4326
 *                            <li> gpudb::visualize_video_heatmap_PLATE_CARREE
 *                            <li> gpudb::visualize_video_heatmap_900913
 *                            <li> gpudb::visualize_video_heatmap_EPSG_900913
 *                            <li> gpudb::visualize_video_heatmap_102100
 *                            <li> gpudb::visualize_video_heatmap_EPSG_102100
 *                            <li> gpudb::visualize_video_heatmap_3857
 *                            <li> gpudb::visualize_video_heatmap_EPSG_3857
 *                            <li> gpudb::visualize_video_heatmap_WEB_MERCATOR
 *                    </ul>
 *                    The default value is
 *                    gpudb::visualize_video_heatmap_PLATE_CARREE.
 * @param videoStyle
 * @param sessionKey
 * @param styleOptions
 *                      <ul>
 *                              <li> gpudb::visualize_video_heatmap_colormap:
 *                      <ul>
 *                              <li> gpudb::visualize_video_heatmap_jet
 *                              <li> gpudb::visualize_video_heatmap_hot
 *                              <li> gpudb::visualize_video_heatmap_hsv
 *                              <li> gpudb::visualize_video_heatmap_gray
 *                              <li> gpudb::visualize_video_heatmap_blues
 *                              <li> gpudb::visualize_video_heatmap_greens
 *                              <li> gpudb::visualize_video_heatmap_greys
 *                              <li> gpudb::visualize_video_heatmap_oranges
 *                              <li> gpudb::visualize_video_heatmap_purples
 *                              <li> gpudb::visualize_video_heatmap_reds
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_video_heatmap_reds.
 *                              <li> gpudb::visualize_video_heatmap_blur_radius
 *                              <li> gpudb::visualize_video_heatmap_bg_color
 *                              <li>
 *                      gpudb::visualize_video_heatmap_gradient_start_color
 *                              <li>
 *                      gpudb::visualize_video_heatmap_gradient_end_color
 *                      </ul>
 * @param options
 * 
 * @return Response object containing the result of the operation.
 * 
 */

VisualizeVideoHeatmapResponse visualizeVideoHeatmap( const std::vector<std::string>& tableNames,
                                                     const std::string& xColumnName,
                                                     const std::string& yColumnName,
                                                     const double minX,
                                                     const double maxX,
                                                     const double minY,
                                                     const double maxY,
                                                     const std::vector<std::vector<double> >& timeIntervals,
                                                     const int32_t width,
                                                     const int32_t height,
                                                     const std::string& projection,
                                                     const std::string& videoStyle,
                                                     const std::string& sessionKey,
                                                     const std::map<std::string, std::string>& styleOptions,
                                                     const std::map<std::string, std::string>& options ) const;

/**
 * @private
 * 
 * @param tableNames
 * @param xColumnName
 * @param yColumnName
 * @param minX
 * @param maxX
 * @param minY
 * @param maxY
 * @param timeIntervals
 * @param width
 * @param height
 * @param projection
 *                    <ul>
 *                            <li> gpudb::visualize_video_heatmap_EPSG_4326
 *                            <li> gpudb::visualize_video_heatmap_PLATE_CARREE
 *                            <li> gpudb::visualize_video_heatmap_900913
 *                            <li> gpudb::visualize_video_heatmap_EPSG_900913
 *                            <li> gpudb::visualize_video_heatmap_102100
 *                            <li> gpudb::visualize_video_heatmap_EPSG_102100
 *                            <li> gpudb::visualize_video_heatmap_3857
 *                            <li> gpudb::visualize_video_heatmap_EPSG_3857
 *                            <li> gpudb::visualize_video_heatmap_WEB_MERCATOR
 *                    </ul>
 *                    The default value is
 *                    gpudb::visualize_video_heatmap_PLATE_CARREE.
 * @param videoStyle
 * @param sessionKey
 * @param styleOptions
 *                      <ul>
 *                              <li> gpudb::visualize_video_heatmap_colormap:
 *                      <ul>
 *                              <li> gpudb::visualize_video_heatmap_jet
 *                              <li> gpudb::visualize_video_heatmap_hot
 *                              <li> gpudb::visualize_video_heatmap_hsv
 *                              <li> gpudb::visualize_video_heatmap_gray
 *                              <li> gpudb::visualize_video_heatmap_blues
 *                              <li> gpudb::visualize_video_heatmap_greens
 *                              <li> gpudb::visualize_video_heatmap_greys
 *                              <li> gpudb::visualize_video_heatmap_oranges
 *                              <li> gpudb::visualize_video_heatmap_purples
 *                              <li> gpudb::visualize_video_heatmap_reds
 *                      </ul>
 *                      The default value is
 *                      gpudb::visualize_video_heatmap_reds.
 *                              <li> gpudb::visualize_video_heatmap_blur_radius
 *                              <li> gpudb::visualize_video_heatmap_bg_color
 *                              <li>
 *                      gpudb::visualize_video_heatmap_gradient_start_color
 *                              <li>
 *                      gpudb::visualize_video_heatmap_gradient_end_color
 *                      </ul>
 * @param options
 * @param[out] response_  Response object containing the results of the
 *                        operation.
 * 
 * @return Response object containing the result of the operation (initially
 *         passed in by reference).
 * 
 */

VisualizeVideoHeatmapResponse& visualizeVideoHeatmap( const std::vector<std::string>& tableNames,
                                                      const std::string& xColumnName,
                                                      const std::string& yColumnName,
                                                      const double minX,
                                                      const double maxX,
                                                      const double minY,
                                                      const double maxY,
                                                      const std::vector<std::vector<double> >& timeIntervals,
                                                      const int32_t width,
                                                      const int32_t height,
                                                      const std::string& projection,
                                                      const std::string& videoStyle,
                                                      const std::string& sessionKey,
                                                      const std::map<std::string, std::string>& styleOptions,
                                                      const std::map<std::string, std::string>& options,
                                                      VisualizeVideoHeatmapResponse& response_ ) const;
